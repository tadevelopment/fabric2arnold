#ifndef __KL2EDK_AUTOGEN_ArnoldKLPluginMgr__
#define __KL2EDK_AUTOGEN_ArnoldKLPluginMgr__

#ifdef KL2EDK_INCLUDE_MESSAGES
  #pragma message ( "Including 'ArnoldKLPluginMgr.h'" )
#endif

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by kl2edk version 1.15.3
////////////////////////////////////////////////////////////////

#include <FabricEDK.h>
#if FABRIC_EDK_VERSION_MAJ != 1 || FABRIC_EDK_VERSION_MIN != 15
# error "This file needs to be rebuilt for the current EDK version!"
#endif

#include "global.h"

namespace Fabric { namespace EDK { namespace KL {

// KL object 'ArnoldKLPluginMgr'

class ArnoldKLPluginMgr
{
protected:
  
  struct Bits;
  Bits *m_bits;
  
  friend struct Traits< ArnoldKLPluginMgr >;
  
  static void ConstructEmpty( ArnoldKLPluginMgr *self );
  
  static void ConstructCopy( ArnoldKLPluginMgr *self, ArnoldKLPluginMgr const *other );
  
  static void AssignCopy( ArnoldKLPluginMgr *self, ArnoldKLPluginMgr const *other );
  
  static void Destruct( ArnoldKLPluginMgr *self );
  
public: 
  
  typedef ArnoldKLPluginMgr &Result;
  typedef ArnoldKLPluginMgr const &INParam;
  typedef ArnoldKLPluginMgr &IOParam;
  
  ArnoldKLPluginMgr();
  
  static ArnoldKLPluginMgr Create();
  
  ArnoldKLPluginMgr( ArnoldKLPluginMgr const &that );
  
  ArnoldKLPluginMgr &operator =( ArnoldKLPluginMgr const &that );
  
  ~ArnoldKLPluginMgr();
  
  void appendDesc( String::IOParam string ) const;
  uint32_t getRefCount() const;
  Type getType() const;
  
  bool isValid() const;
  
  operator bool() const;
  
  bool operator !() const;
  
  Bits *operator ->();
  
  Bits const *operator ->() const;
  
  bool operator ==( INParam that );
  
  bool operator !=( INParam that );
  
  // Methods for 'Object'
  // Methods for 'ArnoldKLPluginIMgr'
  
  void RegisterKLPlugin(
    Traits< Type >::INParam kltype,
    Traits< SInt32 >::INParam type,
    Traits< UInt8 >::INParam output_type,
    Traits< String >::INParam name,
    Traits< String >::INParam filename
    );
  
  a2fPluginShaderInterface CreateInstance(
    Traits< String >::INParam name
    ) const;
};

inline void Traits<ArnoldKLPluginMgr>::ConstructEmpty( ArnoldKLPluginMgr &val )
{
  ArnoldKLPluginMgr::ConstructEmpty( &val );
}
inline void Traits<ArnoldKLPluginMgr>::ConstructCopy( ArnoldKLPluginMgr &lhs, ArnoldKLPluginMgr const &rhs )
{
  ArnoldKLPluginMgr::ConstructCopy( &lhs, &rhs );
}
inline void Traits<ArnoldKLPluginMgr>::AssignCopy( ArnoldKLPluginMgr &lhs, ArnoldKLPluginMgr const &rhs )
{
  ArnoldKLPluginMgr::AssignCopy( &lhs, &rhs );
}
inline void Traits<ArnoldKLPluginMgr>::Destruct( ArnoldKLPluginMgr &val )
{
  ArnoldKLPluginMgr::Destruct( &val );
}

}}}

#endif // __KL2EDK_AUTOGEN_ArnoldKLPluginMgr__
