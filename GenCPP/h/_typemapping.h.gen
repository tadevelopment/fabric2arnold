/* 
 * This auto-generated file contains typemapping conversion fn
 * declarations for the data types found in Fabric2Arnold codegen file
 *  - Do not modify this file, it will be overwritten
 */


#pragma once
inline bool StringArr_to_AtEnum(const Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::String > & from, AtEnum & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool AtEnum_to_StringArr(const AtEnum & from, Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::String > & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool KlAtLicenseInfo_to_AtLicenseInfo(const Fabric::EDK::KL::AtLicenseInfo & from, AtLicenseInfo* & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool AtLicenseInfo_to_KLAtLicenseInfo(const AtLicenseInfo* const & from, Fabric::EDK::KL::AtLicenseInfo & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool KLAtCameraOutput_to_CPAtCameraOutput(const Fabric::EDK::KL::AtCameraOutput & from, AtCameraOutput & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool CPAtCameraOutput_to_KLAtCameraOutput(const AtCameraOutput & from, Fabric::EDK::KL::AtCameraOutput & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool String_to_char(const Fabric::EDK::KL::String & from, char* & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool char_to_String(const char* const & from, Fabric::EDK::KL::String & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool KLColor_to_CPAtColor(const Fabric::EDK::KL::AtColor & from, AtColor & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool CPAtColor_to_KLColor(const AtColor & from, Fabric::EDK::KL::AtColor & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool KlAtRay_to_AtRay(const Fabric::EDK::KL::AtRay & from, AtRay & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool AtRay_to_KLAtRay(const AtRay & from, Fabric::EDK::KL::AtRay & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool KlAtMetaDataEntry_to_AtMetaDataEntry(const Fabric::EDK::KL::AtMetaDataEntry & from, AtMetaDataEntry* & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool AtMetaDataEntry_to_KLAtMetaDataEntry(const AtMetaDataEntry* const & from, Fabric::EDK::KL::AtMetaDataEntry & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool Box3_to_AtBBox(const Fabric::EDK::KL::Box3 & from, AtBBox & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool AtBBox_to_Box3(const AtBBox & from, Fabric::EDK::KL::Box3 & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool Box2_to_AtBBox2(const Fabric::EDK::KL::Box2 & from, AtBBox2 & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool AtBBox2_to_Box2(const AtBBox2 & from, Fabric::EDK::KL::Box2 & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool KLString_to_CPAtString(const Fabric::EDK::KL::String & from, AtString & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool CPAtString_to_KLString(const AtString & from, Fabric::EDK::KL::String & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool KlAtDisplayCallback_to_AtDisplayCallback(const Fabric::EDK::KL::AtDisplayCallback & from, AtDisplayCallback & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool AtDisplayCallback_to_KLAtDisplayCallback(const AtDisplayCallback & from, Fabric::EDK::KL::AtDisplayCallback & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool KlAtTextureParams_to_AtTextureParams(const Fabric::EDK::KL::AtTextureParams & from, AtTextureParams & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool AtTextureParams_to_KLAtTextureParams(const AtTextureParams & from, Fabric::EDK::KL::AtTextureParams & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool KLAtCameraInput_to_CPAtCameraInput(const Fabric::EDK::KL::AtCameraInput & from, AtCameraInput & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool CPAtCameraInput_to_KLAtCameraInput(const AtCameraInput & from, Fabric::EDK::KL::AtCameraInput & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool KlParamValue_to_AtParamValue(const Fabric::EDK::KL::AtParamValue & from, AtParamValue* & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool AtParamValue_to_KLParamValue(const AtParamValue* const & from, Fabric::EDK::KL::AtParamValue & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool Mat44_to_AtMatrix(const Fabric::EDK::KL::Mat44 & from, AtMatrix & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool AtMatrix_to_Mat44(const AtMatrix & from, Fabric::EDK::KL::Mat44 & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool KLAtNodeLib_to_CPAtNodeLib(const Fabric::EDK::KL::AtNodeLib & from, AtNodeLib & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool CPAtNodeLib_to_KLAtNodeLib(const AtNodeLib & from, Fabric::EDK::KL::AtNodeLib & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool KlArray_to_AtArray(const Fabric::EDK::KL::AtArray & from, AtArray* & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool AtArray_to_KLArray(const AtArray* const & from, Fabric::EDK::KL::AtArray & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool KlAtShaderGlobals_to_AtShaderGlobals(const Fabric::EDK::KL::AtShaderGlobals & from, AtShaderGlobals* & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool AtShaderGlobals_to_KLAtShaderGlobals(const AtShaderGlobals* const & from, Fabric::EDK::KL::AtShaderGlobals & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool Color_to_AtRGB(const Fabric::EDK::KL::Color & from, AtRGB & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool AtRGB_to_Color(const AtRGB & from, Fabric::EDK::KL::Color & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool KLColor_to_CPAtRGBA(const Fabric::EDK::KL::AtRGBA & from, AtRGBA & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool CPAtRGBA_to_KLColor(const AtRGBA & from, Fabric::EDK::KL::AtRGBA & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool KlAtAOVEntry_to_AtAOVEntry(const Fabric::EDK::KL::AtAOVEntry & from, AtAOVEntry* & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool AtAOVEntry_to_KLAtAOVEntry(const AtAOVEntry* const & from, Fabric::EDK::KL::AtAOVEntry & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool Vec2_to_AtPoint2(const Fabric::EDK::KL::Vec2 & from, AtPoint2 & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool AtPoint2_to_Vec2(const AtPoint2 & from, Fabric::EDK::KL::Vec2 & to) {
  #pragma message("Implement Me")
  return true; 
}

inline bool Vec3_to_AtPoint(const Fabric::EDK::KL::Vec3 & from, AtPoint & to) { 
  #pragma message("Implement Me")
  return true;
}

inline bool AtPoint_to_Vec3(const AtPoint & from, Fabric::EDK::KL::Vec3 & to) {
  #pragma message("Implement Me")
  return true; 
}

