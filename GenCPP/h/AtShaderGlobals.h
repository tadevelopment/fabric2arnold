#ifndef __KL2EDK_AUTOGEN_AtShaderGlobals__
#define __KL2EDK_AUTOGEN_AtShaderGlobals__

#ifdef KL2EDK_INCLUDE_MESSAGES
  #pragma message ( "Including 'AtShaderGlobals.h'" )
#endif

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by kl2edk version 1.15.3
////////////////////////////////////////////////////////////////

#include <FabricEDK.h>
#if FABRIC_EDK_VERSION_MAJ != 1 || FABRIC_EDK_VERSION_MIN != 15
# error "This file needs to be rebuilt for the current EDK version!"
#endif

#include "global.h"
#include "Vec3.h"
#include "AtNode.h"
#include "AtBucket.h"
#include "Mat44.h"
#include "Color.h"
#include "AtParamValue.h"

namespace Fabric { namespace EDK { namespace KL {

// KL struct 'AtShaderGlobals'

struct AtShaderGlobals
{
  typedef AtShaderGlobals &Result;
  typedef AtShaderGlobals const &INParam;
  typedef AtShaderGlobals &IOParam;
  
  Data _handle;
  SInt32 x;
  SInt32 y;
  Float32 sx;
  Float32 sy;
  UInt16 si;
  UInt16 i;
  UInt16 n;
  UInt16 rt;
  Float32 we;
  UInt32 transp_index;
  Vec3 ro;
  Vec3 rd;
  Float64 rl;
  UInt8 tid;
  UInt8 rr;
  UInt8 rr_refl;
  UInt8 rr_refr;
  UInt8 rr_diff;
  UInt8 rr_gloss;
  Boolean fhemi;
  Float32 time;
  UInt32 fi;
  AtNode op;
  AtNode proc;
  AtNode shader;
  AtBucket bkt;
  Vec3 po;
  Vec3 p;
  Vec3 dPdx;
  Vec3 dPdy;
  Vec3 N;
  Vec3 nf;
  Vec3 ng;
  Vec3 ngf;
  Vec3 ns;
  Float32 bu;
  Float32 bv;
  Float32 u;
  Float32 v;
  Mat44 m;
  Mat44 minv;
  VariableArray< AtNode > lights;
  AtNode lp;
  Float32 ldist;
  Vec3 ld;
  Color li;
  Color liu;
  Color lo;
  Color ci;
  Color vo;
  Float32 area;
  Vec3 dPdu;
  Vec3 dPdv;
  Vec3 dDdx;
  Vec3 dDdy;
  Vec3 dNdx;
  Vec3 dNdy;
  Float32 dudx;
  Float32 dudy;
  Float32 dvdx;
  Float32 dvdy;
  AtParamValue out;
  Color out_opacity;
  Boolean inclusive_traceset;
  Boolean skip_shadow;
  UInt8 sc;
  String traceset;
};

inline void Traits<AtShaderGlobals>::ConstructEmpty( AtShaderGlobals &val )
{
  Traits< Data >::ConstructEmpty( val._handle );
  Traits< SInt32 >::ConstructEmpty( val.x );
  Traits< SInt32 >::ConstructEmpty( val.y );
  Traits< Float32 >::ConstructEmpty( val.sx );
  Traits< Float32 >::ConstructEmpty( val.sy );
  Traits< UInt16 >::ConstructEmpty( val.si );
  Traits< UInt16 >::ConstructEmpty( val.i );
  Traits< UInt16 >::ConstructEmpty( val.n );
  Traits< UInt16 >::ConstructEmpty( val.rt );
  Traits< Float32 >::ConstructEmpty( val.we );
  Traits< UInt32 >::ConstructEmpty( val.transp_index );
  Traits< Vec3 >::ConstructEmpty( val.ro );
  Traits< Vec3 >::ConstructEmpty( val.rd );
  Traits< Float64 >::ConstructEmpty( val.rl );
  Traits< UInt8 >::ConstructEmpty( val.tid );
  Traits< UInt8 >::ConstructEmpty( val.rr );
  Traits< UInt8 >::ConstructEmpty( val.rr_refl );
  Traits< UInt8 >::ConstructEmpty( val.rr_refr );
  Traits< UInt8 >::ConstructEmpty( val.rr_diff );
  Traits< UInt8 >::ConstructEmpty( val.rr_gloss );
  Traits< Boolean >::ConstructEmpty( val.fhemi );
  Traits< Float32 >::ConstructEmpty( val.time );
  Traits< UInt32 >::ConstructEmpty( val.fi );
  Traits< AtNode >::ConstructEmpty( val.op );
  Traits< AtNode >::ConstructEmpty( val.proc );
  Traits< AtNode >::ConstructEmpty( val.shader );
  Traits< AtBucket >::ConstructEmpty( val.bkt );
  Traits< Vec3 >::ConstructEmpty( val.po );
  Traits< Vec3 >::ConstructEmpty( val.p );
  Traits< Vec3 >::ConstructEmpty( val.dPdx );
  Traits< Vec3 >::ConstructEmpty( val.dPdy );
  Traits< Vec3 >::ConstructEmpty( val.N );
  Traits< Vec3 >::ConstructEmpty( val.nf );
  Traits< Vec3 >::ConstructEmpty( val.ng );
  Traits< Vec3 >::ConstructEmpty( val.ngf );
  Traits< Vec3 >::ConstructEmpty( val.ns );
  Traits< Float32 >::ConstructEmpty( val.bu );
  Traits< Float32 >::ConstructEmpty( val.bv );
  Traits< Float32 >::ConstructEmpty( val.u );
  Traits< Float32 >::ConstructEmpty( val.v );
  Traits< Mat44 >::ConstructEmpty( val.m );
  Traits< Mat44 >::ConstructEmpty( val.minv );
  Traits< VariableArray< AtNode > >::ConstructEmpty( val.lights );
  Traits< AtNode >::ConstructEmpty( val.lp );
  Traits< Float32 >::ConstructEmpty( val.ldist );
  Traits< Vec3 >::ConstructEmpty( val.ld );
  Traits< Color >::ConstructEmpty( val.li );
  Traits< Color >::ConstructEmpty( val.liu );
  Traits< Color >::ConstructEmpty( val.lo );
  Traits< Color >::ConstructEmpty( val.ci );
  Traits< Color >::ConstructEmpty( val.vo );
  Traits< Float32 >::ConstructEmpty( val.area );
  Traits< Vec3 >::ConstructEmpty( val.dPdu );
  Traits< Vec3 >::ConstructEmpty( val.dPdv );
  Traits< Vec3 >::ConstructEmpty( val.dDdx );
  Traits< Vec3 >::ConstructEmpty( val.dDdy );
  Traits< Vec3 >::ConstructEmpty( val.dNdx );
  Traits< Vec3 >::ConstructEmpty( val.dNdy );
  Traits< Float32 >::ConstructEmpty( val.dudx );
  Traits< Float32 >::ConstructEmpty( val.dudy );
  Traits< Float32 >::ConstructEmpty( val.dvdx );
  Traits< Float32 >::ConstructEmpty( val.dvdy );
  Traits< AtParamValue >::ConstructEmpty( val.out );
  Traits< Color >::ConstructEmpty( val.out_opacity );
  Traits< Boolean >::ConstructEmpty( val.inclusive_traceset );
  Traits< Boolean >::ConstructEmpty( val.skip_shadow );
  Traits< UInt8 >::ConstructEmpty( val.sc );
  Traits< String >::ConstructEmpty( val.traceset );
}
inline void Traits<AtShaderGlobals>::ConstructCopy( AtShaderGlobals &lhs, AtShaderGlobals const &rhs )
{
  Traits< Data >::ConstructCopy( lhs._handle, rhs._handle );
  Traits< SInt32 >::ConstructCopy( lhs.x, rhs.x );
  Traits< SInt32 >::ConstructCopy( lhs.y, rhs.y );
  Traits< Float32 >::ConstructCopy( lhs.sx, rhs.sx );
  Traits< Float32 >::ConstructCopy( lhs.sy, rhs.sy );
  Traits< UInt16 >::ConstructCopy( lhs.si, rhs.si );
  Traits< UInt16 >::ConstructCopy( lhs.i, rhs.i );
  Traits< UInt16 >::ConstructCopy( lhs.n, rhs.n );
  Traits< UInt16 >::ConstructCopy( lhs.rt, rhs.rt );
  Traits< Float32 >::ConstructCopy( lhs.we, rhs.we );
  Traits< UInt32 >::ConstructCopy( lhs.transp_index, rhs.transp_index );
  Traits< Vec3 >::ConstructCopy( lhs.ro, rhs.ro );
  Traits< Vec3 >::ConstructCopy( lhs.rd, rhs.rd );
  Traits< Float64 >::ConstructCopy( lhs.rl, rhs.rl );
  Traits< UInt8 >::ConstructCopy( lhs.tid, rhs.tid );
  Traits< UInt8 >::ConstructCopy( lhs.rr, rhs.rr );
  Traits< UInt8 >::ConstructCopy( lhs.rr_refl, rhs.rr_refl );
  Traits< UInt8 >::ConstructCopy( lhs.rr_refr, rhs.rr_refr );
  Traits< UInt8 >::ConstructCopy( lhs.rr_diff, rhs.rr_diff );
  Traits< UInt8 >::ConstructCopy( lhs.rr_gloss, rhs.rr_gloss );
  Traits< Boolean >::ConstructCopy( lhs.fhemi, rhs.fhemi );
  Traits< Float32 >::ConstructCopy( lhs.time, rhs.time );
  Traits< UInt32 >::ConstructCopy( lhs.fi, rhs.fi );
  Traits< AtNode >::ConstructCopy( lhs.op, rhs.op );
  Traits< AtNode >::ConstructCopy( lhs.proc, rhs.proc );
  Traits< AtNode >::ConstructCopy( lhs.shader, rhs.shader );
  Traits< AtBucket >::ConstructCopy( lhs.bkt, rhs.bkt );
  Traits< Vec3 >::ConstructCopy( lhs.po, rhs.po );
  Traits< Vec3 >::ConstructCopy( lhs.p, rhs.p );
  Traits< Vec3 >::ConstructCopy( lhs.dPdx, rhs.dPdx );
  Traits< Vec3 >::ConstructCopy( lhs.dPdy, rhs.dPdy );
  Traits< Vec3 >::ConstructCopy( lhs.N, rhs.N );
  Traits< Vec3 >::ConstructCopy( lhs.nf, rhs.nf );
  Traits< Vec3 >::ConstructCopy( lhs.ng, rhs.ng );
  Traits< Vec3 >::ConstructCopy( lhs.ngf, rhs.ngf );
  Traits< Vec3 >::ConstructCopy( lhs.ns, rhs.ns );
  Traits< Float32 >::ConstructCopy( lhs.bu, rhs.bu );
  Traits< Float32 >::ConstructCopy( lhs.bv, rhs.bv );
  Traits< Float32 >::ConstructCopy( lhs.u, rhs.u );
  Traits< Float32 >::ConstructCopy( lhs.v, rhs.v );
  Traits< Mat44 >::ConstructCopy( lhs.m, rhs.m );
  Traits< Mat44 >::ConstructCopy( lhs.minv, rhs.minv );
  Traits< VariableArray< AtNode > >::ConstructCopy( lhs.lights, rhs.lights );
  Traits< AtNode >::ConstructCopy( lhs.lp, rhs.lp );
  Traits< Float32 >::ConstructCopy( lhs.ldist, rhs.ldist );
  Traits< Vec3 >::ConstructCopy( lhs.ld, rhs.ld );
  Traits< Color >::ConstructCopy( lhs.li, rhs.li );
  Traits< Color >::ConstructCopy( lhs.liu, rhs.liu );
  Traits< Color >::ConstructCopy( lhs.lo, rhs.lo );
  Traits< Color >::ConstructCopy( lhs.ci, rhs.ci );
  Traits< Color >::ConstructCopy( lhs.vo, rhs.vo );
  Traits< Float32 >::ConstructCopy( lhs.area, rhs.area );
  Traits< Vec3 >::ConstructCopy( lhs.dPdu, rhs.dPdu );
  Traits< Vec3 >::ConstructCopy( lhs.dPdv, rhs.dPdv );
  Traits< Vec3 >::ConstructCopy( lhs.dDdx, rhs.dDdx );
  Traits< Vec3 >::ConstructCopy( lhs.dDdy, rhs.dDdy );
  Traits< Vec3 >::ConstructCopy( lhs.dNdx, rhs.dNdx );
  Traits< Vec3 >::ConstructCopy( lhs.dNdy, rhs.dNdy );
  Traits< Float32 >::ConstructCopy( lhs.dudx, rhs.dudx );
  Traits< Float32 >::ConstructCopy( lhs.dudy, rhs.dudy );
  Traits< Float32 >::ConstructCopy( lhs.dvdx, rhs.dvdx );
  Traits< Float32 >::ConstructCopy( lhs.dvdy, rhs.dvdy );
  Traits< AtParamValue >::ConstructCopy( lhs.out, rhs.out );
  Traits< Color >::ConstructCopy( lhs.out_opacity, rhs.out_opacity );
  Traits< Boolean >::ConstructCopy( lhs.inclusive_traceset, rhs.inclusive_traceset );
  Traits< Boolean >::ConstructCopy( lhs.skip_shadow, rhs.skip_shadow );
  Traits< UInt8 >::ConstructCopy( lhs.sc, rhs.sc );
  Traits< String >::ConstructCopy( lhs.traceset, rhs.traceset );
}
inline void Traits<AtShaderGlobals>::AssignCopy( AtShaderGlobals &lhs, AtShaderGlobals const &rhs )
{
  Traits< Data >::AssignCopy( lhs._handle, rhs._handle );
  Traits< SInt32 >::AssignCopy( lhs.x, rhs.x );
  Traits< SInt32 >::AssignCopy( lhs.y, rhs.y );
  Traits< Float32 >::AssignCopy( lhs.sx, rhs.sx );
  Traits< Float32 >::AssignCopy( lhs.sy, rhs.sy );
  Traits< UInt16 >::AssignCopy( lhs.si, rhs.si );
  Traits< UInt16 >::AssignCopy( lhs.i, rhs.i );
  Traits< UInt16 >::AssignCopy( lhs.n, rhs.n );
  Traits< UInt16 >::AssignCopy( lhs.rt, rhs.rt );
  Traits< Float32 >::AssignCopy( lhs.we, rhs.we );
  Traits< UInt32 >::AssignCopy( lhs.transp_index, rhs.transp_index );
  Traits< Vec3 >::AssignCopy( lhs.ro, rhs.ro );
  Traits< Vec3 >::AssignCopy( lhs.rd, rhs.rd );
  Traits< Float64 >::AssignCopy( lhs.rl, rhs.rl );
  Traits< UInt8 >::AssignCopy( lhs.tid, rhs.tid );
  Traits< UInt8 >::AssignCopy( lhs.rr, rhs.rr );
  Traits< UInt8 >::AssignCopy( lhs.rr_refl, rhs.rr_refl );
  Traits< UInt8 >::AssignCopy( lhs.rr_refr, rhs.rr_refr );
  Traits< UInt8 >::AssignCopy( lhs.rr_diff, rhs.rr_diff );
  Traits< UInt8 >::AssignCopy( lhs.rr_gloss, rhs.rr_gloss );
  Traits< Boolean >::AssignCopy( lhs.fhemi, rhs.fhemi );
  Traits< Float32 >::AssignCopy( lhs.time, rhs.time );
  Traits< UInt32 >::AssignCopy( lhs.fi, rhs.fi );
  Traits< AtNode >::AssignCopy( lhs.op, rhs.op );
  Traits< AtNode >::AssignCopy( lhs.proc, rhs.proc );
  Traits< AtNode >::AssignCopy( lhs.shader, rhs.shader );
  Traits< AtBucket >::AssignCopy( lhs.bkt, rhs.bkt );
  Traits< Vec3 >::AssignCopy( lhs.po, rhs.po );
  Traits< Vec3 >::AssignCopy( lhs.p, rhs.p );
  Traits< Vec3 >::AssignCopy( lhs.dPdx, rhs.dPdx );
  Traits< Vec3 >::AssignCopy( lhs.dPdy, rhs.dPdy );
  Traits< Vec3 >::AssignCopy( lhs.N, rhs.N );
  Traits< Vec3 >::AssignCopy( lhs.nf, rhs.nf );
  Traits< Vec3 >::AssignCopy( lhs.ng, rhs.ng );
  Traits< Vec3 >::AssignCopy( lhs.ngf, rhs.ngf );
  Traits< Vec3 >::AssignCopy( lhs.ns, rhs.ns );
  Traits< Float32 >::AssignCopy( lhs.bu, rhs.bu );
  Traits< Float32 >::AssignCopy( lhs.bv, rhs.bv );
  Traits< Float32 >::AssignCopy( lhs.u, rhs.u );
  Traits< Float32 >::AssignCopy( lhs.v, rhs.v );
  Traits< Mat44 >::AssignCopy( lhs.m, rhs.m );
  Traits< Mat44 >::AssignCopy( lhs.minv, rhs.minv );
  Traits< VariableArray< AtNode > >::AssignCopy( lhs.lights, rhs.lights );
  Traits< AtNode >::AssignCopy( lhs.lp, rhs.lp );
  Traits< Float32 >::AssignCopy( lhs.ldist, rhs.ldist );
  Traits< Vec3 >::AssignCopy( lhs.ld, rhs.ld );
  Traits< Color >::AssignCopy( lhs.li, rhs.li );
  Traits< Color >::AssignCopy( lhs.liu, rhs.liu );
  Traits< Color >::AssignCopy( lhs.lo, rhs.lo );
  Traits< Color >::AssignCopy( lhs.ci, rhs.ci );
  Traits< Color >::AssignCopy( lhs.vo, rhs.vo );
  Traits< Float32 >::AssignCopy( lhs.area, rhs.area );
  Traits< Vec3 >::AssignCopy( lhs.dPdu, rhs.dPdu );
  Traits< Vec3 >::AssignCopy( lhs.dPdv, rhs.dPdv );
  Traits< Vec3 >::AssignCopy( lhs.dDdx, rhs.dDdx );
  Traits< Vec3 >::AssignCopy( lhs.dDdy, rhs.dDdy );
  Traits< Vec3 >::AssignCopy( lhs.dNdx, rhs.dNdx );
  Traits< Vec3 >::AssignCopy( lhs.dNdy, rhs.dNdy );
  Traits< Float32 >::AssignCopy( lhs.dudx, rhs.dudx );
  Traits< Float32 >::AssignCopy( lhs.dudy, rhs.dudy );
  Traits< Float32 >::AssignCopy( lhs.dvdx, rhs.dvdx );
  Traits< Float32 >::AssignCopy( lhs.dvdy, rhs.dvdy );
  Traits< AtParamValue >::AssignCopy( lhs.out, rhs.out );
  Traits< Color >::AssignCopy( lhs.out_opacity, rhs.out_opacity );
  Traits< Boolean >::AssignCopy( lhs.inclusive_traceset, rhs.inclusive_traceset );
  Traits< Boolean >::AssignCopy( lhs.skip_shadow, rhs.skip_shadow );
  Traits< UInt8 >::AssignCopy( lhs.sc, rhs.sc );
  Traits< String >::AssignCopy( lhs.traceset, rhs.traceset );
}
inline void Traits<AtShaderGlobals>::Destruct( AtShaderGlobals &val )
{
  Traits< String >::Destruct( val.traceset );
  Traits< UInt8 >::Destruct( val.sc );
  Traits< Boolean >::Destruct( val.skip_shadow );
  Traits< Boolean >::Destruct( val.inclusive_traceset );
  Traits< Color >::Destruct( val.out_opacity );
  Traits< AtParamValue >::Destruct( val.out );
  Traits< Float32 >::Destruct( val.dvdy );
  Traits< Float32 >::Destruct( val.dvdx );
  Traits< Float32 >::Destruct( val.dudy );
  Traits< Float32 >::Destruct( val.dudx );
  Traits< Vec3 >::Destruct( val.dNdy );
  Traits< Vec3 >::Destruct( val.dNdx );
  Traits< Vec3 >::Destruct( val.dDdy );
  Traits< Vec3 >::Destruct( val.dDdx );
  Traits< Vec3 >::Destruct( val.dPdv );
  Traits< Vec3 >::Destruct( val.dPdu );
  Traits< Float32 >::Destruct( val.area );
  Traits< Color >::Destruct( val.vo );
  Traits< Color >::Destruct( val.ci );
  Traits< Color >::Destruct( val.lo );
  Traits< Color >::Destruct( val.liu );
  Traits< Color >::Destruct( val.li );
  Traits< Vec3 >::Destruct( val.ld );
  Traits< Float32 >::Destruct( val.ldist );
  Traits< AtNode >::Destruct( val.lp );
  Traits< VariableArray< AtNode > >::Destruct( val.lights );
  Traits< Mat44 >::Destruct( val.minv );
  Traits< Mat44 >::Destruct( val.m );
  Traits< Float32 >::Destruct( val.v );
  Traits< Float32 >::Destruct( val.u );
  Traits< Float32 >::Destruct( val.bv );
  Traits< Float32 >::Destruct( val.bu );
  Traits< Vec3 >::Destruct( val.ns );
  Traits< Vec3 >::Destruct( val.ngf );
  Traits< Vec3 >::Destruct( val.ng );
  Traits< Vec3 >::Destruct( val.nf );
  Traits< Vec3 >::Destruct( val.N );
  Traits< Vec3 >::Destruct( val.dPdy );
  Traits< Vec3 >::Destruct( val.dPdx );
  Traits< Vec3 >::Destruct( val.p );
  Traits< Vec3 >::Destruct( val.po );
  Traits< AtBucket >::Destruct( val.bkt );
  Traits< AtNode >::Destruct( val.shader );
  Traits< AtNode >::Destruct( val.proc );
  Traits< AtNode >::Destruct( val.op );
  Traits< UInt32 >::Destruct( val.fi );
  Traits< Float32 >::Destruct( val.time );
  Traits< Boolean >::Destruct( val.fhemi );
  Traits< UInt8 >::Destruct( val.rr_gloss );
  Traits< UInt8 >::Destruct( val.rr_diff );
  Traits< UInt8 >::Destruct( val.rr_refr );
  Traits< UInt8 >::Destruct( val.rr_refl );
  Traits< UInt8 >::Destruct( val.rr );
  Traits< UInt8 >::Destruct( val.tid );
  Traits< Float64 >::Destruct( val.rl );
  Traits< Vec3 >::Destruct( val.rd );
  Traits< Vec3 >::Destruct( val.ro );
  Traits< UInt32 >::Destruct( val.transp_index );
  Traits< Float32 >::Destruct( val.we );
  Traits< UInt16 >::Destruct( val.rt );
  Traits< UInt16 >::Destruct( val.n );
  Traits< UInt16 >::Destruct( val.i );
  Traits< UInt16 >::Destruct( val.si );
  Traits< Float32 >::Destruct( val.sy );
  Traits< Float32 >::Destruct( val.sx );
  Traits< SInt32 >::Destruct( val.y );
  Traits< SInt32 >::Destruct( val.x );
  Traits< Data >::Destruct( val._handle );
}
}}}

#endif // __KL2EDK_AUTOGEN_AtShaderGlobals__
