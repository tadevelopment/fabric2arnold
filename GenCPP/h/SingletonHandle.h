#ifndef __KL2EDK_AUTOGEN_SingletonHandle__
#define __KL2EDK_AUTOGEN_SingletonHandle__

#ifdef KL2EDK_INCLUDE_MESSAGES
  #pragma message ( "Including 'SingletonHandle.h'" )
#endif

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by kl2edk version 1.15.3
////////////////////////////////////////////////////////////////

#include <FabricEDK.h>
#if FABRIC_EDK_VERSION_MAJ != 1 || FABRIC_EDK_VERSION_MIN != 15
# error "This file needs to be rebuilt for the current EDK version!"
#endif

#include "global.h"

namespace Fabric { namespace EDK { namespace KL {

// KL object 'SingletonHandle'

class SingletonHandle
{
protected:
  
  struct Bits;
  Bits *m_bits;
  
  friend struct Traits< SingletonHandle >;
  
  static void ConstructEmpty( SingletonHandle *self );
  
  static void ConstructCopy( SingletonHandle *self, SingletonHandle const *other );
  
  static void AssignCopy( SingletonHandle *self, SingletonHandle const *other );
  
  static void Destruct( SingletonHandle *self );
  
public: 
  
  typedef SingletonHandle &Result;
  typedef SingletonHandle const &INParam;
  typedef SingletonHandle &IOParam;
  
  SingletonHandle();
  
  static SingletonHandle Create();
  
  SingletonHandle( SingletonHandle const &that );
  
  SingletonHandle &operator =( SingletonHandle const &that );
  
  ~SingletonHandle();
  
  void appendDesc( String::IOParam string ) const;
  uint32_t getRefCount() const;
  Type getType() const;
  
  bool isValid() const;
  
  operator bool() const;
  
  bool operator !() const;
  
  Bits *operator ->();
  
  Bits const *operator ->() const;
  
  bool operator ==( INParam that );
  
  bool operator !=( INParam that );
  
  // Methods for 'Object'
};

inline void Traits<SingletonHandle>::ConstructEmpty( SingletonHandle &val )
{
  SingletonHandle::ConstructEmpty( &val );
}
inline void Traits<SingletonHandle>::ConstructCopy( SingletonHandle &lhs, SingletonHandle const &rhs )
{
  SingletonHandle::ConstructCopy( &lhs, &rhs );
}
inline void Traits<SingletonHandle>::AssignCopy( SingletonHandle &lhs, SingletonHandle const &rhs )
{
  SingletonHandle::AssignCopy( &lhs, &rhs );
}
inline void Traits<SingletonHandle>::Destruct( SingletonHandle &val )
{
  SingletonHandle::Destruct( &val );
}

}}}

#endif // __KL2EDK_AUTOGEN_SingletonHandle__
