////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2edk version 1.15.3
////////////////////////////////////////////////////////////////

#include "global_functions.h"

#include "_IncludeAll.h"

using namespace Fabric::EDK;


FABRIC_EXT_EXPORT void _fe_AiParamGetName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamEntry >::INParam pentry
)
{
  F2A_TRY_STATEMENT("_fe_AiParamGetName")

  AtParamEntry* f2aPentry = NULL;
  if(!KLAtParamEntry_to_CPAtParamEntry(pentry, f2aPentry)){
    setError("Error in _fe_AiParamGetName. unable to convert: pentry");
    return;
  }
  const char * f2a_result = AiParamGetName(f2aPentry);
  char_to_String(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiParamGetName")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiParamGetType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamEntry >::INParam pentry
)
{
  F2A_TRY_STATEMENT("_fe_AiParamGetType")

  AtParamEntry* f2aPentry = NULL;
  if(!KLAtParamEntry_to_CPAtParamEntry(pentry, f2aPentry)){
    setError("Error in _fe_AiParamGetType. unable to convert: pentry");
    return 0;
  }
  int f2a_result = AiParamGetType(f2aPentry);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiParamGetType", )
}

FABRIC_EXT_EXPORT void _fe_AiParamGetDefault(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamValue >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamEntry >::INParam pentry
)
{
  F2A_TRY_STATEMENT("_fe_AiParamGetDefault")

  AtParamEntry* f2aPentry = NULL;
  if(!KLAtParamEntry_to_CPAtParamEntry(pentry, f2aPentry)){
    setError("Error in _fe_AiParamGetDefault. unable to convert: pentry");
    return;
  }
  const AtParamValue * f2a_result = AiParamGetDefault(f2aPentry);
  AtParamValue_to_KLParamValue(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiParamGetDefault")
}

FABRIC_EXT_EXPORT void _fe_AiParamGetEnum(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::String > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamEntry >::INParam pentry
)
{
  F2A_TRY_STATEMENT("_fe_AiParamGetEnum")

  AtParamEntry* f2aPentry = NULL;
  if(!KLAtParamEntry_to_CPAtParamEntry(pentry, f2aPentry)){
    setError("Error in _fe_AiParamGetEnum. unable to convert: pentry");
    return;
  }
  AtEnum f2a_result = AiParamGetEnum(f2aPentry);
  AtEnum_to_StringArr(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiParamGetEnum")
}

FABRIC_EXT_EXPORT void _fe_AiParamGetTypeName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam type
)
{
  F2A_TRY_STATEMENT("_fe_AiParamGetTypeName")

  AtByte f2aType;
  if(!UInt8_to_AtByte(type, f2aType)){
    setError("Error in _fe_AiParamGetTypeName. unable to convert: type");
    return;
  }
  const char * f2a_result = AiParamGetTypeName(f2aType);
  char_to_String(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiParamGetTypeName")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiParamGetTypeSize(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam type
)
{
  F2A_TRY_STATEMENT("_fe_AiParamGetTypeSize")

  AtByte f2aType;
  if(!UInt8_to_AtByte(type, f2aType)){
    setError("Error in _fe_AiParamGetTypeSize. unable to convert: type");
    return 0;
  }
  AI_CONST int f2a_result = AiParamGetTypeSize(f2aType);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiParamGetTypeSize", )
}

FABRIC_EXT_EXPORT void _fe_AiUserParamGetName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamEntry >::INParam upentry
)
{
  F2A_TRY_STATEMENT("_fe_AiUserParamGetName")

  AtUserParamEntry* f2aUpentry = NULL;
  if(!KLAtUserParamEntry_to_CPAtUserParamEntry(upentry, f2aUpentry)){
    setError("Error in _fe_AiUserParamGetName. unable to convert: upentry");
    return;
  }
  const char * f2a_result = AiUserParamGetName(f2aUpentry);
  char_to_String(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiUserParamGetName")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiUserParamGetType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamEntry >::INParam upentry
)
{
  F2A_TRY_STATEMENT("_fe_AiUserParamGetType")

  AtUserParamEntry* f2aUpentry = NULL;
  if(!KLAtUserParamEntry_to_CPAtUserParamEntry(upentry, f2aUpentry)){
    setError("Error in _fe_AiUserParamGetType. unable to convert: upentry");
    return 0;
  }
  int f2a_result = AiUserParamGetType(f2aUpentry);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiUserParamGetType", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiUserParamGetArrayType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamEntry >::INParam upentry
)
{
  F2A_TRY_STATEMENT("_fe_AiUserParamGetArrayType")

  AtUserParamEntry* f2aUpentry = NULL;
  if(!KLAtUserParamEntry_to_CPAtUserParamEntry(upentry, f2aUpentry)){
    setError("Error in _fe_AiUserParamGetArrayType. unable to convert: upentry");
    return 0;
  }
  int f2a_result = AiUserParamGetArrayType(f2aUpentry);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiUserParamGetArrayType", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiUserParamGetCategory(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamEntry >::INParam upentry
)
{
  F2A_TRY_STATEMENT("_fe_AiUserParamGetCategory")

  AtUserParamEntry* f2aUpentry = NULL;
  if(!KLAtUserParamEntry_to_CPAtUserParamEntry(upentry, f2aUpentry)){
    setError("Error in _fe_AiUserParamGetCategory. unable to convert: upentry");
    return 0;
  }
  int f2a_result = AiUserParamGetCategory(f2aUpentry);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiUserParamGetCategory", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiUserParamGetIndex(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamEntry >::INParam upentry
)
{
  F2A_TRY_STATEMENT("_fe_AiUserParamGetIndex")

  AtUserParamEntry* f2aUpentry = NULL;
  if(!KLAtUserParamEntry_to_CPAtUserParamEntry(upentry, f2aUpentry)){
    setError("Error in _fe_AiUserParamGetIndex. unable to convert: upentry");
    return 0;
  }
  AI_CONST int f2a_result = AiUserParamGetIndex(f2aUpentry);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiUserParamGetIndex", )
}

FABRIC_EXT_EXPORT void _fe_AiNodeParamByte(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtList >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamByte")

  AtList* f2aParams = NULL;
  if(!KLAtList_to_CPAtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamByte. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamByte. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamByte. unable to convert: pname");
    return;
  }
  AtByte f2aPdefault;
  if(!UInt8_to_AtByte(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamByte. unable to convert: pdefault");
    return;
  }
  AiNodeParamByte(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);
  CPAtList_to_KLAtList(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamByte")
}

FABRIC_EXT_EXPORT void _fe_AiNodeParamInt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtList >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamInt")

  AtList* f2aParams = NULL;
  if(!KLAtList_to_CPAtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamInt. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamInt. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamInt. unable to convert: pname");
    return;
  }
  int f2aPdefault;
  if(!SInt32_to_int(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamInt. unable to convert: pdefault");
    return;
  }
  AiNodeParamInt(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);
  CPAtList_to_KLAtList(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamInt")
}

FABRIC_EXT_EXPORT void _fe_AiNodeParamUInt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtList >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamUInt")

  AtList* f2aParams = NULL;
  if(!KLAtList_to_CPAtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamUInt. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamUInt. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamUInt. unable to convert: pname");
    return;
  }
  unsigned int f2aPdefault;
  if(!UInt32_to_unsigned_int(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamUInt. unable to convert: pdefault");
    return;
  }
  AiNodeParamUInt(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);
  CPAtList_to_KLAtList(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamUInt")
}

FABRIC_EXT_EXPORT void _fe_AiNodeParamBool(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtList >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamBool")

  AtList* f2aParams = NULL;
  if(!KLAtList_to_CPAtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamBool. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamBool. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamBool. unable to convert: pname");
    return;
  }
  bool f2aPdefault;
  if(!Boolean_to_bool(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamBool. unable to convert: pdefault");
    return;
  }
  AiNodeParamBool(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);
  CPAtList_to_KLAtList(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamBool")
}

FABRIC_EXT_EXPORT void _fe_AiNodeParamFlt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtList >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamFlt")

  AtList* f2aParams = NULL;
  if(!KLAtList_to_CPAtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamFlt. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamFlt. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamFlt. unable to convert: pname");
    return;
  }
  float f2aPdefault;
  if(!Float32_to_float(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamFlt. unable to convert: pdefault");
    return;
  }
  AiNodeParamFlt(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);
  CPAtList_to_KLAtList(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamFlt")
}

FABRIC_EXT_EXPORT void _fe_AiNodeParamRGB(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtList >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam r,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam g,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam b
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamRGB")

  AtList* f2aParams = NULL;
  if(!KLAtList_to_CPAtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamRGB. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamRGB. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamRGB. unable to convert: pname");
    return;
  }
  float f2aR;
  if(!Float32_to_float(r, f2aR)){
    setError("Error in _fe_AiNodeParamRGB. unable to convert: r");
    return;
  }
  float f2aG;
  if(!Float32_to_float(g, f2aG)){
    setError("Error in _fe_AiNodeParamRGB. unable to convert: g");
    return;
  }
  float f2aB;
  if(!Float32_to_float(b, f2aB)){
    setError("Error in _fe_AiNodeParamRGB. unable to convert: b");
    return;
  }
  AiNodeParamRGB(f2aParams, f2aVaroffset, f2aPname, f2aR, f2aG, f2aB);
  CPAtList_to_KLAtList(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamRGB")
}

FABRIC_EXT_EXPORT void _fe_AiNodeParamRGBA(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtList >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam r,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam g,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam b,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam a
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamRGBA")

  AtList* f2aParams = NULL;
  if(!KLAtList_to_CPAtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamRGBA. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamRGBA. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamRGBA. unable to convert: pname");
    return;
  }
  float f2aR;
  if(!Float32_to_float(r, f2aR)){
    setError("Error in _fe_AiNodeParamRGBA. unable to convert: r");
    return;
  }
  float f2aG;
  if(!Float32_to_float(g, f2aG)){
    setError("Error in _fe_AiNodeParamRGBA. unable to convert: g");
    return;
  }
  float f2aB;
  if(!Float32_to_float(b, f2aB)){
    setError("Error in _fe_AiNodeParamRGBA. unable to convert: b");
    return;
  }
  float f2aA;
  if(!Float32_to_float(a, f2aA)){
    setError("Error in _fe_AiNodeParamRGBA. unable to convert: a");
    return;
  }
  AiNodeParamRGBA(f2aParams, f2aVaroffset, f2aPname, f2aR, f2aG, f2aB, f2aA);
  CPAtList_to_KLAtList(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamRGBA")
}

FABRIC_EXT_EXPORT void _fe_AiNodeParamVec(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtList >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam x,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam y,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam z
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamVec")

  AtList* f2aParams = NULL;
  if(!KLAtList_to_CPAtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamVec. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamVec. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamVec. unable to convert: pname");
    return;
  }
  float f2aX;
  if(!Float32_to_float(x, f2aX)){
    setError("Error in _fe_AiNodeParamVec. unable to convert: x");
    return;
  }
  float f2aY;
  if(!Float32_to_float(y, f2aY)){
    setError("Error in _fe_AiNodeParamVec. unable to convert: y");
    return;
  }
  float f2aZ;
  if(!Float32_to_float(z, f2aZ)){
    setError("Error in _fe_AiNodeParamVec. unable to convert: z");
    return;
  }
  AiNodeParamVec(f2aParams, f2aVaroffset, f2aPname, f2aX, f2aY, f2aZ);
  CPAtList_to_KLAtList(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamVec")
}

FABRIC_EXT_EXPORT void _fe_AiNodeParamPnt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtList >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam x,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam y,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam z
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamPnt")

  AtList* f2aParams = NULL;
  if(!KLAtList_to_CPAtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamPnt. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamPnt. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamPnt. unable to convert: pname");
    return;
  }
  float f2aX;
  if(!Float32_to_float(x, f2aX)){
    setError("Error in _fe_AiNodeParamPnt. unable to convert: x");
    return;
  }
  float f2aY;
  if(!Float32_to_float(y, f2aY)){
    setError("Error in _fe_AiNodeParamPnt. unable to convert: y");
    return;
  }
  float f2aZ;
  if(!Float32_to_float(z, f2aZ)){
    setError("Error in _fe_AiNodeParamPnt. unable to convert: z");
    return;
  }
  AiNodeParamPnt(f2aParams, f2aVaroffset, f2aPname, f2aX, f2aY, f2aZ);
  CPAtList_to_KLAtList(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamPnt")
}

FABRIC_EXT_EXPORT void _fe_AiNodeParamPnt2(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtList >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam x,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam y
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamPnt2")

  AtList* f2aParams = NULL;
  if(!KLAtList_to_CPAtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamPnt2. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamPnt2. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamPnt2. unable to convert: pname");
    return;
  }
  float f2aX;
  if(!Float32_to_float(x, f2aX)){
    setError("Error in _fe_AiNodeParamPnt2. unable to convert: x");
    return;
  }
  float f2aY;
  if(!Float32_to_float(y, f2aY)){
    setError("Error in _fe_AiNodeParamPnt2. unable to convert: y");
    return;
  }
  AiNodeParamPnt2(f2aParams, f2aVaroffset, f2aPname, f2aX, f2aY);
  CPAtList_to_KLAtList(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamPnt2")
}

FABRIC_EXT_EXPORT void _fe_AiNodeParamStr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtList >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamStr")

  AtList* f2aParams = NULL;
  if(!KLAtList_to_CPAtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamStr. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamStr. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamStr. unable to convert: pname");
    return;
  }
  char* f2aPdefault = NULL;
  if(!String_to_char(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamStr. unable to convert: pdefault");
    return;
  }
  AiNodeParamStr(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);
  CPAtList_to_KLAtList(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamStr")
}

FABRIC_EXT_EXPORT void _fe_AiNodeParamPtr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtList >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamPtr")

  AtList* f2aParams = NULL;
  if(!KLAtList_to_CPAtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamPtr. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamPtr. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamPtr. unable to convert: pname");
    return;
  }
  void* f2aPdefault = NULL;
  if(!Data_to_void(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamPtr. unable to convert: pdefault");
    return;
  }
  AiNodeParamPtr(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);
  CPAtList_to_KLAtList(f2aParams, params);
  void_to_Data(f2aPdefault, pdefault);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamPtr")
}

FABRIC_EXT_EXPORT void _fe_AiNodeParamNode(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtList >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamNode")

  AtList* f2aParams = NULL;
  if(!KLAtList_to_CPAtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamNode. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamNode. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamNode. unable to convert: pname");
    return;
  }
  AtNode* f2aPdefault = NULL;
  if(!KLAtNode_to_CPAtNode(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamNode. unable to convert: pdefault");
    return;
  }
  AiNodeParamNode(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);
  CPAtList_to_KLAtList(f2aParams, params);
  CPAtNode_to_KLAtNode(f2aPdefault, pdefault);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamNode")
}

FABRIC_EXT_EXPORT void _fe_AiNodeParamArray(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtList >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam pdefault
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamArray")

  AtList* f2aParams = NULL;
  if(!KLAtList_to_CPAtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamArray. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamArray. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamArray. unable to convert: pname");
    return;
  }
  AtArray* f2aPdefault = NULL;
  if(!KlArray_to_AtArray(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamArray. unable to convert: pdefault");
    return;
  }
  AiNodeParamArray(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);
  CPAtList_to_KLAtList(f2aParams, params);
  AtArray_to_KLArray(f2aPdefault, pdefault);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamArray")
}

FABRIC_EXT_EXPORT void _fe_AiNodeParamMtx(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtList >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat44 >::INParam matrix
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamMtx")

  AtList* f2aParams = NULL;
  if(!KLAtList_to_CPAtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamMtx. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamMtx. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamMtx. unable to convert: pname");
    return;
  }
  AtMatrix f2aMatrix;
  if(!Mat44_to_AtMatrix(matrix, f2aMatrix)){
    setError("Error in _fe_AiNodeParamMtx. unable to convert: matrix");
    return;
  }
  AiNodeParamMtx(f2aParams, f2aVaroffset, f2aPname, f2aMatrix);
  CPAtList_to_KLAtList(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamMtx")
}

FABRIC_EXT_EXPORT void _fe_AiNodeParamEnum(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtList >::IOParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam varoffset,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam pname,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pdefault,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::String > >::INParam enum_type
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeParamEnum")

  AtList* f2aParams = NULL;
  if(!KLAtList_to_CPAtList(params, f2aParams)){
    setError("Error in _fe_AiNodeParamEnum. unable to convert: params");
    return;
  }
  int f2aVaroffset;
  if(!SInt32_to_int(varoffset, f2aVaroffset)){
    setError("Error in _fe_AiNodeParamEnum. unable to convert: varoffset");
    return;
  }
  char* f2aPname = NULL;
  if(!String_to_char(pname, f2aPname)){
    setError("Error in _fe_AiNodeParamEnum. unable to convert: pname");
    return;
  }
  int f2aPdefault;
  if(!SInt32_to_int(pdefault, f2aPdefault)){
    setError("Error in _fe_AiNodeParamEnum. unable to convert: pdefault");
    return;
  }
  AtEnum f2aEnum_type;
  if(!StringArr_to_AtEnum(enum_type, f2aEnum_type)){
    setError("Error in _fe_AiNodeParamEnum. unable to convert: enum_type");
    return;
  }
  AiNodeParamEnum(f2aParams, f2aVaroffset, f2aPname, f2aPdefault, f2aEnum_type);
  CPAtList_to_KLAtList(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiNodeParamEnum")
}

FABRIC_EXT_EXPORT void _fe_AiArrayGetMtxFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat44 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetMtxFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetMtxFunc. unable to convert: a");
    return;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArrayGetMtxFunc. unable to convert: i");
    return;
  }
  AtMatrix mtx;
  AiArrayGetMtx(f2aA, f2aI, mtx);
  AtMatrix_to_Mat44(mtx, _result);

  F2A_CATCH_STATEMENT("_fe_AiArrayGetMtxFunc")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetBoolArr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::Boolean > >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetBoolArr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetBoolArr. unable to convert: a");
    return 0;
  }
  uint32_t size = val.size();
  if(size == 0) return true;
  if (size < f2aA->nelements) return false;
  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));
  bool _result = true;
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetBoolArr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetByteArr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::UInt8 > >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetByteArr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetByteArr. unable to convert: a");
    return 0;
  }
  uint32_t size = val.size();
  if(size == 0) return true;
  if (size < f2aA->nelements) return false;
  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));
  bool _result = true;
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetByteArr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetIntArr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::SInt32 > >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetIntArr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetIntArr. unable to convert: a");
    return 0;
  }
  uint32_t size = val.size();
  if(size == 0) return true;
  if (size < f2aA->nelements) return false;
  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));
  bool _result = true;
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetIntArr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetUIntArr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::UInt32 > >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetUIntArr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetUIntArr. unable to convert: a");
    return 0;
  }
  uint32_t size = val.size();
  if(size == 0) return true;
  if (size < f2aA->nelements) return false;
  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));
  bool _result = true;
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetUIntArr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetFltArr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::Float32 > >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetFltArr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetFltArr. unable to convert: a");
    return 0;
  }
  uint32_t size = val.size();
  if(size == 0) return true;
  if (size < f2aA->nelements) return false;
  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));
  bool _result = true;
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetFltArr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetRGBAArr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::Color > >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetRGBAArr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetRGBAArr. unable to convert: a");
    return 0;
  }
  uint32_t size = val.size();
  if(size == 0) return true;
  if (size < f2aA->nelements) return false;
  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));
  bool _result = true;
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetRGBAArr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetPntArr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::Vec3 > >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetPntArr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetPntArr. unable to convert: a");
    return 0;
  }
  uint32_t size = val.size();
  if(size == 0) return true;
  if (size < f2aA->nelements) return false;
  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));
  bool _result = true;
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetPntArr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetPnt2Arr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::Vec2 > >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetPnt2Arr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetPnt2Arr. unable to convert: a");
    return 0;
  }
  uint32_t size = val.size();
  if(size == 0) return true;
  if (size < f2aA->nelements) return false;
  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));
  bool _result = true;
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetPnt2Arr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetVecArr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::Vec3 > >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetVecArr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetVecArr. unable to convert: a");
    return 0;
  }
  uint32_t size = val.size();
  if(size == 0) return true;
  if (size < f2aA->nelements) return false;
  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));
  bool _result = true;
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetVecArr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArrayGetBoolArr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Boolean > >::IOParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetBoolArr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetBoolArr. unable to convert: a");
    return 0;
  }
  static_assert(sizeof(Fabric::EDK::KL::Boolean) == sizeof(bool), "Mismatched Size");
  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Boolean > arr(reinterpret_cast<Fabric::EDK::KL::Boolean*>(f2aA->data), f2aA->nelements);
  val = arr;
  bool _result = true;  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArrayGetBoolArr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArrayGetByteArr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::UInt8 > >::IOParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetByteArr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetByteArr. unable to convert: a");
    return 0;
  }
  static_assert(sizeof(Fabric::EDK::KL::UInt8) == sizeof(AtByte), "Mismatched Size");
  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::UInt8 > arr(reinterpret_cast<Fabric::EDK::KL::UInt8*>(f2aA->data), f2aA->nelements);
  val = arr;
  bool _result = true;  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArrayGetByteArr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArrayGetIntArr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::IOParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetIntArr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetIntArr. unable to convert: a");
    return 0;
  }
  static_assert(sizeof(Fabric::EDK::KL::SInt32) == sizeof(int), "Mismatched Size");
  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > arr(reinterpret_cast<Fabric::EDK::KL::SInt32*>(f2aA->data), f2aA->nelements);
  val = arr;
  bool _result = true;  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArrayGetIntArr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArrayGetUIntArr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::UInt32 > >::IOParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetUIntArr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetUIntArr. unable to convert: a");
    return 0;
  }
  static_assert(sizeof(Fabric::EDK::KL::UInt32) == sizeof(unsigned int), "Mismatched Size");
  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::UInt32 > arr(reinterpret_cast<Fabric::EDK::KL::UInt32*>(f2aA->data), f2aA->nelements);
  val = arr;
  bool _result = true;  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArrayGetUIntArr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArrayGetFltArr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::IOParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetFltArr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetFltArr. unable to convert: a");
    return 0;
  }
  static_assert(sizeof(Fabric::EDK::KL::Float32) == sizeof(float), "Mismatched Size");
  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > arr(reinterpret_cast<Fabric::EDK::KL::Float32*>(f2aA->data), f2aA->nelements);
  val = arr;
  bool _result = true;  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArrayGetFltArr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArrayGetRGBAArr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Color > >::IOParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetRGBAArr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetRGBAArr. unable to convert: a");
    return 0;
  }
  static_assert(sizeof(Fabric::EDK::KL::Color) == sizeof(AtRGBA), "Mismatched Size");
  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Color > arr(reinterpret_cast<Fabric::EDK::KL::Color*>(f2aA->data), f2aA->nelements);
  val = arr;
  bool _result = true;  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArrayGetRGBAArr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArrayGetPntArr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::IOParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetPntArr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetPntArr. unable to convert: a");
    return 0;
  }
  static_assert(sizeof(Fabric::EDK::KL::Vec3) == sizeof(AtPoint), "Mismatched Size");
  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > arr(reinterpret_cast<Fabric::EDK::KL::Vec3*>(f2aA->data), f2aA->nelements);
  val = arr;
  bool _result = true;  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArrayGetPntArr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArrayGetPnt2Arr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec2 > >::IOParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetPnt2Arr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetPnt2Arr. unable to convert: a");
    return 0;
  }
  static_assert(sizeof(Fabric::EDK::KL::Vec2) == sizeof(AtPoint2), "Mismatched Size");
  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec2 > arr(reinterpret_cast<Fabric::EDK::KL::Vec2*>(f2aA->data), f2aA->nelements);
  val = arr;
  bool _result = true;  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArrayGetPnt2Arr", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArrayGetVecArr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::IOParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetVecArr")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetVecArr. unable to convert: a");
    return 0;
  }
  static_assert(sizeof(Fabric::EDK::KL::Vec3) == sizeof(AtVector), "Mismatched Size");
  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > arr(reinterpret_cast<Fabric::EDK::KL::Vec3*>(f2aA->data), f2aA->nelements);
  val = arr;
  bool _result = true;  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArrayGetVecArr", )
}

FABRIC_EXT_EXPORT void _fe_AiArray(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam nelements,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam nkeys,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam type
)
{
  F2A_TRY_STATEMENT("_fe_AiArray")

  unsigned int f2aNelements;
  if(!UInt32_to_unsigned_int(nelements, f2aNelements)){
    setError("Error in _fe_AiArray. unable to convert: nelements");
    return;
  }
  AtByte f2aNkeys;
  if(!UInt8_to_AtByte(nkeys, f2aNkeys)){
    setError("Error in _fe_AiArray. unable to convert: nkeys");
    return;
  }
  AtByte f2aType;
  if(!UInt8_to_AtByte(type, f2aType)){
    setError("Error in _fe_AiArray. unable to convert: type");
    return;
  }
  AtArray * f2a_result = AiArray(f2aNelements, f2aNkeys, f2aType);
  AtArray_to_KLArray(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiArray")
}

FABRIC_EXT_EXPORT void _fe_AiArrayAllocate(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam nelements,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam nkeys,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam type
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayAllocate")

  unsigned int f2aNelements;
  if(!UInt32_to_unsigned_int(nelements, f2aNelements)){
    setError("Error in _fe_AiArrayAllocate. unable to convert: nelements");
    return;
  }
  AtByte f2aNkeys;
  if(!UInt8_to_AtByte(nkeys, f2aNkeys)){
    setError("Error in _fe_AiArrayAllocate. unable to convert: nkeys");
    return;
  }
  AtByte f2aType;
  if(!UInt8_to_AtByte(type, f2aType)){
    setError("Error in _fe_AiArrayAllocate. unable to convert: type");
    return;
  }
  AtArray * f2a_result = AiArrayAllocate(f2aNelements, f2aNkeys, f2aType);
  AtArray_to_KLArray(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiArrayAllocate")
}

FABRIC_EXT_EXPORT void _fe_AiArrayDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam array
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayDestroy")

  AtArray* f2aArray = NULL;
  if(!KlArray_to_AtArray(array, f2aArray)){
    setError("Error in _fe_AiArrayDestroy. unable to convert: array");
    return;
  }
  AiArrayDestroy(f2aArray);
  AtArray_to_KLArray(f2aArray, array);

  F2A_CATCH_STATEMENT("_fe_AiArrayDestroy")
}

FABRIC_EXT_EXPORT void _fe_AiArrayConvert(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam nelements,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam nkeys,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam type,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::INParam data
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayConvert")

  unsigned int f2aNelements;
  if(!UInt32_to_unsigned_int(nelements, f2aNelements)){
    setError("Error in _fe_AiArrayConvert. unable to convert: nelements");
    return;
  }
  AtByte f2aNkeys;
  if(!UInt8_to_AtByte(nkeys, f2aNkeys)){
    setError("Error in _fe_AiArrayConvert. unable to convert: nkeys");
    return;
  }
  AtByte f2aType;
  if(!UInt8_to_AtByte(type, f2aType)){
    setError("Error in _fe_AiArrayConvert. unable to convert: type");
    return;
  }
  void* f2aData = NULL;
  if(!Data_to_void(data, f2aData)){
    setError("Error in _fe_AiArrayConvert. unable to convert: data");
    return;
  }
  AtArray * f2a_result = AiArrayConvert(f2aNelements, f2aNkeys, f2aType, f2aData);
  AtArray_to_KLArray(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiArrayConvert")
}

FABRIC_EXT_EXPORT void _fe_AiArrayModify(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam array,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam nelements,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam nkeys,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam type
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayModify")

  AtArray* f2aArray = NULL;
  if(!KlArray_to_AtArray(array, f2aArray)){
    setError("Error in _fe_AiArrayModify. unable to convert: array");
    return;
  }
  unsigned int f2aNelements;
  if(!UInt32_to_unsigned_int(nelements, f2aNelements)){
    setError("Error in _fe_AiArrayModify. unable to convert: nelements");
    return;
  }
  AtByte f2aNkeys;
  if(!UInt8_to_AtByte(nkeys, f2aNkeys)){
    setError("Error in _fe_AiArrayModify. unable to convert: nkeys");
    return;
  }
  AtByte f2aType;
  if(!UInt8_to_AtByte(type, f2aType)){
    setError("Error in _fe_AiArrayModify. unable to convert: type");
    return;
  }
  AtArray * f2a_result = AiArrayModify(f2aArray, f2aNelements, f2aNkeys, f2aType);
  AtArray_to_KLArray(f2a_result, _result);  AtArray_to_KLArray(f2aArray, array);

  F2A_CATCH_STATEMENT("_fe_AiArrayModify")
}

FABRIC_EXT_EXPORT void _fe_AiArrayCopy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam array
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayCopy")

  AtArray* f2aArray = NULL;
  if(!KlArray_to_AtArray(array, f2aArray)){
    setError("Error in _fe_AiArrayCopy. unable to convert: array");
    return;
  }
  AtArray * f2a_result = AiArrayCopy(f2aArray);
  AtArray_to_KLArray(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiArrayCopy")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetKey(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam array,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam key,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::INParam data
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetKey")

  AtArray* f2aArray = NULL;
  if(!KlArray_to_AtArray(array, f2aArray)){
    setError("Error in _fe_AiArraySetKey. unable to convert: array");
    return 0;
  }
  AtByte f2aKey;
  if(!UInt8_to_AtByte(key, f2aKey)){
    setError("Error in _fe_AiArraySetKey. unable to convert: key");
    return 0;
  }
  void* f2aData = NULL;
  if(!Data_to_void(data, f2aData)){
    setError("Error in _fe_AiArraySetKey. unable to convert: data");
    return 0;
  }
  bool f2a_result = AiArraySetKey(f2aArray, f2aKey, f2aData);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtArray_to_KLArray(f2aArray, array);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetKey", )
}

FABRIC_EXT_EXPORT void _fe_AiArrayInterpolatePnt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam array,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam time,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam idx
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayInterpolatePnt")

  AtArray* f2aArray = NULL;
  if(!KlArray_to_AtArray(array, f2aArray)){
    setError("Error in _fe_AiArrayInterpolatePnt. unable to convert: array");
    return;
  }
  float f2aTime;
  if(!Float32_to_float(time, f2aTime)){
    setError("Error in _fe_AiArrayInterpolatePnt. unable to convert: time");
    return;
  }
  unsigned int f2aIdx;
  if(!UInt32_to_unsigned_int(idx, f2aIdx)){
    setError("Error in _fe_AiArrayInterpolatePnt. unable to convert: idx");
    return;
  }
  AtPoint f2a_result = AiArrayInterpolatePnt(f2aArray, f2aTime, f2aIdx);
  AtPoint_to_Vec3(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiArrayInterpolatePnt")
}

FABRIC_EXT_EXPORT void _fe_AiArrayInterpolateVec(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam array,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam time,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam idx
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayInterpolateVec")

  AtArray* f2aArray = NULL;
  if(!KlArray_to_AtArray(array, f2aArray)){
    setError("Error in _fe_AiArrayInterpolateVec. unable to convert: array");
    return;
  }
  float f2aTime;
  if(!Float32_to_float(time, f2aTime)){
    setError("Error in _fe_AiArrayInterpolateVec. unable to convert: time");
    return;
  }
  unsigned int f2aIdx;
  if(!UInt32_to_unsigned_int(idx, f2aIdx)){
    setError("Error in _fe_AiArrayInterpolateVec. unable to convert: idx");
    return;
  }
  AtVector f2a_result = AiArrayInterpolateVec(f2aArray, f2aTime, f2aIdx);
  AtPoint_to_Vec3(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiArrayInterpolateVec")
}

FABRIC_EXT_EXPORT void _fe_AiArrayInterpolateRGB(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam array,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam time,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam idx
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayInterpolateRGB")

  AtArray* f2aArray = NULL;
  if(!KlArray_to_AtArray(array, f2aArray)){
    setError("Error in _fe_AiArrayInterpolateRGB. unable to convert: array");
    return;
  }
  float f2aTime;
  if(!Float32_to_float(time, f2aTime)){
    setError("Error in _fe_AiArrayInterpolateRGB. unable to convert: time");
    return;
  }
  unsigned int f2aIdx;
  if(!UInt32_to_unsigned_int(idx, f2aIdx)){
    setError("Error in _fe_AiArrayInterpolateRGB. unable to convert: idx");
    return;
  }
  AtColor f2a_result = AiArrayInterpolateRGB(f2aArray, f2aTime, f2aIdx);
  CPAtColor_to_KLColor(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiArrayInterpolateRGB")
}

FABRIC_EXT_EXPORT void _fe_AiArrayInterpolateRGBA(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam array,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam time,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam idx
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayInterpolateRGBA")

  AtArray* f2aArray = NULL;
  if(!KlArray_to_AtArray(array, f2aArray)){
    setError("Error in _fe_AiArrayInterpolateRGBA. unable to convert: array");
    return;
  }
  float f2aTime;
  if(!Float32_to_float(time, f2aTime)){
    setError("Error in _fe_AiArrayInterpolateRGBA. unable to convert: time");
    return;
  }
  unsigned int f2aIdx;
  if(!UInt32_to_unsigned_int(idx, f2aIdx)){
    setError("Error in _fe_AiArrayInterpolateRGBA. unable to convert: idx");
    return;
  }
  AtRGBA f2a_result = AiArrayInterpolateRGBA(f2aArray, f2aTime, f2aIdx);
  CPAtRGBA_to_KLColor(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiArrayInterpolateRGBA")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Float32 _fe_AiArrayInterpolateFlt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam array,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam time,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam idx
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayInterpolateFlt")

  AtArray* f2aArray = NULL;
  if(!KlArray_to_AtArray(array, f2aArray)){
    setError("Error in _fe_AiArrayInterpolateFlt. unable to convert: array");
    return 0;
  }
  float f2aTime;
  if(!Float32_to_float(time, f2aTime)){
    setError("Error in _fe_AiArrayInterpolateFlt. unable to convert: time");
    return 0;
  }
  unsigned int f2aIdx;
  if(!UInt32_to_unsigned_int(idx, f2aIdx)){
    setError("Error in _fe_AiArrayInterpolateFlt. unable to convert: idx");
    return 0;
  }
  float f2a_result = AiArrayInterpolateFlt(f2aArray, f2aTime, f2aIdx);
  Fabric::EDK::KL::Float32 _result;
  float_to_Float32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArrayInterpolateFlt", )
}

FABRIC_EXT_EXPORT void _fe_AiArrayInterpolateMtx(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam array,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam time,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam idx,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat44 >::INParam result
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayInterpolateMtx")

  AtArray* f2aArray = NULL;
  if(!KlArray_to_AtArray(array, f2aArray)){
    setError("Error in _fe_AiArrayInterpolateMtx. unable to convert: array");
    return;
  }
  float f2aTime;
  if(!Float32_to_float(time, f2aTime)){
    setError("Error in _fe_AiArrayInterpolateMtx. unable to convert: time");
    return;
  }
  unsigned int f2aIdx;
  if(!UInt32_to_unsigned_int(idx, f2aIdx)){
    setError("Error in _fe_AiArrayInterpolateMtx. unable to convert: idx");
    return;
  }
  AtMatrix f2aResult;
  if(!Mat44_to_AtMatrix(result, f2aResult)){
    setError("Error in _fe_AiArrayInterpolateMtx. unable to convert: result");
    return;
  }
  AiArrayInterpolateMtx(f2aArray, f2aTime, f2aIdx, f2aResult);

  F2A_CATCH_STATEMENT("_fe_AiArrayInterpolateMtx")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArrayGetBoolFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetBoolFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetBoolFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArrayGetBoolFunc. unable to convert: i");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArrayGetBoolFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArrayGetBoolFunc. unable to convert: line");
    return 0;
  }
  bool f2a_result = AiArrayGetBoolFunc(f2aA, f2aI, f2a_val, f2aLine);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArrayGetBoolFunc", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt8 _fe_AiArrayGetByteFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetByteFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetByteFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArrayGetByteFunc. unable to convert: i");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArrayGetByteFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArrayGetByteFunc. unable to convert: line");
    return 0;
  }
  AtByte f2a_result = AiArrayGetByteFunc(f2aA, f2aI, f2a_val, f2aLine);
  Fabric::EDK::KL::UInt8 _result;
  AtByte_to_UInt8(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArrayGetByteFunc", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiArrayGetIntFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetIntFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetIntFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArrayGetIntFunc. unable to convert: i");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArrayGetIntFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArrayGetIntFunc. unable to convert: line");
    return 0;
  }
  int f2a_result = AiArrayGetIntFunc(f2aA, f2aI, f2a_val, f2aLine);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArrayGetIntFunc", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 _fe_AiArrayGetUIntFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetUIntFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetUIntFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArrayGetUIntFunc. unable to convert: i");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArrayGetUIntFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArrayGetUIntFunc. unable to convert: line");
    return 0;
  }
  AtUInt32 f2a_result = AiArrayGetUIntFunc(f2aA, f2aI, f2a_val, f2aLine);
  Fabric::EDK::KL::UInt32 _result;
  unsigned_int_to_UInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArrayGetUIntFunc", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Float32 _fe_AiArrayGetFltFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetFltFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetFltFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArrayGetFltFunc. unable to convert: i");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArrayGetFltFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArrayGetFltFunc. unable to convert: line");
    return 0;
  }
  float f2a_result = AiArrayGetFltFunc(f2aA, f2aI, f2a_val, f2aLine);
  Fabric::EDK::KL::Float32 _result;
  float_to_Float32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArrayGetFltFunc", )
}

FABRIC_EXT_EXPORT void _fe_AiArrayGetRGBFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetRGBFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetRGBFunc. unable to convert: a");
    return;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArrayGetRGBFunc. unable to convert: i");
    return;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArrayGetRGBFunc. unable to convert: _val");
    return;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArrayGetRGBFunc. unable to convert: line");
    return;
  }
  AtRGB f2a_result = AiArrayGetRGBFunc(f2aA, f2aI, f2a_val, f2aLine);
  AtRGB_to_Color(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiArrayGetRGBFunc")
}

FABRIC_EXT_EXPORT void _fe_AiArrayGetRGBAFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetRGBAFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetRGBAFunc. unable to convert: a");
    return;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArrayGetRGBAFunc. unable to convert: i");
    return;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArrayGetRGBAFunc. unable to convert: _val");
    return;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArrayGetRGBAFunc. unable to convert: line");
    return;
  }
  AtRGBA f2a_result = AiArrayGetRGBAFunc(f2aA, f2aI, f2a_val, f2aLine);
  CPAtRGBA_to_KLColor(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiArrayGetRGBAFunc")
}

FABRIC_EXT_EXPORT void _fe_AiArrayGetPntFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetPntFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetPntFunc. unable to convert: a");
    return;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArrayGetPntFunc. unable to convert: i");
    return;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArrayGetPntFunc. unable to convert: _val");
    return;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArrayGetPntFunc. unable to convert: line");
    return;
  }
  AtPoint f2a_result = AiArrayGetPntFunc(f2aA, f2aI, f2a_val, f2aLine);
  AtPoint_to_Vec3(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiArrayGetPntFunc")
}

FABRIC_EXT_EXPORT void _fe_AiArrayGetPnt2Func(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec2 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetPnt2Func")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetPnt2Func. unable to convert: a");
    return;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArrayGetPnt2Func. unable to convert: i");
    return;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArrayGetPnt2Func. unable to convert: _val");
    return;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArrayGetPnt2Func. unable to convert: line");
    return;
  }
  AtPoint2 f2a_result = AiArrayGetPnt2Func(f2aA, f2aI, f2a_val, f2aLine);
  AtPoint2_to_Vec2(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiArrayGetPnt2Func")
}

FABRIC_EXT_EXPORT void _fe_AiArrayGetVecFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetVecFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetVecFunc. unable to convert: a");
    return;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArrayGetVecFunc. unable to convert: i");
    return;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArrayGetVecFunc. unable to convert: _val");
    return;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArrayGetVecFunc. unable to convert: line");
    return;
  }
  AtVector f2a_result = AiArrayGetVecFunc(f2aA, f2aI, f2a_val, f2aLine);
  AtPoint_to_Vec3(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiArrayGetVecFunc")
}

FABRIC_EXT_EXPORT void _fe_AiArrayGetStrFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetStrFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetStrFunc. unable to convert: a");
    return;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArrayGetStrFunc. unable to convert: i");
    return;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArrayGetStrFunc. unable to convert: _val");
    return;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArrayGetStrFunc. unable to convert: line");
    return;
  }
  const char * f2a_result = AiArrayGetStrFunc(f2aA, f2aI, f2a_val, f2aLine);
  char_to_String(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiArrayGetStrFunc")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Data _fe_AiArrayGetPtrFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetPtrFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetPtrFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArrayGetPtrFunc. unable to convert: i");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArrayGetPtrFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArrayGetPtrFunc. unable to convert: line");
    return 0;
  }
  void * f2a_result = AiArrayGetPtrFunc(f2aA, f2aI, f2a_val, f2aLine);
  Fabric::EDK::KL::Data _result;
  void_to_Data(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArrayGetPtrFunc", )
}

FABRIC_EXT_EXPORT void _fe_AiArrayGetArrayFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArrayGetArrayFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArrayGetArrayFunc. unable to convert: a");
    return;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArrayGetArrayFunc. unable to convert: i");
    return;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArrayGetArrayFunc. unable to convert: _val");
    return;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArrayGetArrayFunc. unable to convert: line");
    return;
  }
  AtArray * f2a_result = AiArrayGetArrayFunc(f2aA, f2aI, f2a_val, f2aLine);
  AtArray_to_KLArray(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiArrayGetArrayFunc")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetBoolFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetBoolFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetBoolFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArraySetBoolFunc. unable to convert: i");
    return 0;
  }
  bool f2aVal;
  if(!Boolean_to_bool(val, f2aVal)){
    setError("Error in _fe_AiArraySetBoolFunc. unable to convert: val");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArraySetBoolFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArraySetBoolFunc. unable to convert: line");
    return 0;
  }
  bool f2a_result = AiArraySetBoolFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetBoolFunc", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetByteFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetByteFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetByteFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArraySetByteFunc. unable to convert: i");
    return 0;
  }
  AtByte f2aVal;
  if(!UInt8_to_AtByte(val, f2aVal)){
    setError("Error in _fe_AiArraySetByteFunc. unable to convert: val");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArraySetByteFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArraySetByteFunc. unable to convert: line");
    return 0;
  }
  bool f2a_result = AiArraySetByteFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetByteFunc", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetIntFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetIntFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetIntFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArraySetIntFunc. unable to convert: i");
    return 0;
  }
  int f2aVal;
  if(!SInt32_to_int(val, f2aVal)){
    setError("Error in _fe_AiArraySetIntFunc. unable to convert: val");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArraySetIntFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArraySetIntFunc. unable to convert: line");
    return 0;
  }
  bool f2a_result = AiArraySetIntFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetIntFunc", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetUIntFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetUIntFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetUIntFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArraySetUIntFunc. unable to convert: i");
    return 0;
  }
  unsigned int f2aVal;
  if(!UInt32_to_unsigned_int(val, f2aVal)){
    setError("Error in _fe_AiArraySetUIntFunc. unable to convert: val");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArraySetUIntFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArraySetUIntFunc. unable to convert: line");
    return 0;
  }
  bool f2a_result = AiArraySetUIntFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetUIntFunc", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetFltFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetFltFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetFltFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArraySetFltFunc. unable to convert: i");
    return 0;
  }
  float f2aVal;
  if(!Float32_to_float(val, f2aVal)){
    setError("Error in _fe_AiArraySetFltFunc. unable to convert: val");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArraySetFltFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArraySetFltFunc. unable to convert: line");
    return 0;
  }
  bool f2a_result = AiArraySetFltFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetFltFunc", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetRGBFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::INParam val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetRGBFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetRGBFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArraySetRGBFunc. unable to convert: i");
    return 0;
  }
  AtRGB f2aVal;
  if(!Color_to_AtRGB(val, f2aVal)){
    setError("Error in _fe_AiArraySetRGBFunc. unable to convert: val");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArraySetRGBFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArraySetRGBFunc. unable to convert: line");
    return 0;
  }
  bool f2a_result = AiArraySetRGBFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetRGBFunc", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetRGBAFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::INParam val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetRGBAFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetRGBAFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArraySetRGBAFunc. unable to convert: i");
    return 0;
  }
  AtRGBA f2aVal;
  if(!KLColor_to_CPAtRGBA(val, f2aVal)){
    setError("Error in _fe_AiArraySetRGBAFunc. unable to convert: val");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArraySetRGBAFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArraySetRGBAFunc. unable to convert: line");
    return 0;
  }
  bool f2a_result = AiArraySetRGBAFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetRGBAFunc", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetPntFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetPntFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetPntFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArraySetPntFunc. unable to convert: i");
    return 0;
  }
  AtPoint f2aVal;
  if(!Vec3_to_AtPoint(val, f2aVal)){
    setError("Error in _fe_AiArraySetPntFunc. unable to convert: val");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArraySetPntFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArraySetPntFunc. unable to convert: line");
    return 0;
  }
  bool f2a_result = AiArraySetPntFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetPntFunc", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetPnt2Func(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec2 >::INParam val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetPnt2Func")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetPnt2Func. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArraySetPnt2Func. unable to convert: i");
    return 0;
  }
  AtPoint2 f2aVal;
  if(!Vec2_to_AtPoint2(val, f2aVal)){
    setError("Error in _fe_AiArraySetPnt2Func. unable to convert: val");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArraySetPnt2Func. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArraySetPnt2Func. unable to convert: line");
    return 0;
  }
  bool f2a_result = AiArraySetPnt2Func(f2aA, f2aI, f2aVal, f2a_val, f2aLine);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetPnt2Func", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetVecFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetVecFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetVecFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArraySetVecFunc. unable to convert: i");
    return 0;
  }
  AtPoint f2aVal;
  if(!Vec3_to_AtPoint(val, f2aVal)){
    setError("Error in _fe_AiArraySetVecFunc. unable to convert: val");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArraySetVecFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArraySetVecFunc. unable to convert: line");
    return 0;
  }
  bool f2a_result = AiArraySetVecFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetVecFunc", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetMtxFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat44 >::INParam val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetMtxFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetMtxFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArraySetMtxFunc. unable to convert: i");
    return 0;
  }
  AtMatrix f2aVal;
  if(!Mat44_to_AtMatrix(val, f2aVal)){
    setError("Error in _fe_AiArraySetMtxFunc. unable to convert: val");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArraySetMtxFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArraySetMtxFunc. unable to convert: line");
    return 0;
  }
  bool f2a_result = AiArraySetMtxFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetMtxFunc", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetStrFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetStrFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetStrFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArraySetStrFunc. unable to convert: i");
    return 0;
  }
  char* f2aVal = NULL;
  if(!String_to_char(val, f2aVal)){
    setError("Error in _fe_AiArraySetStrFunc. unable to convert: val");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArraySetStrFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArraySetStrFunc. unable to convert: line");
    return 0;
  }
  bool f2a_result = AiArraySetStrFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtArray_to_KLArray(f2aA, a);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetStrFunc", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetPtrFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetPtrFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetPtrFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArraySetPtrFunc. unable to convert: i");
    return 0;
  }
  void* f2aVal = NULL;
  if(!Data_to_void(val, f2aVal)){
    setError("Error in _fe_AiArraySetPtrFunc. unable to convert: val");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArraySetPtrFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArraySetPtrFunc. unable to convert: line");
    return 0;
  }
  bool f2a_result = AiArraySetPtrFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtArray_to_KLArray(f2aA, a);
  void_to_Data(f2aVal, val);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetPtrFunc", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiArraySetArrayFunc(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam i,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam _val,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam line
)
{
  F2A_TRY_STATEMENT("_fe_AiArraySetArrayFunc")

  AtArray* f2aA = NULL;
  if(!KlArray_to_AtArray(a, f2aA)){
    setError("Error in _fe_AiArraySetArrayFunc. unable to convert: a");
    return 0;
  }
  unsigned int f2aI;
  if(!UInt32_to_unsigned_int(i, f2aI)){
    setError("Error in _fe_AiArraySetArrayFunc. unable to convert: i");
    return 0;
  }
  AtArray* f2aVal = NULL;
  if(!KlArray_to_AtArray(val, f2aVal)){
    setError("Error in _fe_AiArraySetArrayFunc. unable to convert: val");
    return 0;
  }
  char* f2a_val = NULL;
  if(!String_to_char(_val, f2a_val)){
    setError("Error in _fe_AiArraySetArrayFunc. unable to convert: _val");
    return 0;
  }
  int f2aLine;
  if(!SInt32_to_int(line, f2aLine)){
    setError("Error in _fe_AiArraySetArrayFunc. unable to convert: line");
    return 0;
  }
  bool f2a_result = AiArraySetArrayFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtArray_to_KLArray(f2aA, a);
  AtArray_to_KLArray(f2aVal, val);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiArraySetArrayFunc", )
}

FABRIC_EXT_EXPORT void _fe_AiCameraInitialize(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam data
)
{
  F2A_TRY_STATEMENT("_fe_AiCameraInitialize")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiCameraInitialize. unable to convert: node");
    return;
  }
  void* f2aData = NULL;
  if(!Data_to_void(data, f2aData)){
    setError("Error in _fe_AiCameraInitialize. unable to convert: data");
    return;
  }
  AiCameraInitialize(f2aNode, f2aData);
  CPAtNode_to_KLAtNode(f2aNode, node);
  void_to_Data(f2aData, data);

  F2A_CATCH_STATEMENT("_fe_AiCameraInitialize")
}

FABRIC_EXT_EXPORT void _fe_AiCameraUpdate(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam plane_distance
)
{
  F2A_TRY_STATEMENT("_fe_AiCameraUpdate")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiCameraUpdate. unable to convert: node");
    return;
  }
  bool f2aPlane_distance;
  if(!Boolean_to_bool(plane_distance, f2aPlane_distance)){
    setError("Error in _fe_AiCameraUpdate. unable to convert: plane_distance");
    return;
  }
  AiCameraUpdate(f2aNode, f2aPlane_distance);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiCameraUpdate")
}

FABRIC_EXT_EXPORT void _fe_AiCameraDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiCameraDestroy")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiCameraDestroy. unable to convert: node");
    return;
  }
  AiCameraDestroy(f2aNode);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiCameraDestroy")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Data _fe_AiCameraGetLocalData(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiCameraGetLocalData")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiCameraGetLocalData. unable to convert: node");
    return 0;
  }
  void * f2a_result = AiCameraGetLocalData(f2aNode);
  Fabric::EDK::KL::Data _result;
  void_to_Data(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiCameraGetLocalData", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiASSWrite(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam mask,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam open_procs,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam binary
)
{
  F2A_TRY_STATEMENT("_fe_AiASSWrite")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiASSWrite. unable to convert: filename");
    return 0;
  }
  int f2aMask;
  if(!SInt32_to_int(mask, f2aMask)){
    setError("Error in _fe_AiASSWrite. unable to convert: mask");
    return 0;
  }
  bool f2aOpen_procs;
  if(!Boolean_to_bool(open_procs, f2aOpen_procs)){
    setError("Error in _fe_AiASSWrite. unable to convert: open_procs");
    return 0;
  }
  bool f2aBinary;
  if(!Boolean_to_bool(binary, f2aBinary)){
    setError("Error in _fe_AiASSWrite. unable to convert: binary");
    return 0;
  }
  int f2a_result = AiASSWrite(f2aFilename, f2aMask/*=AI_NODE_ALL*/, f2aOpen_procs/*=false*/, f2aBinary/*=true*/);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiASSWrite", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiASSLoad(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam mask
)
{
  F2A_TRY_STATEMENT("_fe_AiASSLoad")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiASSLoad. unable to convert: filename");
    return 0;
  }
  int f2aMask;
  if(!SInt32_to_int(mask, f2aMask)){
    setError("Error in _fe_AiASSLoad. unable to convert: mask");
    return 0;
  }
  int f2a_result = AiASSLoad(f2aFilename, f2aMask/*=AI_NODE_ALL*/);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiASSLoad", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiEnumGetValue(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::String > >::INParam enum_type,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam string
)
{
  F2A_TRY_STATEMENT("_fe_AiEnumGetValue")

  AtEnum f2aEnum_type;
  if(!StringArr_to_AtEnum(enum_type, f2aEnum_type)){
    setError("Error in _fe_AiEnumGetValue. unable to convert: enum_type");
    return 0;
  }
  char* f2aString = NULL;
  if(!String_to_char(string, f2aString)){
    setError("Error in _fe_AiEnumGetValue. unable to convert: string");
    return 0;
  }
  int f2a_result = AiEnumGetValue(f2aEnum_type, f2aString);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiEnumGetValue", )
}

FABRIC_EXT_EXPORT void _fe_AiEnumGetString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::String > >::INParam enum_type,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam index
)
{
  F2A_TRY_STATEMENT("_fe_AiEnumGetString")

  AtEnum f2aEnum_type;
  if(!StringArr_to_AtEnum(enum_type, f2aEnum_type)){
    setError("Error in _fe_AiEnumGetString. unable to convert: enum_type");
    return;
  }
  int f2aIndex;
  if(!SInt32_to_int(index, f2aIndex)){
    setError("Error in _fe_AiEnumGetString. unable to convert: index");
    return;
  }
  const char * f2a_result = AiEnumGetString(f2aEnum_type, f2aIndex);
  char_to_String(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiEnumGetString")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiLicenseSetServer(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam host,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam port
)
{
  F2A_TRY_STATEMENT("_fe_AiLicenseSetServer")

  char* f2aHost = NULL;
  if(!String_to_char(host, f2aHost)){
    setError("Error in _fe_AiLicenseSetServer. unable to convert: host");
    return 0;
  }
  unsigned int f2aPort;
  if(!UInt32_to_unsigned_int(port, f2aPort)){
    setError("Error in _fe_AiLicenseSetServer. unable to convert: port");
    return 0;
  }
  bool f2a_result = AiLicenseSetServer(f2aHost, f2aPort);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiLicenseSetServer", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiLicenseGetServer(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::IOParam host,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::IOParam port
)
{
  F2A_TRY_STATEMENT("_fe_AiLicenseGetServer")

  char* f2aHost = NULL;
  if(!String_to_char(host, f2aHost)){
    setError("Error in _fe_AiLicenseGetServer. unable to convert: host");
    return 0;
  }
  unsigned int f2aPort;
  if(!UInt32_to_unsigned_int(port, f2aPort)){
    setError("Error in _fe_AiLicenseGetServer. unable to convert: port");
    return 0;
  }
  bool f2a_result = AiLicenseGetServer(f2aHost, f2aPort);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  char_to_String(f2aHost, host);
  unsigned_int_to_UInt32(f2aPort, port);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiLicenseGetServer", )
}

FABRIC_EXT_EXPORT void _fe_AiLicenseSetAttempts(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam attempts
)
{
  F2A_TRY_STATEMENT("_fe_AiLicenseSetAttempts")

  int f2aAttempts;
  if(!SInt32_to_int(attempts, f2aAttempts)){
    setError("Error in _fe_AiLicenseSetAttempts. unable to convert: attempts");
    return;
  }
  AiLicenseSetAttempts(f2aAttempts);

  F2A_CATCH_STATEMENT("_fe_AiLicenseSetAttempts")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 _fe_AiLicenseGetAttempts(
)
{
  F2A_TRY_STATEMENT("_fe_AiLicenseGetAttempts")

  unsigned int f2a_result = AiLicenseGetAttempts();
  Fabric::EDK::KL::UInt32 _result;
  unsigned_int_to_UInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiLicenseGetAttempts", )
}

FABRIC_EXT_EXPORT void _fe_AiLicenseSetAttemptDelay(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam msecs
)
{
  F2A_TRY_STATEMENT("_fe_AiLicenseSetAttemptDelay")

  int f2aMsecs;
  if(!SInt32_to_int(msecs, f2aMsecs)){
    setError("Error in _fe_AiLicenseSetAttemptDelay. unable to convert: msecs");
    return;
  }
  AiLicenseSetAttemptDelay(f2aMsecs);

  F2A_CATCH_STATEMENT("_fe_AiLicenseSetAttemptDelay")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 _fe_AiLicenseGetAttemptDelay(
)
{
  F2A_TRY_STATEMENT("_fe_AiLicenseGetAttemptDelay")

  unsigned int f2a_result = AiLicenseGetAttemptDelay();
  Fabric::EDK::KL::UInt32 _result;
  unsigned_int_to_UInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiLicenseGetAttemptDelay", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiLicenseGetInfo(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtLicenseInfo >::IOParam licenses,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::IOParam n
)
{
  F2A_TRY_STATEMENT("_fe_AiLicenseGetInfo")

  AtLicenseInfo* f2aLicenses = NULL;
  if(!KlAtLicenseInfo_to_AtLicenseInfo(licenses, f2aLicenses)){
    setError("Error in _fe_AiLicenseGetInfo. unable to convert: licenses");
    return 0;
  }
  unsigned int f2aN;
  if(!UInt32_to_unsigned_int(n, f2aN)){
    setError("Error in _fe_AiLicenseGetInfo. unable to convert: n");
    return 0;
  }
  int f2a_result = AiLicenseGetInfo(f2aLicenses, f2aN);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);
  AtLicenseInfo_to_KLAtLicenseInfo(f2aLicenses, licenses);
  unsigned_int_to_UInt32(f2aN, n);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiLicenseGetInfo", )
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataSetBool(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetBool")

  AtMetaDataStore* f2aMds = NULL;
  if(!KLAtMetaDataStore_to_CPAtMetaDataStore(mds, f2aMds)){
    setError("Error in _fe_AiMetaDataSetBool. unable to convert: mds");
    return;
  }
  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetBool. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetBool. unable to convert: name");
    return;
  }
  bool f2aValue;
  if(!Boolean_to_bool(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetBool. unable to convert: value");
    return;
  }
  AiMetaDataSetBool(f2aMds, f2aParam, f2aName, f2aValue);
  CPAtMetaDataStore_to_KLAtMetaDataStore(f2aMds, mds);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetBool")
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataSetBoolAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetBoolAtString")

  AtMetaDataStore* f2aMds = NULL;
  if(!KLAtMetaDataStore_to_CPAtMetaDataStore(mds, f2aMds)){
    setError("Error in _fe_AiMetaDataSetBoolAtString. unable to convert: mds");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetBoolAtString. unable to convert: param");
    return;
  }
  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetBoolAtString. unable to convert: name");
    return;
  }
  bool f2aValue;
  if(!Boolean_to_bool(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetBoolAtString. unable to convert: value");
    return;
  }
  AiMetaDataSetBoolAtString(f2aMds, f2aParam, f2aName, f2aValue);
  CPAtMetaDataStore_to_KLAtMetaDataStore(f2aMds, mds);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetBoolAtString")
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataSetInt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetInt")

  AtMetaDataStore* f2aMds = NULL;
  if(!KLAtMetaDataStore_to_CPAtMetaDataStore(mds, f2aMds)){
    setError("Error in _fe_AiMetaDataSetInt. unable to convert: mds");
    return;
  }
  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetInt. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetInt. unable to convert: name");
    return;
  }
  int f2aValue;
  if(!SInt32_to_int(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetInt. unable to convert: value");
    return;
  }
  AiMetaDataSetInt(f2aMds, f2aParam, f2aName, f2aValue);
  CPAtMetaDataStore_to_KLAtMetaDataStore(f2aMds, mds);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetInt")
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataSetIntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetIntAtString")

  AtMetaDataStore* f2aMds = NULL;
  if(!KLAtMetaDataStore_to_CPAtMetaDataStore(mds, f2aMds)){
    setError("Error in _fe_AiMetaDataSetIntAtString. unable to convert: mds");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetIntAtString. unable to convert: param");
    return;
  }
  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetIntAtString. unable to convert: name");
    return;
  }
  int f2aValue;
  if(!SInt32_to_int(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetIntAtString. unable to convert: value");
    return;
  }
  AiMetaDataSetIntAtString(f2aMds, f2aParam, f2aName, f2aValue);
  CPAtMetaDataStore_to_KLAtMetaDataStore(f2aMds, mds);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetIntAtString")
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataSetFlt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetFlt")

  AtMetaDataStore* f2aMds = NULL;
  if(!KLAtMetaDataStore_to_CPAtMetaDataStore(mds, f2aMds)){
    setError("Error in _fe_AiMetaDataSetFlt. unable to convert: mds");
    return;
  }
  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetFlt. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetFlt. unable to convert: name");
    return;
  }
  float f2aValue;
  if(!Float32_to_float(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetFlt. unable to convert: value");
    return;
  }
  AiMetaDataSetFlt(f2aMds, f2aParam, f2aName, f2aValue);
  CPAtMetaDataStore_to_KLAtMetaDataStore(f2aMds, mds);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetFlt")
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataSetFltAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetFltAtString")

  AtMetaDataStore* f2aMds = NULL;
  if(!KLAtMetaDataStore_to_CPAtMetaDataStore(mds, f2aMds)){
    setError("Error in _fe_AiMetaDataSetFltAtString. unable to convert: mds");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetFltAtString. unable to convert: param");
    return;
  }
  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetFltAtString. unable to convert: name");
    return;
  }
  float f2aValue;
  if(!Float32_to_float(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetFltAtString. unable to convert: value");
    return;
  }
  AiMetaDataSetFltAtString(f2aMds, f2aParam, f2aName, f2aValue);
  CPAtMetaDataStore_to_KLAtMetaDataStore(f2aMds, mds);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetFltAtString")
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataSetRGB(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetRGB")

  AtMetaDataStore* f2aMds = NULL;
  if(!KLAtMetaDataStore_to_CPAtMetaDataStore(mds, f2aMds)){
    setError("Error in _fe_AiMetaDataSetRGB. unable to convert: mds");
    return;
  }
  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetRGB. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetRGB. unable to convert: name");
    return;
  }
  AtColor f2aValue;
  if(!KLColor_to_CPAtColor(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetRGB. unable to convert: value");
    return;
  }
  AiMetaDataSetRGB(f2aMds, f2aParam, f2aName, f2aValue);
  CPAtMetaDataStore_to_KLAtMetaDataStore(f2aMds, mds);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetRGB")
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataSetRGBAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetRGBAtString")

  AtMetaDataStore* f2aMds = NULL;
  if(!KLAtMetaDataStore_to_CPAtMetaDataStore(mds, f2aMds)){
    setError("Error in _fe_AiMetaDataSetRGBAtString. unable to convert: mds");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetRGBAtString. unable to convert: param");
    return;
  }
  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetRGBAtString. unable to convert: name");
    return;
  }
  AtColor f2aValue;
  if(!KLColor_to_CPAtColor(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetRGBAtString. unable to convert: value");
    return;
  }
  AiMetaDataSetRGBAtString(f2aMds, f2aParam, f2aName, f2aValue);
  CPAtMetaDataStore_to_KLAtMetaDataStore(f2aMds, mds);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetRGBAtString")
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataSetVec(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetVec")

  AtMetaDataStore* f2aMds = NULL;
  if(!KLAtMetaDataStore_to_CPAtMetaDataStore(mds, f2aMds)){
    setError("Error in _fe_AiMetaDataSetVec. unable to convert: mds");
    return;
  }
  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetVec. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetVec. unable to convert: name");
    return;
  }
  AtPoint f2aValue;
  if(!Vec3_to_AtPoint(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetVec. unable to convert: value");
    return;
  }
  AiMetaDataSetVec(f2aMds, f2aParam, f2aName, f2aValue);
  CPAtMetaDataStore_to_KLAtMetaDataStore(f2aMds, mds);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetVec")
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataSetVecAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetVecAtString")

  AtMetaDataStore* f2aMds = NULL;
  if(!KLAtMetaDataStore_to_CPAtMetaDataStore(mds, f2aMds)){
    setError("Error in _fe_AiMetaDataSetVecAtString. unable to convert: mds");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetVecAtString. unable to convert: param");
    return;
  }
  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetVecAtString. unable to convert: name");
    return;
  }
  AtPoint f2aValue;
  if(!Vec3_to_AtPoint(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetVecAtString. unable to convert: value");
    return;
  }
  AiMetaDataSetVecAtString(f2aMds, f2aParam, f2aName, f2aValue);
  CPAtMetaDataStore_to_KLAtMetaDataStore(f2aMds, mds);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetVecAtString")
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataSetPnt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetPnt")

  AtMetaDataStore* f2aMds = NULL;
  if(!KLAtMetaDataStore_to_CPAtMetaDataStore(mds, f2aMds)){
    setError("Error in _fe_AiMetaDataSetPnt. unable to convert: mds");
    return;
  }
  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetPnt. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetPnt. unable to convert: name");
    return;
  }
  AtPoint f2aValue;
  if(!Vec3_to_AtPoint(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetPnt. unable to convert: value");
    return;
  }
  AiMetaDataSetPnt(f2aMds, f2aParam, f2aName, f2aValue);
  CPAtMetaDataStore_to_KLAtMetaDataStore(f2aMds, mds);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetPnt")
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataSetPntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetPntAtString")

  AtMetaDataStore* f2aMds = NULL;
  if(!KLAtMetaDataStore_to_CPAtMetaDataStore(mds, f2aMds)){
    setError("Error in _fe_AiMetaDataSetPntAtString. unable to convert: mds");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetPntAtString. unable to convert: param");
    return;
  }
  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetPntAtString. unable to convert: name");
    return;
  }
  AtPoint f2aValue;
  if(!Vec3_to_AtPoint(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetPntAtString. unable to convert: value");
    return;
  }
  AiMetaDataSetPntAtString(f2aMds, f2aParam, f2aName, f2aValue);
  CPAtMetaDataStore_to_KLAtMetaDataStore(f2aMds, mds);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetPntAtString")
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataSetPnt2(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec2 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetPnt2")

  AtMetaDataStore* f2aMds = NULL;
  if(!KLAtMetaDataStore_to_CPAtMetaDataStore(mds, f2aMds)){
    setError("Error in _fe_AiMetaDataSetPnt2. unable to convert: mds");
    return;
  }
  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetPnt2. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetPnt2. unable to convert: name");
    return;
  }
  AtPoint2 f2aValue;
  if(!Vec2_to_AtPoint2(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetPnt2. unable to convert: value");
    return;
  }
  AiMetaDataSetPnt2(f2aMds, f2aParam, f2aName, f2aValue);
  CPAtMetaDataStore_to_KLAtMetaDataStore(f2aMds, mds);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetPnt2")
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataSetPnt2AtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec2 >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetPnt2AtString")

  AtMetaDataStore* f2aMds = NULL;
  if(!KLAtMetaDataStore_to_CPAtMetaDataStore(mds, f2aMds)){
    setError("Error in _fe_AiMetaDataSetPnt2AtString. unable to convert: mds");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetPnt2AtString. unable to convert: param");
    return;
  }
  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetPnt2AtString. unable to convert: name");
    return;
  }
  AtPoint2 f2aValue;
  if(!Vec2_to_AtPoint2(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetPnt2AtString. unable to convert: value");
    return;
  }
  AiMetaDataSetPnt2AtString(f2aMds, f2aParam, f2aName, f2aValue);
  CPAtMetaDataStore_to_KLAtMetaDataStore(f2aMds, mds);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetPnt2AtString")
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataSetStr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetStr")

  AtMetaDataStore* f2aMds = NULL;
  if(!KLAtMetaDataStore_to_CPAtMetaDataStore(mds, f2aMds)){
    setError("Error in _fe_AiMetaDataSetStr. unable to convert: mds");
    return;
  }
  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetStr. unable to convert: param");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetStr. unable to convert: name");
    return;
  }
  char* f2aValue = NULL;
  if(!String_to_char(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetStr. unable to convert: value");
    return;
  }
  AiMetaDataSetStr(f2aMds, f2aParam, f2aName, f2aValue);
  CPAtMetaDataStore_to_KLAtMetaDataStore(f2aMds, mds);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetStr")
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataSetStrAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataStore >::IOParam mds,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataSetStrAtString")

  AtMetaDataStore* f2aMds = NULL;
  if(!KLAtMetaDataStore_to_CPAtMetaDataStore(mds, f2aMds)){
    setError("Error in _fe_AiMetaDataSetStrAtString. unable to convert: mds");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiMetaDataSetStrAtString. unable to convert: param");
    return;
  }
  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiMetaDataSetStrAtString. unable to convert: name");
    return;
  }
  char* f2aValue = NULL;
  if(!String_to_char(value, f2aValue)){
    setError("Error in _fe_AiMetaDataSetStrAtString. unable to convert: value");
    return;
  }
  AiMetaDataSetStrAtString(f2aMds, f2aParam, f2aName, f2aValue);
  CPAtMetaDataStore_to_KLAtMetaDataStore(f2aMds, mds);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataSetStrAtString")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataGetBoolAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam entry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::IOParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataGetBoolAtString")

  AtNodeEntry* f2aEntry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(entry, f2aEntry)){
    setError("Error in _fe_AiMetaDataGetBoolAtString. unable to convert: entry");
    return 0;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiMetaDataGetBoolAtString. unable to convert: param");
    return 0;
  }
  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiMetaDataGetBoolAtString. unable to convert: name");
    return 0;
  }
  bool f2aValue;
  if(!Boolean_to_bool(value, f2aValue)){
    setError("Error in _fe_AiMetaDataGetBoolAtString. unable to convert: value");
    return 0;
  }
  bool f2a_result = AiMetaDataGetBoolAtString(f2aEntry, f2aParam, f2aName, &f2aValue);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  bool_to_Boolean(f2aValue, value);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataGetBoolAtString", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataGetIntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam entry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::IOParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataGetIntAtString")

  AtNodeEntry* f2aEntry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(entry, f2aEntry)){
    setError("Error in _fe_AiMetaDataGetIntAtString. unable to convert: entry");
    return 0;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiMetaDataGetIntAtString. unable to convert: param");
    return 0;
  }
  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiMetaDataGetIntAtString. unable to convert: name");
    return 0;
  }
  int f2aValue;
  if(!SInt32_to_int(value, f2aValue)){
    setError("Error in _fe_AiMetaDataGetIntAtString. unable to convert: value");
    return 0;
  }
  bool f2a_result = AiMetaDataGetIntAtString(f2aEntry, f2aParam, f2aName, &f2aValue);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  int_to_SInt32(f2aValue, value);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataGetIntAtString", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataGetFltAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam entry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::IOParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataGetFltAtString")

  AtNodeEntry* f2aEntry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(entry, f2aEntry)){
    setError("Error in _fe_AiMetaDataGetFltAtString. unable to convert: entry");
    return 0;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiMetaDataGetFltAtString. unable to convert: param");
    return 0;
  }
  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiMetaDataGetFltAtString. unable to convert: name");
    return 0;
  }
  float f2aValue;
  if(!Float32_to_float(value, f2aValue)){
    setError("Error in _fe_AiMetaDataGetFltAtString. unable to convert: value");
    return 0;
  }
  bool f2a_result = AiMetaDataGetFltAtString(f2aEntry, f2aParam, f2aName, &f2aValue);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  float_to_Float32(f2aValue, value);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataGetFltAtString", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataGetRGBAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam entry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::IOParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataGetRGBAtString")

  AtNodeEntry* f2aEntry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(entry, f2aEntry)){
    setError("Error in _fe_AiMetaDataGetRGBAtString. unable to convert: entry");
    return 0;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiMetaDataGetRGBAtString. unable to convert: param");
    return 0;
  }
  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiMetaDataGetRGBAtString. unable to convert: name");
    return 0;
  }
  AtColor f2aValue;
  if(!KLColor_to_CPAtColor(value, f2aValue)){
    setError("Error in _fe_AiMetaDataGetRGBAtString. unable to convert: value");
    return 0;
  }
  bool f2a_result = AiMetaDataGetRGBAtString(f2aEntry, f2aParam, f2aName, &f2aValue);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  CPAtColor_to_KLColor(f2aValue, value);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataGetRGBAtString", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataGetVecAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam entry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::IOParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataGetVecAtString")

  AtNodeEntry* f2aEntry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(entry, f2aEntry)){
    setError("Error in _fe_AiMetaDataGetVecAtString. unable to convert: entry");
    return 0;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiMetaDataGetVecAtString. unable to convert: param");
    return 0;
  }
  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiMetaDataGetVecAtString. unable to convert: name");
    return 0;
  }
  AtPoint f2aValue;
  if(!Vec3_to_AtPoint(value, f2aValue)){
    setError("Error in _fe_AiMetaDataGetVecAtString. unable to convert: value");
    return 0;
  }
  bool f2a_result = AiMetaDataGetVecAtString(f2aEntry, f2aParam, f2aName, &f2aValue);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtPoint_to_Vec3(f2aValue, value);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataGetVecAtString", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataGetPntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam entry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::IOParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataGetPntAtString")

  AtNodeEntry* f2aEntry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(entry, f2aEntry)){
    setError("Error in _fe_AiMetaDataGetPntAtString. unable to convert: entry");
    return 0;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiMetaDataGetPntAtString. unable to convert: param");
    return 0;
  }
  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiMetaDataGetPntAtString. unable to convert: name");
    return 0;
  }
  AtPoint f2aValue;
  if(!Vec3_to_AtPoint(value, f2aValue)){
    setError("Error in _fe_AiMetaDataGetPntAtString. unable to convert: value");
    return 0;
  }
  bool f2a_result = AiMetaDataGetPntAtString(f2aEntry, f2aParam, f2aName, &f2aValue);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtPoint_to_Vec3(f2aValue, value);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataGetPntAtString", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataGetPnt2AtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam entry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec2 >::IOParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataGetPnt2AtString")

  AtNodeEntry* f2aEntry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(entry, f2aEntry)){
    setError("Error in _fe_AiMetaDataGetPnt2AtString. unable to convert: entry");
    return 0;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiMetaDataGetPnt2AtString. unable to convert: param");
    return 0;
  }
  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiMetaDataGetPnt2AtString. unable to convert: name");
    return 0;
  }
  AtPoint2 f2aValue;
  if(!Vec2_to_AtPoint2(value, f2aValue)){
    setError("Error in _fe_AiMetaDataGetPnt2AtString. unable to convert: value");
    return 0;
  }
  bool f2a_result = AiMetaDataGetPnt2AtString(f2aEntry, f2aParam, f2aName, &f2aValue);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtPoint2_to_Vec2(f2aValue, value);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataGetPnt2AtString", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataGetStrAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam entry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam value
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataGetStrAtString")

  AtNodeEntry* f2aEntry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(entry, f2aEntry)){
    setError("Error in _fe_AiMetaDataGetStrAtString. unable to convert: entry");
    return 0;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiMetaDataGetStrAtString. unable to convert: param");
    return 0;
  }
  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiMetaDataGetStrAtString. unable to convert: name");
    return 0;
  }
  char* f2aValue = NULL;
  if(!String_to_char(value, f2aValue)){
    setError("Error in _fe_AiMetaDataGetStrAtString. unable to convert: value");
    return 0;
  }
  bool f2a_result = AiMetaDataGetStrAtString(f2aEntry, f2aParam, f2aName, const_cast<const char**>(&f2aValue));
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataGetStrAtString", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataLoadFile(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataLoadFile")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiMetaDataLoadFile. unable to convert: filename");
    return 0;
  }
  bool f2a_result = AiMetaDataLoadFile(f2aFilename);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataLoadFile", )
}

FABRIC_EXT_EXPORT void _fe_AiMsgSetLogFileName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgSetLogFileName")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiMsgSetLogFileName. unable to convert: filename");
    return;
  }
  AiMsgSetLogFileName(f2aFilename);

  F2A_CATCH_STATEMENT("_fe_AiMsgSetLogFileName")
}

FABRIC_EXT_EXPORT void _fe_AiMsgSetLogFileFlags(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam flags
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgSetLogFileFlags")

  int f2aFlags;
  if(!SInt32_to_int(flags, f2aFlags)){
    setError("Error in _fe_AiMsgSetLogFileFlags. unable to convert: flags");
    return;
  }
  AiMsgSetLogFileFlags(f2aFlags);

  F2A_CATCH_STATEMENT("_fe_AiMsgSetLogFileFlags")
}

FABRIC_EXT_EXPORT void _fe_AiMsgSetConsoleFlags(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam flags
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgSetConsoleFlags")

  int f2aFlags;
  if(!SInt32_to_int(flags, f2aFlags)){
    setError("Error in _fe_AiMsgSetConsoleFlags. unable to convert: flags");
    return;
  }
  AiMsgSetConsoleFlags(f2aFlags);

  F2A_CATCH_STATEMENT("_fe_AiMsgSetConsoleFlags")
}

FABRIC_EXT_EXPORT void _fe_AiMsgSetMaxWarnings(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam max_warnings
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgSetMaxWarnings")

  int f2aMax_warnings;
  if(!SInt32_to_int(max_warnings, f2aMax_warnings)){
    setError("Error in _fe_AiMsgSetMaxWarnings. unable to convert: max_warnings");
    return;
  }
  AiMsgSetMaxWarnings(f2aMax_warnings);

  F2A_CATCH_STATEMENT("_fe_AiMsgSetMaxWarnings")
}

FABRIC_EXT_EXPORT void _fe_AiMsgResetCallback(
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgResetCallback")

  AiMsgResetCallback();

  F2A_CATCH_STATEMENT("_fe_AiMsgResetCallback")
}

FABRIC_EXT_EXPORT void _fe_AiMsgInfo(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam format
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgInfo")

  char* f2aFormat = NULL;
  if(!String_to_char(format, f2aFormat)){
    setError("Error in _fe_AiMsgInfo. unable to convert: format");
    return;
  }
  AiMsgInfo(f2aFormat);

  F2A_CATCH_STATEMENT("_fe_AiMsgInfo")
}

FABRIC_EXT_EXPORT void _fe_AiMsgDebug(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam format
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgDebug")

  char* f2aFormat = NULL;
  if(!String_to_char(format, f2aFormat)){
    setError("Error in _fe_AiMsgDebug. unable to convert: format");
    return;
  }
  AiMsgDebug(f2aFormat);

  F2A_CATCH_STATEMENT("_fe_AiMsgDebug")
}

FABRIC_EXT_EXPORT void _fe_AiMsgWarning(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam format
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgWarning")

  char* f2aFormat = NULL;
  if(!String_to_char(format, f2aFormat)){
    setError("Error in _fe_AiMsgWarning. unable to convert: format");
    return;
  }
  AiMsgWarning(f2aFormat);

  F2A_CATCH_STATEMENT("_fe_AiMsgWarning")
}

FABRIC_EXT_EXPORT void _fe_AiMsgError(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam format
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgError")

  char* f2aFormat = NULL;
  if(!String_to_char(format, f2aFormat)){
    setError("Error in _fe_AiMsgError. unable to convert: format");
    return;
  }
  AiMsgError(f2aFormat);

  F2A_CATCH_STATEMENT("_fe_AiMsgError")
}

FABRIC_EXT_EXPORT void _fe_AiMsgFatal(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam format
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgFatal")

  char* f2aFormat = NULL;
  if(!String_to_char(format, f2aFormat)){
    setError("Error in _fe_AiMsgFatal. unable to convert: format");
    return;
  }
  AiMsgFatal(f2aFormat);

  F2A_CATCH_STATEMENT("_fe_AiMsgFatal")
}

FABRIC_EXT_EXPORT void _fe_AiMsgTab(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam tabinc
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgTab")

  int f2aTabinc;
  if(!SInt32_to_int(tabinc, f2aTabinc)){
    setError("Error in _fe_AiMsgTab. unable to convert: tabinc");
    return;
  }
  AiMsgTab(f2aTabinc);

  F2A_CATCH_STATEMENT("_fe_AiMsgTab")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt64 _fe_AiMsgUtilGetUsedMemory(
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgUtilGetUsedMemory")

  AtUInt64 f2a_result = AiMsgUtilGetUsedMemory();
  Fabric::EDK::KL::UInt64 _result;
  AtUInt64_to_UInt64(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMsgUtilGetUsedMemory", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 _fe_AiMsgUtilGetElapsedTime(
)
{
  F2A_TRY_STATEMENT("_fe_AiMsgUtilGetElapsedTime")

  AtUInt32 f2a_result = AiMsgUtilGetElapsedTime();
  Fabric::EDK::KL::UInt32 _result;
  unsigned_int_to_UInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMsgUtilGetElapsedTime", )
}

FABRIC_EXT_EXPORT void _fe_AiNodeEntryLookUpAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryLookUpAtString")

  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiNodeEntryLookUpAtString. unable to convert: name");
    return;
  }
  const AtNodeEntry * f2a_result = AiNodeEntryLookUpAtString(f2aName);
  CPAtNodeEntry_to_KLAtNodeEntry(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryLookUpAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeEntryGetName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetName")

  AtNodeEntry* f2aNentry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(nentry, f2aNentry)){
    setError("Error in _fe_AiNodeEntryGetName. unable to convert: nentry");
    return;
  }
  const char * f2a_result = AiNodeEntryGetName(f2aNentry);
  char_to_String(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryGetName")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiNodeEntryGetType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetType")

  AtNodeEntry* f2aNentry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(nentry, f2aNentry)){
    setError("Error in _fe_AiNodeEntryGetType. unable to convert: nentry");
    return 0;
  }
  int f2a_result = AiNodeEntryGetType(f2aNentry);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeEntryGetType", )
}

FABRIC_EXT_EXPORT void _fe_AiNodeEntryGetTypeName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetTypeName")

  AtNodeEntry* f2aNentry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(nentry, f2aNentry)){
    setError("Error in _fe_AiNodeEntryGetTypeName. unable to convert: nentry");
    return;
  }
  const char * f2a_result = AiNodeEntryGetTypeName(f2aNentry);
  char_to_String(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryGetTypeName")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiNodeEntryGetOutputType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetOutputType")

  AtNodeEntry* f2aNentry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(nentry, f2aNentry)){
    setError("Error in _fe_AiNodeEntryGetOutputType. unable to convert: nentry");
    return 0;
  }
  int f2a_result = AiNodeEntryGetOutputType(f2aNentry);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeEntryGetOutputType", )
}

FABRIC_EXT_EXPORT void _fe_AiNodeEntryGetFilename(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetFilename")

  AtNodeEntry* f2aNentry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(nentry, f2aNentry)){
    setError("Error in _fe_AiNodeEntryGetFilename. unable to convert: nentry");
    return;
  }
  const char * f2a_result = AiNodeEntryGetFilename(f2aNentry);
  char_to_String(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryGetFilename")
}

FABRIC_EXT_EXPORT void _fe_AiNodeEntryGetVersion(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetVersion")

  AtNodeEntry* f2aNentry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(nentry, f2aNentry)){
    setError("Error in _fe_AiNodeEntryGetVersion. unable to convert: nentry");
    return;
  }
  const char * f2a_result = AiNodeEntryGetVersion(f2aNentry);
  char_to_String(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryGetVersion")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiNodeEntryGetCount(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetCount")

  AtNodeEntry* f2aNentry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(nentry, f2aNentry)){
    setError("Error in _fe_AiNodeEntryGetCount. unable to convert: nentry");
    return 0;
  }
  int f2a_result = AiNodeEntryGetCount(f2aNentry);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeEntryGetCount", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiNodeEntryGetNumParams(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetNumParams")

  AtNodeEntry* f2aNentry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(nentry, f2aNentry)){
    setError("Error in _fe_AiNodeEntryGetNumParams. unable to convert: nentry");
    return 0;
  }
  int f2a_result = AiNodeEntryGetNumParams(f2aNentry);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeEntryGetNumParams", )
}

FABRIC_EXT_EXPORT void _fe_AiNodeEntryGetParameter(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam i
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetParameter")

  AtNodeEntry* f2aNentry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(nentry, f2aNentry)){
    setError("Error in _fe_AiNodeEntryGetParameter. unable to convert: nentry");
    return;
  }
  int f2aI;
  if(!SInt32_to_int(i, f2aI)){
    setError("Error in _fe_AiNodeEntryGetParameter. unable to convert: i");
    return;
  }
  const AtParamEntry * f2a_result = AiNodeEntryGetParameter(f2aNentry, f2aI);
  CPAtParamEntry_to_KLAtParamEntry(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryGetParameter")
}

FABRIC_EXT_EXPORT void _fe_AiNodeEntryLookUpParameterAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryLookUpParameterAtString")

  AtNodeEntry* f2aNentry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(nentry, f2aNentry)){
    setError("Error in _fe_AiNodeEntryLookUpParameterAtString. unable to convert: nentry");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeEntryLookUpParameterAtString. unable to convert: param");
    return;
  }
  const AtParamEntry * f2a_result = AiNodeEntryLookUpParameterAtString(f2aNentry, f2aParam);
  CPAtParamEntry_to_KLAtParamEntry(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryLookUpParameterAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeEntryGetParamIterator(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamIterator >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetParamIterator")

  AtNodeEntry* f2aNentry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(nentry, f2aNentry)){
    setError("Error in _fe_AiNodeEntryGetParamIterator. unable to convert: nentry");
    return;
  }
  AtParamIterator * f2a_result = AiNodeEntryGetParamIterator(f2aNentry);
  CPAtParamIterator_to_KLAtParamIterator(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryGetParamIterator")
}

FABRIC_EXT_EXPORT void _fe_AiNodeEntryGetMetaDataIterator(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataIterator >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::INParam nentry,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryGetMetaDataIterator")

  AtNodeEntry* f2aNentry = NULL;
  if(!KLAtNodeEntry_to_CPAtNodeEntry(nentry, f2aNentry)){
    setError("Error in _fe_AiNodeEntryGetMetaDataIterator. unable to convert: nentry");
    return;
  }
  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeEntryGetMetaDataIterator. unable to convert: param");
    return;
  }
  AtMetaDataIterator * f2a_result = AiNodeEntryGetMetaDataIterator(f2aNentry, f2aParam/*=NULL*/);
  CPAtMetaDataIterator_to_KLAtMetaDataIterator(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeEntryGetMetaDataIterator")
}

FABRIC_EXT_EXPORT void _fe_AiNodeEntryInstall(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam type,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam output_type,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeMethods >::IOParam methods,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam version
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryInstall")

  int f2aType;
  if(!SInt32_to_int(type, f2aType)){
    setError("Error in _fe_AiNodeEntryInstall. unable to convert: type");
    return;
  }
  AtByte f2aOutput_type;
  if(!UInt8_to_AtByte(output_type, f2aOutput_type)){
    setError("Error in _fe_AiNodeEntryInstall. unable to convert: output_type");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiNodeEntryInstall. unable to convert: name");
    return;
  }
  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiNodeEntryInstall. unable to convert: filename");
    return;
  }
  AtNodeMethods* f2aMethods = NULL;
  if(!KLAtNodeMethods_to_CPAtNodeMethods(methods, f2aMethods)){
    setError("Error in _fe_AiNodeEntryInstall. unable to convert: methods");
    return;
  }
  char* f2aVersion = NULL;
  if(!String_to_char(version, f2aVersion)){
    setError("Error in _fe_AiNodeEntryInstall. unable to convert: version");
    return;
  }
  AiNodeEntryInstall(f2aType, f2aOutput_type, f2aName, f2aFilename, f2aMethods, f2aVersion);
  CPAtNodeMethods_to_KLAtNodeMethods(f2aMethods, methods);

  F2A_CATCH_STATEMENT("_fe_AiNodeEntryInstall")
}

FABRIC_EXT_EXPORT void _fe_AiNodeEntryUninstall(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryUninstall")

  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_AiNodeEntryUninstall. unable to convert: name");
    return;
  }
  AiNodeEntryUninstall(f2aName);

  F2A_CATCH_STATEMENT("_fe_AiNodeEntryUninstall")
}

FABRIC_EXT_EXPORT void _fe_AiParamIteratorDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiParamIteratorDestroy")

  AtParamIterator* f2aIter = NULL;
  if(!KLAtParamIterator_to_CPAtParamIterator(iter, f2aIter)){
    setError("Error in _fe_AiParamIteratorDestroy. unable to convert: iter");
    return;
  }
  AiParamIteratorDestroy(f2aIter);
  CPAtParamIterator_to_KLAtParamIterator(f2aIter, iter);

  F2A_CATCH_STATEMENT("_fe_AiParamIteratorDestroy")
}

FABRIC_EXT_EXPORT void _fe_AiParamIteratorGetNext(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiParamIteratorGetNext")

  AtParamIterator* f2aIter = NULL;
  if(!KLAtParamIterator_to_CPAtParamIterator(iter, f2aIter)){
    setError("Error in _fe_AiParamIteratorGetNext. unable to convert: iter");
    return;
  }
  const AtParamEntry * f2a_result = AiParamIteratorGetNext(f2aIter);
  CPAtParamEntry_to_KLAtParamEntry(f2a_result, _result);  CPAtParamIterator_to_KLAtParamIterator(f2aIter, iter);

  F2A_CATCH_STATEMENT("_fe_AiParamIteratorGetNext")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiParamIteratorFinished(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamIterator >::INParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiParamIteratorFinished")

  AtParamIterator* f2aIter = NULL;
  if(!KLAtParamIterator_to_CPAtParamIterator(iter, f2aIter)){
    setError("Error in _fe_AiParamIteratorFinished. unable to convert: iter");
    return 0;
  }
  bool f2a_result = AiParamIteratorFinished(f2aIter);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiParamIteratorFinished", )
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataIteratorDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataIteratorDestroy")

  AtMetaDataIterator* f2aIter = NULL;
  if(!KLAtMetaDataIterator_to_CPAtMetaDataIterator(iter, f2aIter)){
    setError("Error in _fe_AiMetaDataIteratorDestroy. unable to convert: iter");
    return;
  }
  AiMetaDataIteratorDestroy(f2aIter);
  CPAtMetaDataIterator_to_KLAtMetaDataIterator(f2aIter, iter);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataIteratorDestroy")
}

FABRIC_EXT_EXPORT void _fe_AiMetaDataIteratorGetNext(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataIteratorGetNext")

  AtMetaDataIterator* f2aIter = NULL;
  if(!KLAtMetaDataIterator_to_CPAtMetaDataIterator(iter, f2aIter)){
    setError("Error in _fe_AiMetaDataIteratorGetNext. unable to convert: iter");
    return;
  }
  const AtMetaDataEntry * f2a_result = AiMetaDataIteratorGetNext(f2aIter);
  AtMetaDataEntry_to_KLAtMetaDataEntry(f2a_result, _result);  CPAtMetaDataIterator_to_KLAtMetaDataIterator(f2aIter, iter);

  F2A_CATCH_STATEMENT("_fe_AiMetaDataIteratorGetNext")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiMetaDataIteratorFinished(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtMetaDataIterator >::INParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiMetaDataIteratorFinished")

  AtMetaDataIterator* f2aIter = NULL;
  if(!KLAtMetaDataIterator_to_CPAtMetaDataIterator(iter, f2aIter)){
    setError("Error in _fe_AiMetaDataIteratorFinished. unable to convert: iter");
    return 0;
  }
  bool f2a_result = AiMetaDataIteratorFinished(f2aIter);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiMetaDataIteratorFinished", )
}

FABRIC_EXT_EXPORT void _fe_AiNodeGetMatrix(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat44 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetMatrix")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetMatrix. unable to convert: node");
    return;
  }
  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeGetMatrix. unable to convert: param");
    return;
  }
  AtMatrix f2a_result;
  AiNodeGetMatrix(f2aNode, f2aParam, f2a_result);
  AtMatrix_to_Mat44(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetMatrix")
}

FABRIC_EXT_EXPORT void _fe_AiNodeAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeAtString")

  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiNodeAtString. unable to convert: name");
    return;
  }
  AtNode * f2a_result = AiNodeAtString(f2aName);
  CPAtNode_to_KLAtNode(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeLookUpByNameAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeLookUpByNameAtString")

  AtString f2aName;
  if(!KLString_to_CPAtString(name, f2aName)){
    setError("Error in _fe_AiNodeLookUpByNameAtString. unable to convert: name");
    return;
  }
  AtNode * f2a_result = AiNodeLookUpByNameAtString(f2aName);
  CPAtNode_to_KLAtNode(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeLookUpByNameAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeReset(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeReset")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeReset. unable to convert: node");
    return;
  }
  AiNodeReset(f2aNode);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiNodeReset")
}

FABRIC_EXT_EXPORT void _fe_AiNodeResetParameter(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeResetParameter")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeResetParameter. unable to convert: node");
    return;
  }
  char* f2aParam = NULL;
  if(!String_to_char(param, f2aParam)){
    setError("Error in _fe_AiNodeResetParameter. unable to convert: param");
    return;
  }
  AiNodeResetParameter(f2aNode, f2aParam);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiNodeResetParameter")
}

FABRIC_EXT_EXPORT void _fe_AiNodeClone(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeClone")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeClone. unable to convert: node");
    return;
  }
  AtNode * f2a_result = AiNodeClone(f2aNode);
  CPAtNode_to_KLAtNode(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeClone")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeDestroy")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeDestroy. unable to convert: node");
    return 0;
  }
  bool f2a_result = AiNodeDestroy(f2aNode);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeDestroy", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeIs(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam str
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeIs")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeIs. unable to convert: node");
    return 0;
  }
  char* f2aStr = NULL;
  if(!String_to_char(str, f2aStr)){
    setError("Error in _fe_AiNodeIs. unable to convert: str");
    return 0;
  }
  bool f2a_result = AiNodeIs(f2aNode, f2aStr);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeIs", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeDeclareAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam declaration
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeDeclareAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeDeclareAtString. unable to convert: node");
    return 0;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeDeclareAtString. unable to convert: param");
    return 0;
  }
  char* f2aDeclaration = NULL;
  if(!String_to_char(declaration, f2aDeclaration)){
    setError("Error in _fe_AiNodeDeclareAtString. unable to convert: declaration");
    return 0;
  }
  bool f2a_result = AiNodeDeclareAtString(f2aNode, f2aParam, f2aDeclaration);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeDeclareAtString", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeLink(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam src,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam input,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam target
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeLink")

  AtNode* f2aSrc = NULL;
  if(!KLAtNode_to_CPAtNode(src, f2aSrc)){
    setError("Error in _fe_AiNodeLink. unable to convert: src");
    return 0;
  }
  char* f2aInput = NULL;
  if(!String_to_char(input, f2aInput)){
    setError("Error in _fe_AiNodeLink. unable to convert: input");
    return 0;
  }
  AtNode* f2aTarget = NULL;
  if(!KLAtNode_to_CPAtNode(target, f2aTarget)){
    setError("Error in _fe_AiNodeLink. unable to convert: target");
    return 0;
  }
  bool f2a_result = AiNodeLink(f2aSrc, f2aInput, f2aTarget);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  CPAtNode_to_KLAtNode(f2aSrc, src);
  CPAtNode_to_KLAtNode(f2aTarget, target);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeLink", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeLinkOutput(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam src,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam output,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam target,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam input
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeLinkOutput")

  AtNode* f2aSrc = NULL;
  if(!KLAtNode_to_CPAtNode(src, f2aSrc)){
    setError("Error in _fe_AiNodeLinkOutput. unable to convert: src");
    return 0;
  }
  char* f2aOutput = NULL;
  if(!String_to_char(output, f2aOutput)){
    setError("Error in _fe_AiNodeLinkOutput. unable to convert: output");
    return 0;
  }
  AtNode* f2aTarget = NULL;
  if(!KLAtNode_to_CPAtNode(target, f2aTarget)){
    setError("Error in _fe_AiNodeLinkOutput. unable to convert: target");
    return 0;
  }
  char* f2aInput = NULL;
  if(!String_to_char(input, f2aInput)){
    setError("Error in _fe_AiNodeLinkOutput. unable to convert: input");
    return 0;
  }
  bool f2a_result = AiNodeLinkOutput(f2aSrc, f2aOutput, f2aTarget, f2aInput);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  CPAtNode_to_KLAtNode(f2aSrc, src);
  CPAtNode_to_KLAtNode(f2aTarget, target);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeLinkOutput", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeUnlink(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam input
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeUnlink")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeUnlink. unable to convert: node");
    return 0;
  }
  char* f2aInput = NULL;
  if(!String_to_char(input, f2aInput)){
    setError("Error in _fe_AiNodeUnlink. unable to convert: input");
    return 0;
  }
  bool f2a_result = AiNodeUnlink(f2aNode, f2aInput);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeUnlink", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeIsLinked(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam input
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeIsLinked")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeIsLinked. unable to convert: node");
    return 0;
  }
  char* f2aInput = NULL;
  if(!String_to_char(input, f2aInput)){
    setError("Error in _fe_AiNodeIsLinked. unable to convert: input");
    return 0;
  }
  bool f2a_result = AiNodeIsLinked(f2aNode, f2aInput);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeIsLinked", )
}

FABRIC_EXT_EXPORT void _fe_AiNodeGetLink(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam input,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::IOParam comp
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetLink")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetLink. unable to convert: node");
    return;
  }
  char* f2aInput = NULL;
  if(!String_to_char(input, f2aInput)){
    setError("Error in _fe_AiNodeGetLink. unable to convert: input");
    return;
  }
  int f2aComp;
  if(!SInt32_to_int(comp, f2aComp)){
    setError("Error in _fe_AiNodeGetLink. unable to convert: comp");
    return;
  }
  AtNode * f2a_result = AiNodeGetLink(f2aNode, f2aInput, &f2aComp/*=NULL*/);
  CPAtNode_to_KLAtNode(f2a_result, _result);  int_to_SInt32(f2aComp, comp);

  F2A_CATCH_STATEMENT("_fe_AiNodeGetLink")
}

FABRIC_EXT_EXPORT void _fe_AiNodeGetName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetName")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetName. unable to convert: node");
    return;
  }
  const char * f2a_result = AiNodeGetName(f2aNode);
  char_to_String(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetName")
}

FABRIC_EXT_EXPORT void _fe_AiNodeGetNodeEntry(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetNodeEntry")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetNodeEntry. unable to convert: node");
    return;
  }
  const AtNodeEntry * f2a_result = AiNodeGetNodeEntry(f2aNode);
  CPAtNodeEntry_to_KLAtNodeEntry(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetNodeEntry")
}

FABRIC_EXT_EXPORT void _fe_AiNodeGetParams(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtParamValue >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetParams")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetParams. unable to convert: node");
    return;
  }
  AtParamValue * f2a_result = AiNodeGetParams(f2aNode);
  AtParamValue_to_KLParamValue(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetParams")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Data _fe_AiNodeGetLocalData(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetLocalData")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetLocalData. unable to convert: node");
    return 0;
  }
  void * f2a_result = AiNodeGetLocalData(f2aNode);
  Fabric::EDK::KL::Data _result;
  void_to_Data(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeGetLocalData", )
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetLocalData(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam data
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetLocalData")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetLocalData. unable to convert: node");
    return;
  }
  void* f2aData = NULL;
  if(!Data_to_void(data, f2aData)){
    setError("Error in _fe_AiNodeSetLocalData. unable to convert: data");
    return;
  }
  AiNodeSetLocalData(f2aNode, f2aData);
  CPAtNode_to_KLAtNode(f2aNode, node);
  void_to_Data(f2aData, data);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetLocalData")
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetDisabled(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam disabled
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetDisabled")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetDisabled. unable to convert: node");
    return;
  }
  bool f2aDisabled;
  if(!Boolean_to_bool(disabled, f2aDisabled)){
    setError("Error in _fe_AiNodeSetDisabled. unable to convert: disabled");
    return;
  }
  AiNodeSetDisabled(f2aNode, f2aDisabled);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetDisabled")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeIsDisabled(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeIsDisabled")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeIsDisabled. unable to convert: node");
    return 0;
  }
  bool f2a_result = AiNodeIsDisabled(f2aNode);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeIsDisabled", )
}

FABRIC_EXT_EXPORT void _fe_AiNodeLookUpUserParameterAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeLookUpUserParameterAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeLookUpUserParameterAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeLookUpUserParameterAtString. unable to convert: param");
    return;
  }
  const AtUserParamEntry * f2a_result = AiNodeLookUpUserParameterAtString(f2aNode, f2aParam);
  CPAtUserParamEntry_to_KLAtUserParamEntry(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeLookUpUserParameterAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeGetUserParamIterator(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamIterator >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetUserParamIterator")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetUserParamIterator. unable to convert: node");
    return;
  }
  AtUserParamIterator * f2a_result = AiNodeGetUserParamIterator(f2aNode);
  CPAtUserParamIterator_to_KLAtUserParamIterator(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetUserParamIterator")
}

FABRIC_EXT_EXPORT void _fe_AiUserParamIteratorDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiUserParamIteratorDestroy")

  AtUserParamIterator* f2aIter = NULL;
  if(!KLAtUserParamIterator_to_CPAtUserParamIterator(iter, f2aIter)){
    setError("Error in _fe_AiUserParamIteratorDestroy. unable to convert: iter");
    return;
  }
  AiUserParamIteratorDestroy(f2aIter);
  CPAtUserParamIterator_to_KLAtUserParamIterator(f2aIter, iter);

  F2A_CATCH_STATEMENT("_fe_AiUserParamIteratorDestroy")
}

FABRIC_EXT_EXPORT void _fe_AiUserParamIteratorGetNext(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiUserParamIteratorGetNext")

  AtUserParamIterator* f2aIter = NULL;
  if(!KLAtUserParamIterator_to_CPAtUserParamIterator(iter, f2aIter)){
    setError("Error in _fe_AiUserParamIteratorGetNext. unable to convert: iter");
    return;
  }
  const AtUserParamEntry * f2a_result = AiUserParamIteratorGetNext(f2aIter);
  CPAtUserParamEntry_to_KLAtUserParamEntry(f2a_result, _result);  CPAtUserParamIterator_to_KLAtUserParamIterator(f2aIter, iter);

  F2A_CATCH_STATEMENT("_fe_AiUserParamIteratorGetNext")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiUserParamIteratorFinished(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtUserParamIterator >::INParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiUserParamIteratorFinished")

  AtUserParamIterator* f2aIter = NULL;
  if(!KLAtUserParamIterator_to_CPAtUserParamIterator(iter, f2aIter)){
    setError("Error in _fe_AiUserParamIteratorFinished. unable to convert: iter");
    return 0;
  }
  bool f2a_result = AiUserParamIteratorFinished(f2aIter);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiUserParamIteratorFinished", )
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetByteAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetByteAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetByteAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeSetByteAtString. unable to convert: param");
    return;
  }
  AtByte f2aVal;
  if(!UInt8_to_AtByte(val, f2aVal)){
    setError("Error in _fe_AiNodeSetByteAtString. unable to convert: val");
    return;
  }
  AiNodeSetByteAtString(f2aNode, f2aParam, f2aVal);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetByteAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetIntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetIntAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetIntAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeSetIntAtString. unable to convert: param");
    return;
  }
  int f2aVal;
  if(!SInt32_to_int(val, f2aVal)){
    setError("Error in _fe_AiNodeSetIntAtString. unable to convert: val");
    return;
  }
  AiNodeSetIntAtString(f2aNode, f2aParam, f2aVal);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetIntAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetUIntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetUIntAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetUIntAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeSetUIntAtString. unable to convert: param");
    return;
  }
  unsigned int f2aVal;
  if(!UInt32_to_unsigned_int(val, f2aVal)){
    setError("Error in _fe_AiNodeSetUIntAtString. unable to convert: val");
    return;
  }
  AiNodeSetUIntAtString(f2aNode, f2aParam, f2aVal);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetUIntAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetBoolAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetBoolAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetBoolAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeSetBoolAtString. unable to convert: param");
    return;
  }
  bool f2aVal;
  if(!Boolean_to_bool(val, f2aVal)){
    setError("Error in _fe_AiNodeSetBoolAtString. unable to convert: val");
    return;
  }
  AiNodeSetBoolAtString(f2aNode, f2aParam, f2aVal);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetBoolAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetFltAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetFltAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetFltAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeSetFltAtString. unable to convert: param");
    return;
  }
  float f2aVal;
  if(!Float32_to_float(val, f2aVal)){
    setError("Error in _fe_AiNodeSetFltAtString. unable to convert: val");
    return;
  }
  AiNodeSetFltAtString(f2aNode, f2aParam, f2aVal);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetFltAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetPtrAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Data >::IOParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetPtrAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetPtrAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeSetPtrAtString. unable to convert: param");
    return;
  }
  void* f2aVal = NULL;
  if(!Data_to_void(val, f2aVal)){
    setError("Error in _fe_AiNodeSetPtrAtString. unable to convert: val");
    return;
  }
  AiNodeSetPtrAtString(f2aNode, f2aParam, f2aVal);
  CPAtNode_to_KLAtNode(f2aNode, node);
  void_to_Data(f2aVal, val);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetPtrAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetArrayAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::IOParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetArrayAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetArrayAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeSetArrayAtString. unable to convert: param");
    return;
  }
  AtArray* f2aVal = NULL;
  if(!KlArray_to_AtArray(val, f2aVal)){
    setError("Error in _fe_AiNodeSetArrayAtString. unable to convert: val");
    return;
  }
  AiNodeSetArrayAtString(f2aNode, f2aParam, f2aVal);
  CPAtNode_to_KLAtNode(f2aNode, node);
  AtArray_to_KLArray(f2aVal, val);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetArrayAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetMatrixAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat44 >::INParam val
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetMatrixAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetMatrixAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeSetMatrixAtString. unable to convert: param");
    return;
  }
  AtMatrix f2aVal;
  if(!Mat44_to_AtMatrix(val, f2aVal)){
    setError("Error in _fe_AiNodeSetMatrixAtString. unable to convert: val");
    return;
  }
  AiNodeSetMatrixAtString(f2aNode, f2aParam, f2aVal);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetMatrixAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetStrAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam str
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetStrAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetStrAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeSetStrAtString. unable to convert: param");
    return;
  }
  AtString f2aStr;
  if(!KLString_to_CPAtString(str, f2aStr)){
    setError("Error in _fe_AiNodeSetStrAtString. unable to convert: str");
    return;
  }
  AiNodeSetStrAtString(f2aNode, f2aParam, f2aStr);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetStrAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetRGBAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam r,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam g,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam b
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetRGBAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetRGBAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeSetRGBAtString. unable to convert: param");
    return;
  }
  float f2aR;
  if(!Float32_to_float(r, f2aR)){
    setError("Error in _fe_AiNodeSetRGBAtString. unable to convert: r");
    return;
  }
  float f2aG;
  if(!Float32_to_float(g, f2aG)){
    setError("Error in _fe_AiNodeSetRGBAtString. unable to convert: g");
    return;
  }
  float f2aB;
  if(!Float32_to_float(b, f2aB)){
    setError("Error in _fe_AiNodeSetRGBAtString. unable to convert: b");
    return;
  }
  AiNodeSetRGBAtString(f2aNode, f2aParam, f2aR, f2aG, f2aB);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetRGBAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetRGBAAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam r,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam g,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam b,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam a
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetRGBAAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetRGBAAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeSetRGBAAtString. unable to convert: param");
    return;
  }
  float f2aR;
  if(!Float32_to_float(r, f2aR)){
    setError("Error in _fe_AiNodeSetRGBAAtString. unable to convert: r");
    return;
  }
  float f2aG;
  if(!Float32_to_float(g, f2aG)){
    setError("Error in _fe_AiNodeSetRGBAAtString. unable to convert: g");
    return;
  }
  float f2aB;
  if(!Float32_to_float(b, f2aB)){
    setError("Error in _fe_AiNodeSetRGBAAtString. unable to convert: b");
    return;
  }
  float f2aA;
  if(!Float32_to_float(a, f2aA)){
    setError("Error in _fe_AiNodeSetRGBAAtString. unable to convert: a");
    return;
  }
  AiNodeSetRGBAAtString(f2aNode, f2aParam, f2aR, f2aG, f2aB, f2aA);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetRGBAAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetVecAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam x,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam y,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam z
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetVecAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetVecAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeSetVecAtString. unable to convert: param");
    return;
  }
  float f2aX;
  if(!Float32_to_float(x, f2aX)){
    setError("Error in _fe_AiNodeSetVecAtString. unable to convert: x");
    return;
  }
  float f2aY;
  if(!Float32_to_float(y, f2aY)){
    setError("Error in _fe_AiNodeSetVecAtString. unable to convert: y");
    return;
  }
  float f2aZ;
  if(!Float32_to_float(z, f2aZ)){
    setError("Error in _fe_AiNodeSetVecAtString. unable to convert: z");
    return;
  }
  AiNodeSetVecAtString(f2aNode, f2aParam, f2aX, f2aY, f2aZ);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetVecAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetPntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam x,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam y,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam z
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetPntAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetPntAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeSetPntAtString. unable to convert: param");
    return;
  }
  float f2aX;
  if(!Float32_to_float(x, f2aX)){
    setError("Error in _fe_AiNodeSetPntAtString. unable to convert: x");
    return;
  }
  float f2aY;
  if(!Float32_to_float(y, f2aY)){
    setError("Error in _fe_AiNodeSetPntAtString. unable to convert: y");
    return;
  }
  float f2aZ;
  if(!Float32_to_float(z, f2aZ)){
    setError("Error in _fe_AiNodeSetPntAtString. unable to convert: z");
    return;
  }
  AiNodeSetPntAtString(f2aNode, f2aParam, f2aX, f2aY, f2aZ);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetPntAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetPnt2AtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam x,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam y
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetPnt2AtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetPnt2AtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeSetPnt2AtString. unable to convert: param");
    return;
  }
  float f2aX;
  if(!Float32_to_float(x, f2aX)){
    setError("Error in _fe_AiNodeSetPnt2AtString. unable to convert: x");
    return;
  }
  float f2aY;
  if(!Float32_to_float(y, f2aY)){
    setError("Error in _fe_AiNodeSetPnt2AtString. unable to convert: y");
    return;
  }
  AiNodeSetPnt2AtString(f2aNode, f2aParam, f2aX, f2aY);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetPnt2AtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeSetAttributes(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::IOParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam attributes
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeSetAttributes")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeSetAttributes. unable to convert: node");
    return;
  }
  char* f2aAttributes = NULL;
  if(!String_to_char(attributes, f2aAttributes)){
    setError("Error in _fe_AiNodeSetAttributes. unable to convert: attributes");
    return;
  }
  AiNodeSetAttributes(f2aNode, f2aAttributes);
  CPAtNode_to_KLAtNode(f2aNode, node);

  F2A_CATCH_STATEMENT("_fe_AiNodeSetAttributes")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt8 _fe_AiNodeGetByteAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetByteAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetByteAtString. unable to convert: node");
    return 0;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeGetByteAtString. unable to convert: param");
    return 0;
  }
  AtByte f2a_result = AiNodeGetByteAtString(f2aNode, f2aParam);
  Fabric::EDK::KL::UInt8 _result;
  AtByte_to_UInt8(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeGetByteAtString", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiNodeGetIntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetIntAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetIntAtString. unable to convert: node");
    return 0;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeGetIntAtString. unable to convert: param");
    return 0;
  }
  int f2a_result = AiNodeGetIntAtString(f2aNode, f2aParam);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeGetIntAtString", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 _fe_AiNodeGetUIntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetUIntAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetUIntAtString. unable to convert: node");
    return 0;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeGetUIntAtString. unable to convert: param");
    return 0;
  }
  unsigned int f2a_result = AiNodeGetUIntAtString(f2aNode, f2aParam);
  Fabric::EDK::KL::UInt32 _result;
  unsigned_int_to_UInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeGetUIntAtString", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeGetBoolAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetBoolAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetBoolAtString. unable to convert: node");
    return 0;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeGetBoolAtString. unable to convert: param");
    return 0;
  }
  bool f2a_result = AiNodeGetBoolAtString(f2aNode, f2aParam);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeGetBoolAtString", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Float32 _fe_AiNodeGetFltAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetFltAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetFltAtString. unable to convert: node");
    return 0;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeGetFltAtString. unable to convert: param");
    return 0;
  }
  float f2a_result = AiNodeGetFltAtString(f2aNode, f2aParam);
  Fabric::EDK::KL::Float32 _result;
  float_to_Float32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeGetFltAtString", )
}

FABRIC_EXT_EXPORT void _fe_AiNodeGetRGBAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetRGBAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetRGBAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeGetRGBAtString. unable to convert: param");
    return;
  }
  AtRGB f2a_result = AiNodeGetRGBAtString(f2aNode, f2aParam);
  AtRGB_to_Color(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetRGBAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeGetRGBAAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetRGBAAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetRGBAAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeGetRGBAAtString. unable to convert: param");
    return;
  }
  AtRGBA f2a_result = AiNodeGetRGBAAtString(f2aNode, f2aParam);
  CPAtRGBA_to_KLColor(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetRGBAAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeGetVecAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetVecAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetVecAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeGetVecAtString. unable to convert: param");
    return;
  }
  AtVector f2a_result = AiNodeGetVecAtString(f2aNode, f2aParam);
  AtPoint_to_Vec3(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetVecAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeGetPntAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetPntAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetPntAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeGetPntAtString. unable to convert: param");
    return;
  }
  AtPoint f2a_result = AiNodeGetPntAtString(f2aNode, f2aParam);
  AtPoint_to_Vec3(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetPntAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeGetPnt2AtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec2 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetPnt2AtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetPnt2AtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeGetPnt2AtString. unable to convert: param");
    return;
  }
  AtPoint2 f2a_result = AiNodeGetPnt2AtString(f2aNode, f2aParam);
  AtPoint2_to_Vec2(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetPnt2AtString")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Data _fe_AiNodeGetPtrAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetPtrAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetPtrAtString. unable to convert: node");
    return 0;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeGetPtrAtString. unable to convert: param");
    return 0;
  }
  void * f2a_result = AiNodeGetPtrAtString(f2aNode, f2aParam);
  Fabric::EDK::KL::Data _result;
  void_to_Data(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeGetPtrAtString", )
}

FABRIC_EXT_EXPORT void _fe_AiNodeGetArrayAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetArrayAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetArrayAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeGetArrayAtString. unable to convert: param");
    return;
  }
  AtArray * f2a_result = AiNodeGetArrayAtString(f2aNode, f2aParam);
  AtArray_to_KLArray(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetArrayAtString")
}

FABRIC_EXT_EXPORT void _fe_AiNodeGetStrAtString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam param
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeGetStrAtString")

  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiNodeGetStrAtString. unable to convert: node");
    return;
  }
  AtString f2aParam;
  if(!KLString_to_CPAtString(param, f2aParam)){
    setError("Error in _fe_AiNodeGetStrAtString. unable to convert: param");
    return;
  }
  AtString f2a_result = AiNodeGetStrAtString(f2aNode, f2aParam);
  char_to_String(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiNodeGetStrAtString")
}

FABRIC_EXT_EXPORT void _fe_AiBegin(
)
{
  F2A_TRY_STATEMENT("_fe_AiBegin")

  AiBegin();

  F2A_CATCH_STATEMENT("_fe_AiBegin")
}

FABRIC_EXT_EXPORT void _fe_AiEnd(
)
{
  F2A_TRY_STATEMENT("_fe_AiEnd")

  AiEnd();

  F2A_CATCH_STATEMENT("_fe_AiEnd")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiRender(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam mode
)
{
  F2A_TRY_STATEMENT("_fe_AiRender")

  int f2aMode;
  if(!SInt32_to_int(mode, f2aMode)){
    setError("Error in _fe_AiRender. unable to convert: mode");
    return 0;
  }
  int f2a_result = AiRender(f2aMode/*=AI_RENDER_MODE_CAMERA*/);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiRender", )
}

FABRIC_EXT_EXPORT void _fe_AiRenderAbort(
)
{
  F2A_TRY_STATEMENT("_fe_AiRenderAbort")

  AiRenderAbort();

  F2A_CATCH_STATEMENT("_fe_AiRenderAbort")
}

FABRIC_EXT_EXPORT void _fe_AiRenderInterrupt(
)
{
  F2A_TRY_STATEMENT("_fe_AiRenderInterrupt")

  AiRenderInterrupt();

  F2A_CATCH_STATEMENT("_fe_AiRenderInterrupt")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiRendering(
)
{
  F2A_TRY_STATEMENT("_fe_AiRendering")

  bool f2a_result = AiRendering();
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiRendering", )
}

FABRIC_EXT_EXPORT void _fe_AiLoadPlugins(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam directory
)
{
  F2A_TRY_STATEMENT("_fe_AiLoadPlugins")

  char* f2aDirectory = NULL;
  if(!String_to_char(directory, f2aDirectory)){
    setError("Error in _fe_AiLoadPlugins. unable to convert: directory");
    return;
  }
  AiLoadPlugins(f2aDirectory);

  F2A_CATCH_STATEMENT("_fe_AiLoadPlugins")
}

FABRIC_EXT_EXPORT void _fe_AiLoadPlugin(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam path
)
{
  F2A_TRY_STATEMENT("_fe_AiLoadPlugin")

  char* f2aPath = NULL;
  if(!String_to_char(path, f2aPath)){
    setError("Error in _fe_AiLoadPlugin. unable to convert: path");
    return;
  }
  AiLoadPlugin(f2aPath);

  F2A_CATCH_STATEMENT("_fe_AiLoadPlugin")
}

FABRIC_EXT_EXPORT void _fe_AiTextureParamsSetDefaults(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtTextureParams >::IOParam params
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureParamsSetDefaults")

  AtTextureParams f2aParams;
  if(!KlAtTextureParams_to_AtTextureParams(params, f2aParams)){
    setError("Error in _fe_AiTextureParamsSetDefaults. unable to convert: params");
    return;
  }
  AiTextureParamsSetDefaults(&f2aParams);
  AtTextureParams_to_KLAtTextureParams(f2aParams, params);

  F2A_CATCH_STATEMENT("_fe_AiTextureParamsSetDefaults")
}

FABRIC_EXT_EXPORT void _fe_AiTextureHandleCreate(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtTextureHandle >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureHandleCreate")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureHandleCreate. unable to convert: filename");
    return;
  }
  AtTextureHandle * f2a_result = AiTextureHandleCreate(f2aFilename);
  CPAtTextureHandle_to_KLAtTextureHandle(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiTextureHandleCreate")
}

FABRIC_EXT_EXPORT void _fe_AiTextureHandleAccess(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::INParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtTextureHandle >::IOParam handle,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtTextureParams >::INParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::IOParam success
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureHandleAccess")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiTextureHandleAccess. unable to convert: sg");
    return;
  }
  AtTextureHandle* f2aHandle = NULL;
  if(!KLAtTextureHandle_to_CPAtTextureHandle(handle, f2aHandle)){
    setError("Error in _fe_AiTextureHandleAccess. unable to convert: handle");
    return;
  }
  AtTextureParams f2aParams;
  if(!KlAtTextureParams_to_AtTextureParams(params, f2aParams)){
    setError("Error in _fe_AiTextureHandleAccess. unable to convert: params");
    return;
  }
  bool f2aSuccess;
  if(!Boolean_to_bool(success, f2aSuccess)){
    setError("Error in _fe_AiTextureHandleAccess. unable to convert: success");
    return;
  }
  AtRGBA f2a_result = AiTextureHandleAccess(f2aSg, f2aHandle, &f2aParams, &f2aSuccess/*=NULL*/);
  CPAtRGBA_to_KLColor(f2a_result, _result);  CPAtTextureHandle_to_KLAtTextureHandle(f2aHandle, handle);
  bool_to_Boolean(f2aSuccess, success);

  F2A_CATCH_STATEMENT("_fe_AiTextureHandleAccess")
}

FABRIC_EXT_EXPORT void _fe_AiTextureHandleDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtTextureHandle >::IOParam handle
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureHandleDestroy")

  AtTextureHandle* f2aHandle = NULL;
  if(!KLAtTextureHandle_to_CPAtTextureHandle(handle, f2aHandle)){
    setError("Error in _fe_AiTextureHandleDestroy. unable to convert: handle");
    return;
  }
  AiTextureHandleDestroy(f2aHandle);
  CPAtTextureHandle_to_KLAtTextureHandle(f2aHandle, handle);

  F2A_CATCH_STATEMENT("_fe_AiTextureHandleDestroy")
}

FABRIC_EXT_EXPORT void _fe_AiTextureAccess(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::INParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtTextureParams >::INParam params,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::IOParam success
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureAccess")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiTextureAccess. unable to convert: sg");
    return;
  }
  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureAccess. unable to convert: filename");
    return;
  }
  AtTextureParams f2aParams;
  if(!KlAtTextureParams_to_AtTextureParams(params, f2aParams)){
    setError("Error in _fe_AiTextureAccess. unable to convert: params");
    return;
  }
  bool f2aSuccess;
  if(!Boolean_to_bool(success, f2aSuccess)){
    setError("Error in _fe_AiTextureAccess. unable to convert: success");
    return;
  }
  AtRGBA f2a_result = AiTextureAccess(f2aSg, f2aFilename, &f2aParams, &f2aSuccess/*=NULL*/);
  CPAtRGBA_to_KLColor(f2a_result, _result);  bool_to_Boolean(f2aSuccess, success);

  F2A_CATCH_STATEMENT("_fe_AiTextureAccess")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiTextureGetResolution(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::IOParam width,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::IOParam height
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureGetResolution")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureGetResolution. unable to convert: filename");
    return 0;
  }
  unsigned int f2aWidth;
  if(!UInt32_to_unsigned_int(width, f2aWidth)){
    setError("Error in _fe_AiTextureGetResolution. unable to convert: width");
    return 0;
  }
  unsigned int f2aHeight;
  if(!UInt32_to_unsigned_int(height, f2aHeight)){
    setError("Error in _fe_AiTextureGetResolution. unable to convert: height");
    return 0;
  }
  bool f2a_result = AiTextureGetResolution(f2aFilename, &f2aWidth, &f2aHeight);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  unsigned_int_to_UInt32(f2aWidth, width);
  unsigned_int_to_UInt32(f2aHeight, height);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiTextureGetResolution", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiTextureGetNumChannels(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::IOParam num_channels
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureGetNumChannels")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureGetNumChannels. unable to convert: filename");
    return 0;
  }
  unsigned int f2aNum_channels;
  if(!UInt32_to_unsigned_int(num_channels, f2aNum_channels)){
    setError("Error in _fe_AiTextureGetNumChannels. unable to convert: num_channels");
    return 0;
  }
  bool f2a_result = AiTextureGetNumChannels(f2aFilename, &f2aNum_channels);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  unsigned_int_to_UInt32(f2aNum_channels, num_channels);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiTextureGetNumChannels", )
}

FABRIC_EXT_EXPORT void _fe_AiTextureGetChannelName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam channel_index
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureGetChannelName")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureGetChannelName. unable to convert: filename");
    return;
  }
  unsigned int f2aChannel_index;
  if(!UInt32_to_unsigned_int(channel_index, f2aChannel_index)){
    setError("Error in _fe_AiTextureGetChannelName. unable to convert: channel_index");
    return;
  }
  const char * f2a_result = AiTextureGetChannelName(f2aFilename, f2aChannel_index);
  char_to_String(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiTextureGetChannelName")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiTextureGetFormat(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::IOParam format
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureGetFormat")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureGetFormat. unable to convert: filename");
    return 0;
  }
  unsigned int f2aFormat;
  if(!UInt32_to_unsigned_int(format, f2aFormat)){
    setError("Error in _fe_AiTextureGetFormat. unable to convert: format");
    return 0;
  }
  bool f2a_result = AiTextureGetFormat(f2aFilename, &f2aFormat);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  unsigned_int_to_UInt32(f2aFormat, format);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiTextureGetFormat", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiTextureGetBitDepth(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::IOParam bit_depth
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureGetBitDepth")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureGetBitDepth. unable to convert: filename");
    return 0;
  }
  unsigned int f2aBit_depth;
  if(!UInt32_to_unsigned_int(bit_depth, f2aBit_depth)){
    setError("Error in _fe_AiTextureGetBitDepth. unable to convert: bit_depth");
    return 0;
  }
  bool f2a_result = AiTextureGetBitDepth(f2aFilename, &f2aBit_depth);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  unsigned_int_to_UInt32(f2aBit_depth, bit_depth);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiTextureGetBitDepth", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiTextureGetMatrices(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat44 >::INParam world_to_screen,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat44 >::INParam world_to_camera
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureGetMatrices")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureGetMatrices. unable to convert: filename");
    return 0;
  }
  AtMatrix f2aWorld_to_screen;
  if(!Mat44_to_AtMatrix(world_to_screen, f2aWorld_to_screen)){
    setError("Error in _fe_AiTextureGetMatrices. unable to convert: world_to_screen");
    return 0;
  }
  AtMatrix f2aWorld_to_camera;
  if(!Mat44_to_AtMatrix(world_to_camera, f2aWorld_to_camera)){
    setError("Error in _fe_AiTextureGetMatrices. unable to convert: world_to_camera");
    return 0;
  }
  bool f2a_result = AiTextureGetMatrices(f2aFilename, f2aWorld_to_screen, f2aWorld_to_camera);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiTextureGetMatrices", )
}

FABRIC_EXT_EXPORT void _fe_AiTextureInvalidate(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename
)
{
  F2A_TRY_STATEMENT("_fe_AiTextureInvalidate")

  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_AiTextureInvalidate. unable to convert: filename");
    return;
  }
  AiTextureInvalidate(f2aFilename);

  F2A_CATCH_STATEMENT("_fe_AiTextureInvalidate")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiUniverseIsActive(
)
{
  F2A_TRY_STATEMENT("_fe_AiUniverseIsActive")

  bool f2a_result = AiUniverseIsActive();
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiUniverseIsActive", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiUniverseCacheFlush(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam cache_flags
)
{
  F2A_TRY_STATEMENT("_fe_AiUniverseCacheFlush")

  int f2aCache_flags;
  if(!SInt32_to_int(cache_flags, f2aCache_flags)){
    setError("Error in _fe_AiUniverseCacheFlush. unable to convert: cache_flags");
    return 0;
  }
  bool f2a_result = AiUniverseCacheFlush(f2aCache_flags);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiUniverseCacheFlush", )
}

FABRIC_EXT_EXPORT void _fe_AiUniverseGetOptions(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::Result _result
)
{
  F2A_TRY_STATEMENT("_fe_AiUniverseGetOptions")

  AtNode * f2a_result = AiUniverseGetOptions();
  CPAtNode_to_KLAtNode(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiUniverseGetOptions")
}

FABRIC_EXT_EXPORT void _fe_AiUniverseGetCamera(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::Result _result
)
{
  F2A_TRY_STATEMENT("_fe_AiUniverseGetCamera")

  AtNode * f2a_result = AiUniverseGetCamera();
  CPAtNode_to_KLAtNode(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiUniverseGetCamera")
}

FABRIC_EXT_EXPORT void _fe_AiUniverseGetSceneBounds(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Box3 >::Result _result
)
{
  F2A_TRY_STATEMENT("_fe_AiUniverseGetSceneBounds")

  AtBBox f2a_result = AiUniverseGetSceneBounds();
  AtBBox_to_Box3(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiUniverseGetSceneBounds")
}

FABRIC_EXT_EXPORT void _fe_AiUniverseGetNodeIterator(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeIterator >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam node_mask
)
{
  F2A_TRY_STATEMENT("_fe_AiUniverseGetNodeIterator")

  unsigned int f2aNode_mask;
  if(!UInt32_to_unsigned_int(node_mask, f2aNode_mask)){
    setError("Error in _fe_AiUniverseGetNodeIterator. unable to convert: node_mask");
    return;
  }
  AtNodeIterator * f2a_result = AiUniverseGetNodeIterator(f2aNode_mask);
  CPAtNodeIterator_to_KLAtNodeIterator(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiUniverseGetNodeIterator")
}

FABRIC_EXT_EXPORT void _fe_AiUniverseGetNodeEntryIterator(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntryIterator >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam node_mask
)
{
  F2A_TRY_STATEMENT("_fe_AiUniverseGetNodeEntryIterator")

  unsigned int f2aNode_mask;
  if(!UInt32_to_unsigned_int(node_mask, f2aNode_mask)){
    setError("Error in _fe_AiUniverseGetNodeEntryIterator. unable to convert: node_mask");
    return;
  }
  AtNodeEntryIterator * f2a_result = AiUniverseGetNodeEntryIterator(f2aNode_mask);
  CPAtNodeEntryIterator_to_KLAtNodeEntryIterator(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiUniverseGetNodeEntryIterator")
}

FABRIC_EXT_EXPORT void _fe_AiUniverseGetAOVIterator(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtAOVIterator >::Result _result
)
{
  F2A_TRY_STATEMENT("_fe_AiUniverseGetAOVIterator")

  AtAOVIterator * f2a_result = AiUniverseGetAOVIterator();
  CPAtAOVIterator_to_KLAtAOVIterator(f2a_result, _result);
  F2A_CATCH_STATEMENT("_fe_AiUniverseGetAOVIterator")
}

FABRIC_EXT_EXPORT void _fe_AiNodeIteratorDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeIteratorDestroy")

  AtNodeIterator* f2aIter = NULL;
  if(!KLAtNodeIterator_to_CPAtNodeIterator(iter, f2aIter)){
    setError("Error in _fe_AiNodeIteratorDestroy. unable to convert: iter");
    return;
  }
  AiNodeIteratorDestroy(f2aIter);
  CPAtNodeIterator_to_KLAtNodeIterator(f2aIter, iter);

  F2A_CATCH_STATEMENT("_fe_AiNodeIteratorDestroy")
}

FABRIC_EXT_EXPORT void _fe_AiNodeIteratorGetNext(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeIteratorGetNext")

  AtNodeIterator* f2aIter = NULL;
  if(!KLAtNodeIterator_to_CPAtNodeIterator(iter, f2aIter)){
    setError("Error in _fe_AiNodeIteratorGetNext. unable to convert: iter");
    return;
  }
  AtNode * f2a_result = AiNodeIteratorGetNext(f2aIter);
  CPAtNode_to_KLAtNode(f2a_result, _result);  CPAtNodeIterator_to_KLAtNodeIterator(f2aIter, iter);

  F2A_CATCH_STATEMENT("_fe_AiNodeIteratorGetNext")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeIteratorFinished(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeIterator >::INParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeIteratorFinished")

  AtNodeIterator* f2aIter = NULL;
  if(!KLAtNodeIterator_to_CPAtNodeIterator(iter, f2aIter)){
    setError("Error in _fe_AiNodeIteratorFinished. unable to convert: iter");
    return 0;
  }
  bool f2a_result = AiNodeIteratorFinished(f2aIter);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeIteratorFinished", )
}

FABRIC_EXT_EXPORT void _fe_AiNodeEntryIteratorDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntryIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryIteratorDestroy")

  AtNodeEntryIterator* f2aIter = NULL;
  if(!KLAtNodeEntryIterator_to_CPAtNodeEntryIterator(iter, f2aIter)){
    setError("Error in _fe_AiNodeEntryIteratorDestroy. unable to convert: iter");
    return;
  }
  AiNodeEntryIteratorDestroy(f2aIter);
  CPAtNodeEntryIterator_to_KLAtNodeEntryIterator(f2aIter, iter);

  F2A_CATCH_STATEMENT("_fe_AiNodeEntryIteratorDestroy")
}

FABRIC_EXT_EXPORT void _fe_AiNodeEntryIteratorGetNext(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntryIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryIteratorGetNext")

  AtNodeEntryIterator* f2aIter = NULL;
  if(!KLAtNodeEntryIterator_to_CPAtNodeEntryIterator(iter, f2aIter)){
    setError("Error in _fe_AiNodeEntryIteratorGetNext. unable to convert: iter");
    return;
  }
  AtNodeEntry * f2a_result = AiNodeEntryIteratorGetNext(f2aIter);
  CPAtNodeEntry_to_KLAtNodeEntry(f2a_result, _result);  CPAtNodeEntryIterator_to_KLAtNodeEntryIterator(f2aIter, iter);

  F2A_CATCH_STATEMENT("_fe_AiNodeEntryIteratorGetNext")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiNodeEntryIteratorFinished(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNodeEntryIterator >::INParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiNodeEntryIteratorFinished")

  AtNodeEntryIterator* f2aIter = NULL;
  if(!KLAtNodeEntryIterator_to_CPAtNodeEntryIterator(iter, f2aIter)){
    setError("Error in _fe_AiNodeEntryIteratorFinished. unable to convert: iter");
    return 0;
  }
  bool f2a_result = AiNodeEntryIteratorFinished(f2aIter);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiNodeEntryIteratorFinished", )
}

FABRIC_EXT_EXPORT void _fe_AiAOVIteratorDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtAOVIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiAOVIteratorDestroy")

  AtAOVIterator* f2aIter = NULL;
  if(!KLAtAOVIterator_to_CPAtAOVIterator(iter, f2aIter)){
    setError("Error in _fe_AiAOVIteratorDestroy. unable to convert: iter");
    return;
  }
  AiAOVIteratorDestroy(f2aIter);
  CPAtAOVIterator_to_KLAtAOVIterator(f2aIter, iter);

  F2A_CATCH_STATEMENT("_fe_AiAOVIteratorDestroy")
}

FABRIC_EXT_EXPORT void _fe_AiAOVIteratorGetNext(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtAOVEntry >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtAOVIterator >::IOParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiAOVIteratorGetNext")

  AtAOVIterator* f2aIter = NULL;
  if(!KLAtAOVIterator_to_CPAtAOVIterator(iter, f2aIter)){
    setError("Error in _fe_AiAOVIteratorGetNext. unable to convert: iter");
    return;
  }
  const AtAOVEntry * f2a_result = AiAOVIteratorGetNext(f2aIter);
  AtAOVEntry_to_KLAtAOVEntry(f2a_result, _result);  CPAtAOVIterator_to_KLAtAOVIterator(f2aIter, iter);

  F2A_CATCH_STATEMENT("_fe_AiAOVIteratorGetNext")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiAOVIteratorFinished(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtAOVIterator >::INParam iter
)
{
  F2A_TRY_STATEMENT("_fe_AiAOVIteratorFinished")

  AtAOVIterator* f2aIter = NULL;
  if(!KLAtAOVIterator_to_CPAtAOVIterator(iter, f2aIter)){
    setError("Error in _fe_AiAOVIteratorFinished. unable to convert: iter");
    return 0;
  }
  bool f2a_result = AiAOVIteratorFinished(f2aIter);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiAOVIteratorFinished", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt8 _fe_AiShaderEvalParamFuncByte(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pid
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderEvalParamFuncByte")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiShaderEvalParamFuncByte. unable to convert: sg");
    return 0;
  }
  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiShaderEvalParamFuncByte. unable to convert: node");
    return 0;
  }
  int f2aPid;
  if(!SInt32_to_int(pid, f2aPid)){
    setError("Error in _fe_AiShaderEvalParamFuncByte. unable to convert: pid");
    return 0;
  }
  AtByte f2a_result = AiShaderEvalParamFuncByte(f2aSg, f2aNode, f2aPid);
  Fabric::EDK::KL::UInt8 _result;
  AtByte_to_UInt8(f2a_result, _result);
  AtShaderGlobals_to_KLAtShaderGlobals(f2aSg, sg);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiShaderEvalParamFuncByte", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiShaderEvalParamFuncInt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pid
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderEvalParamFuncInt")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiShaderEvalParamFuncInt. unable to convert: sg");
    return 0;
  }
  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiShaderEvalParamFuncInt. unable to convert: node");
    return 0;
  }
  int f2aPid;
  if(!SInt32_to_int(pid, f2aPid)){
    setError("Error in _fe_AiShaderEvalParamFuncInt. unable to convert: pid");
    return 0;
  }
  int f2a_result = AiShaderEvalParamFuncInt(f2aSg, f2aNode, f2aPid);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);
  AtShaderGlobals_to_KLAtShaderGlobals(f2aSg, sg);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiShaderEvalParamFuncInt", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 _fe_AiShaderEvalParamFuncUInt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pid
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderEvalParamFuncUInt")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiShaderEvalParamFuncUInt. unable to convert: sg");
    return 0;
  }
  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiShaderEvalParamFuncUInt. unable to convert: node");
    return 0;
  }
  int f2aPid;
  if(!SInt32_to_int(pid, f2aPid)){
    setError("Error in _fe_AiShaderEvalParamFuncUInt. unable to convert: pid");
    return 0;
  }
  unsigned int f2a_result = AiShaderEvalParamFuncUInt(f2aSg, f2aNode, f2aPid);
  Fabric::EDK::KL::UInt32 _result;
  unsigned_int_to_UInt32(f2a_result, _result);
  AtShaderGlobals_to_KLAtShaderGlobals(f2aSg, sg);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiShaderEvalParamFuncUInt", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiShaderEvalParamFuncBool(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pid
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderEvalParamFuncBool")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiShaderEvalParamFuncBool. unable to convert: sg");
    return 0;
  }
  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiShaderEvalParamFuncBool. unable to convert: node");
    return 0;
  }
  int f2aPid;
  if(!SInt32_to_int(pid, f2aPid)){
    setError("Error in _fe_AiShaderEvalParamFuncBool. unable to convert: pid");
    return 0;
  }
  bool f2a_result = AiShaderEvalParamFuncBool(f2aSg, f2aNode, f2aPid);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtShaderGlobals_to_KLAtShaderGlobals(f2aSg, sg);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiShaderEvalParamFuncBool", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Float32 _fe_AiShaderEvalParamFuncFlt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pid
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderEvalParamFuncFlt")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiShaderEvalParamFuncFlt. unable to convert: sg");
    return 0;
  }
  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiShaderEvalParamFuncFlt. unable to convert: node");
    return 0;
  }
  int f2aPid;
  if(!SInt32_to_int(pid, f2aPid)){
    setError("Error in _fe_AiShaderEvalParamFuncFlt. unable to convert: pid");
    return 0;
  }
  float f2a_result = AiShaderEvalParamFuncFlt(f2aSg, f2aNode, f2aPid);
  Fabric::EDK::KL::Float32 _result;
  float_to_Float32(f2a_result, _result);
  AtShaderGlobals_to_KLAtShaderGlobals(f2aSg, sg);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiShaderEvalParamFuncFlt", )
}

FABRIC_EXT_EXPORT void _fe_AiShaderEvalParamFuncRGB(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pid
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderEvalParamFuncRGB")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiShaderEvalParamFuncRGB. unable to convert: sg");
    return;
  }
  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiShaderEvalParamFuncRGB. unable to convert: node");
    return;
  }
  int f2aPid;
  if(!SInt32_to_int(pid, f2aPid)){
    setError("Error in _fe_AiShaderEvalParamFuncRGB. unable to convert: pid");
    return;
  }
  AtColor f2a_result = AiShaderEvalParamFuncRGB(f2aSg, f2aNode, f2aPid);
  CPAtColor_to_KLColor(f2a_result, _result);  AtShaderGlobals_to_KLAtShaderGlobals(f2aSg, sg);

  F2A_CATCH_STATEMENT("_fe_AiShaderEvalParamFuncRGB")
}

FABRIC_EXT_EXPORT void _fe_AiShaderEvalParamFuncRGBA(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Color >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pid
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderEvalParamFuncRGBA")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiShaderEvalParamFuncRGBA. unable to convert: sg");
    return;
  }
  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiShaderEvalParamFuncRGBA. unable to convert: node");
    return;
  }
  int f2aPid;
  if(!SInt32_to_int(pid, f2aPid)){
    setError("Error in _fe_AiShaderEvalParamFuncRGBA. unable to convert: pid");
    return;
  }
  AtRGBA f2a_result = AiShaderEvalParamFuncRGBA(f2aSg, f2aNode, f2aPid);
  CPAtRGBA_to_KLColor(f2a_result, _result);  AtShaderGlobals_to_KLAtShaderGlobals(f2aSg, sg);

  F2A_CATCH_STATEMENT("_fe_AiShaderEvalParamFuncRGBA")
}

FABRIC_EXT_EXPORT void _fe_AiShaderEvalParamFuncVec(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pid
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderEvalParamFuncVec")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiShaderEvalParamFuncVec. unable to convert: sg");
    return;
  }
  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiShaderEvalParamFuncVec. unable to convert: node");
    return;
  }
  int f2aPid;
  if(!SInt32_to_int(pid, f2aPid)){
    setError("Error in _fe_AiShaderEvalParamFuncVec. unable to convert: pid");
    return;
  }
  AtVector f2a_result = AiShaderEvalParamFuncVec(f2aSg, f2aNode, f2aPid);
  AtPoint_to_Vec3(f2a_result, _result);  AtShaderGlobals_to_KLAtShaderGlobals(f2aSg, sg);

  F2A_CATCH_STATEMENT("_fe_AiShaderEvalParamFuncVec")
}

FABRIC_EXT_EXPORT void _fe_AiShaderEvalParamFuncPnt(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pid
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderEvalParamFuncPnt")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiShaderEvalParamFuncPnt. unable to convert: sg");
    return;
  }
  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiShaderEvalParamFuncPnt. unable to convert: node");
    return;
  }
  int f2aPid;
  if(!SInt32_to_int(pid, f2aPid)){
    setError("Error in _fe_AiShaderEvalParamFuncPnt. unable to convert: pid");
    return;
  }
  AtPoint f2a_result = AiShaderEvalParamFuncPnt(f2aSg, f2aNode, f2aPid);
  AtPoint_to_Vec3(f2a_result, _result);  AtShaderGlobals_to_KLAtShaderGlobals(f2aSg, sg);

  F2A_CATCH_STATEMENT("_fe_AiShaderEvalParamFuncPnt")
}

FABRIC_EXT_EXPORT void _fe_AiShaderEvalParamFuncPnt2(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec2 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pid
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderEvalParamFuncPnt2")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiShaderEvalParamFuncPnt2. unable to convert: sg");
    return;
  }
  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiShaderEvalParamFuncPnt2. unable to convert: node");
    return;
  }
  int f2aPid;
  if(!SInt32_to_int(pid, f2aPid)){
    setError("Error in _fe_AiShaderEvalParamFuncPnt2. unable to convert: pid");
    return;
  }
  AtPoint2 f2a_result = AiShaderEvalParamFuncPnt2(f2aSg, f2aNode, f2aPid);
  AtPoint2_to_Vec2(f2a_result, _result);  AtShaderGlobals_to_KLAtShaderGlobals(f2aSg, sg);

  F2A_CATCH_STATEMENT("_fe_AiShaderEvalParamFuncPnt2")
}

FABRIC_EXT_EXPORT void _fe_AiShaderEvalParamFuncStr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pid
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderEvalParamFuncStr")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiShaderEvalParamFuncStr. unable to convert: sg");
    return;
  }
  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiShaderEvalParamFuncStr. unable to convert: node");
    return;
  }
  int f2aPid;
  if(!SInt32_to_int(pid, f2aPid)){
    setError("Error in _fe_AiShaderEvalParamFuncStr. unable to convert: pid");
    return;
  }
  const char * f2a_result = AiShaderEvalParamFuncStr(f2aSg, f2aNode, f2aPid);
  char_to_String(f2a_result, _result);  AtShaderGlobals_to_KLAtShaderGlobals(f2aSg, sg);

  F2A_CATCH_STATEMENT("_fe_AiShaderEvalParamFuncStr")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Data _fe_AiShaderEvalParamFuncPtr(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pid
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderEvalParamFuncPtr")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiShaderEvalParamFuncPtr. unable to convert: sg");
    return 0;
  }
  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiShaderEvalParamFuncPtr. unable to convert: node");
    return 0;
  }
  int f2aPid;
  if(!SInt32_to_int(pid, f2aPid)){
    setError("Error in _fe_AiShaderEvalParamFuncPtr. unable to convert: pid");
    return 0;
  }
  void * f2a_result = AiShaderEvalParamFuncPtr(f2aSg, f2aNode, f2aPid);
  Fabric::EDK::KL::Data _result;
  void_to_Data(f2a_result, _result);
  AtShaderGlobals_to_KLAtShaderGlobals(f2aSg, sg);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiShaderEvalParamFuncPtr", )
}

FABRIC_EXT_EXPORT void _fe_AiShaderEvalParamFuncArray(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtArray >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pid
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderEvalParamFuncArray")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiShaderEvalParamFuncArray. unable to convert: sg");
    return;
  }
  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiShaderEvalParamFuncArray. unable to convert: node");
    return;
  }
  int f2aPid;
  if(!SInt32_to_int(pid, f2aPid)){
    setError("Error in _fe_AiShaderEvalParamFuncArray. unable to convert: pid");
    return;
  }
  AtArray * f2a_result = AiShaderEvalParamFuncArray(f2aSg, f2aNode, f2aPid);
  AtArray_to_KLArray(f2a_result, _result);  AtShaderGlobals_to_KLAtShaderGlobals(f2aSg, sg);

  F2A_CATCH_STATEMENT("_fe_AiShaderEvalParamFuncArray")
}

FABRIC_EXT_EXPORT void _fe_AiShaderEvalParamFuncMtx(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat44 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pid
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderEvalParamFuncMtx")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiShaderEvalParamFuncMtx. unable to convert: sg");
    return;
  }
  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiShaderEvalParamFuncMtx. unable to convert: node");
    return;
  }
  int f2aPid;
  if(!SInt32_to_int(pid, f2aPid)){
    setError("Error in _fe_AiShaderEvalParamFuncMtx. unable to convert: pid");
    return;
  }
  AtMatrix * f2a_result = AiShaderEvalParamFuncMtx(f2aSg, f2aNode, f2aPid);
  AtMatrix_to_Mat44(*f2a_result, _result);  AtShaderGlobals_to_KLAtShaderGlobals(f2aSg, sg);

  F2A_CATCH_STATEMENT("_fe_AiShaderEvalParamFuncMtx")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 _fe_AiShaderEvalParamFuncEnum(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sg,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam node,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam pid
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderEvalParamFuncEnum")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiShaderEvalParamFuncEnum. unable to convert: sg");
    return 0;
  }
  AtNode* f2aNode = NULL;
  if(!KLAtNode_to_CPAtNode(node, f2aNode)){
    setError("Error in _fe_AiShaderEvalParamFuncEnum. unable to convert: node");
    return 0;
  }
  int f2aPid;
  if(!SInt32_to_int(pid, f2aPid)){
    setError("Error in _fe_AiShaderEvalParamFuncEnum. unable to convert: pid");
    return 0;
  }
  int f2a_result = AiShaderEvalParamFuncEnum(f2aSg, f2aNode, f2aPid);
  Fabric::EDK::KL::SInt32 _result;
  int_to_SInt32(f2a_result, _result);
  AtShaderGlobals_to_KLAtShaderGlobals(f2aSg, sg);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiShaderEvalParamFuncEnum", )
}

FABRIC_EXT_EXPORT void _fe_SetAtDisplayCallback(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtNode >::INParam displayDriver,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtDisplayCallback >::INParam callback
)
{
  F2A_TRY_STATEMENT("_fe_SetAtDisplayCallback")

  AtNode* f2aDisplayDriver = NULL;
  if(!KLAtNode_to_CPAtNode(displayDriver, f2aDisplayDriver)){
    setError("Error in _fe_SetAtDisplayCallback. unable to convert: displayDriver");
    return;
  }
  AtDisplayCallback f2aCallback;
  if(!KlAtDisplayCallback_to_AtDisplayCallback(callback, f2aCallback)){
    setError("Error in _fe_SetAtDisplayCallback. unable to convert: callback");
    return;
  }
  SetDisplayDriverNode(f2aDisplayDriver);
  AiNodeSetPtr(f2aDisplayDriver, "callback", (void*)f2aCallback);

  F2A_CATCH_STATEMENT("_fe_SetAtDisplayCallback")
}

FABRIC_EXT_EXPORT void _fe_AiShaderGlobals(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::Result _result
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderGlobals")

  AtShaderGlobals* f2a_result = AiShaderGlobals();
  F2A_CATCH_STATEMENT("_fe_AiShaderGlobals")
}

FABRIC_EXT_EXPORT void _fe_AiShaderGlobalsDestroy(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sg
)
{
  F2A_TRY_STATEMENT("_fe_AiShaderGlobalsDestroy")

  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiShaderGlobalsDestroy. unable to convert: sg");
    return;
  }
  AiShaderGlobalsDestroy(f2aSg);  AtShaderGlobals_to_KLAtShaderGlobals(f2aSg, sg);

  F2A_CATCH_STATEMENT("_fe_AiShaderGlobalsDestroy")
}

FABRIC_EXT_EXPORT void _fe_GetParentAtShaderGlobals(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::INParam globals
)
{
  F2A_TRY_STATEMENT("_fe_GetParentAtShaderGlobals")

  AtShaderGlobals* f2aGlobals = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(globals, f2aGlobals)){
    setError("Error in _fe_GetParentAtShaderGlobals. unable to convert: globals");
    return;
  }
  const AtShaderGlobals* f2a_result = f2aGlobals->psg;
  F2A_CATCH_STATEMENT("_fe_GetParentAtShaderGlobals")
}

FABRIC_EXT_EXPORT void _fe_AiMakeRay(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtRay >::IOParam ray,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam type,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam origin,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam dir,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam maxdist,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::INParam sg
)
{
  F2A_TRY_STATEMENT("_fe_AiMakeRay")

  AtRay f2aRay;
  if(!KlAtRay_to_AtRay(ray, f2aRay)){
    setError("Error in _fe_AiMakeRay. unable to convert: ray");
    return;
  }
  unsigned int f2aType;
  if(!UInt32_to_unsigned_int(type, f2aType)){
    setError("Error in _fe_AiMakeRay. unable to convert: type");
    return;
  }
  AtPoint f2aOrigin;
  if(!Vec3_to_AtPoint(origin, f2aOrigin)){
    setError("Error in _fe_AiMakeRay. unable to convert: origin");
    return;
  }
  AtPoint f2aDir;
  if(!Vec3_to_AtPoint(dir, f2aDir)){
    setError("Error in _fe_AiMakeRay. unable to convert: dir");
    return;
  }
  double f2aMaxdist;
  if(!Float64_to_double(maxdist, f2aMaxdist)){
    setError("Error in _fe_AiMakeRay. unable to convert: maxdist");
    return;
  }
  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiMakeRay. unable to convert: sg");
    return;
  }
  AiMakeRay(&f2aRay, f2aType, &f2aOrigin, &f2aDir, f2aMaxdist, f2aSg);
  AtRay_to_KLAtRay(f2aRay, ray);

  F2A_CATCH_STATEMENT("_fe_AiMakeRay")
}

FABRIC_EXT_EXPORT void _fe_AiReflectRay(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtRay >::IOParam ray,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam normal,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::INParam sg
)
{
  F2A_TRY_STATEMENT("_fe_AiReflectRay")

  AtRay f2aRay;
  if(!KlAtRay_to_AtRay(ray, f2aRay)){
    setError("Error in _fe_AiReflectRay. unable to convert: ray");
    return;
  }
  AtPoint f2aNormal;
  if(!Vec3_to_AtPoint(normal, f2aNormal)){
    setError("Error in _fe_AiReflectRay. unable to convert: normal");
    return;
  }
  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiReflectRay. unable to convert: sg");
    return;
  }
  AiReflectRay(&f2aRay, &f2aNormal, f2aSg);
  AtRay_to_KLAtRay(f2aRay, ray);

  F2A_CATCH_STATEMENT("_fe_AiReflectRay")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiRefractRay(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtRay >::IOParam ray,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::INParam normal,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam n1,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float32 >::INParam n2,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::INParam sg
)
{
  F2A_TRY_STATEMENT("_fe_AiRefractRay")

  AtRay f2aRay;
  if(!KlAtRay_to_AtRay(ray, f2aRay)){
    setError("Error in _fe_AiRefractRay. unable to convert: ray");
    return 0;
  }
  AtPoint f2aNormal;
  if(!Vec3_to_AtPoint(normal, f2aNormal)){
    setError("Error in _fe_AiRefractRay. unable to convert: normal");
    return 0;
  }
  float f2aN1;
  if(!Float32_to_float(n1, f2aN1)){
    setError("Error in _fe_AiRefractRay. unable to convert: n1");
    return 0;
  }
  float f2aN2;
  if(!Float32_to_float(n2, f2aN2)){
    setError("Error in _fe_AiRefractRay. unable to convert: n2");
    return 0;
  }
  AtShaderGlobals* f2aSg = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sg, f2aSg)){
    setError("Error in _fe_AiRefractRay. unable to convert: sg");
    return 0;
  }
  bool f2a_result = AiRefractRay(&f2aRay, &f2aNormal, f2aN1, f2aN2, f2aSg);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtRay_to_KLAtRay(f2aRay, ray);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiRefractRay", )
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiTrace(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtRay >::INParam ray,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtScrSample >::IOParam sample
)
{
  F2A_TRY_STATEMENT("_fe_AiTrace")

  AtRay f2aRay;
  if(!KlAtRay_to_AtRay(ray, f2aRay)){
    setError("Error in _fe_AiTrace. unable to convert: ray");
    return 0;
  }
  AtScrSample* f2aSample = NULL;
  if(!KLAtScrSample_to_CPAtScrSample(sample, f2aSample)){
    setError("Error in _fe_AiTrace. unable to convert: sample");
    return 0;
  }
  bool f2a_result = AiTrace(&f2aRay, f2aSample);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  CPAtScrSample_to_KLAtScrSample(f2aSample, sample);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiTrace", )
}

FABRIC_EXT_EXPORT void _fe_AiTraceBackground(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtRay >::INParam ray,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtScrSample >::IOParam sample
)
{
  F2A_TRY_STATEMENT("_fe_AiTraceBackground")

  AtRay f2aRay;
  if(!KlAtRay_to_AtRay(ray, f2aRay)){
    setError("Error in _fe_AiTraceBackground. unable to convert: ray");
    return;
  }
  AtScrSample* f2aSample = NULL;
  if(!KLAtScrSample_to_CPAtScrSample(sample, f2aSample)){
    setError("Error in _fe_AiTraceBackground. unable to convert: sample");
    return;
  }
  AiTraceBackground(&f2aRay, f2aSample);
  CPAtScrSample_to_KLAtScrSample(f2aSample, sample);

  F2A_CATCH_STATEMENT("_fe_AiTraceBackground")
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean _fe_AiTraceProbe(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtRay >::INParam ray,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AtShaderGlobals >::IOParam sgout
)
{
  F2A_TRY_STATEMENT("_fe_AiTraceProbe")

  AtRay f2aRay;
  if(!KlAtRay_to_AtRay(ray, f2aRay)){
    setError("Error in _fe_AiTraceProbe. unable to convert: ray");
    return 0;
  }
  AtShaderGlobals* f2aSgout = NULL;
  if(!KlAtShaderGlobals_to_AtShaderGlobals(sgout, f2aSgout)){
    setError("Error in _fe_AiTraceProbe. unable to convert: sgout");
    return 0;
  }
  bool f2a_result = AiTraceProbe(&f2aRay, f2aSgout);
  Fabric::EDK::KL::Boolean _result;
  bool_to_Boolean(f2a_result, _result);
  AtShaderGlobals_to_KLAtShaderGlobals(f2aSgout, sgout);

  F2A_CATCH_STATEMENT_RETURN("_fe_AiTraceProbe", )
}

FABRIC_EXT_EXPORT void _fe_a2fRegisterPlugin(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam type,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt8 >::INParam output_type,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam filename
)
{
  F2A_TRY_STATEMENT("_fe_a2fRegisterPlugin")

  int f2aType;
  if(!SInt32_to_int(type, f2aType)){
    setError("Error in _fe_a2fRegisterPlugin. unable to convert: type");
    return;
  }
  AtByte f2aOutput_type;
  if(!UInt8_to_AtByte(output_type, f2aOutput_type)){
    setError("Error in _fe_a2fRegisterPlugin. unable to convert: output_type");
    return;
  }
  char* f2aName = NULL;
  if(!String_to_char(name, f2aName)){
    setError("Error in _fe_a2fRegisterPlugin. unable to convert: name");
    return;
  }
  char* f2aFilename = NULL;
  if(!String_to_char(filename, f2aFilename)){
    setError("Error in _fe_a2fRegisterPlugin. unable to convert: filename");
    return;
  }
  RegisterPlugin(f2aType, f2aOutput_type, f2aName, f2aFilename);
  F2A_CATCH_STATEMENT("_fe_a2fRegisterPlugin")
}

FABRIC_EXT_EXPORT void _fe_a2fRegisterManager(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ArnoldKLPluginIMgr >::IOParam mgr
)
{
  F2A_TRY_STATEMENT("_fe_a2fRegisterManager")

  RegisterKLMgr(mgr);

  F2A_CATCH_STATEMENT("_fe_a2fRegisterManager")
}

FABRIC_EXT_EXPORT void _fe_a2fReleaseManager(
)
{
  F2A_TRY_STATEMENT("_fe_a2fReleaseManager")

  ReleaseKLMgr();

  F2A_CATCH_STATEMENT("_fe_a2fReleaseManager")
}
