/**
 * A lot of functions in Arnold were named with an AtString post-fix for some reason
 * In C++ these functions had convenience functions to allow calling withtout the postfix
 * This wrapper does essentially the same thing (creates nice names for these functions)
 */

 require Fabric2Arnold;

/**
E:\dev\OpusTech\fabric2arnold\stage\Fabric2Arnold\ai_metadata.kl:
*/

function Boolean AiMetaDataGetBool(AtNodeEntry entry, String param, String name, io Boolean value) { return AiMetaDataGetBoolAtString(entry, param, name, value); }
function Boolean AiMetaDataGetInt(AtNodeEntry entry, String param, String name, io SInt32 value)  { return AiMetaDataGetIntAtString(entry, param, name, value); }
function Boolean AiMetaDataGetFlt(AtNodeEntry entry, String param, String name, io Float32 value) { return AiMetaDataGetFltAtString(entry, param, name, value); }
function Boolean AiMetaDataGetRGB(AtNodeEntry entry, String param, String name, io Color value)     { return AiMetaDataGetRGBAtString(entry, param, name, value); }
function Boolean AiMetaDataGetVec(AtNodeEntry entry, String param, String name, io Vec3 value)    { return AiMetaDataGetVecAtString(entry, param, name, value); }
function Boolean AiMetaDataGetPnt(AtNodeEntry entry, String param, String name, io Vec3 value)    { return AiMetaDataGetPntAtString(entry, param, name, value); }
function Boolean AiMetaDataGetPnt2(AtNodeEntry entry, String param, String name, io Vec2 value)   { return AiMetaDataGetPnt2AtString(entry, param, name, value); }
function Boolean AiMetaDataGetStr(AtNodeEntry entry, String param, String name, String value)     { return AiMetaDataGetStrAtString(entry, param, name, value); }

/**
OpusTech\fabric2arnold\stage\Fabric2Arnold\ai_node_entry.kl:
*/

function AtNodeEntry AiNodeEntryLookUp(String name) { return AiNodeEntryLookUpAtString(name); }
function AtParamEntry AiNodeEntryLookUpParameter(AtNodeEntry nentry, String param) { return AiNodeEntryLookUpParameterAtString(nentry, param); }

/**
OpusTech\fabric2arnold\stage\Fabric2Arnold\ai_nodes.kl:
*/

function AtNode AiNode(String name) { return AiNodeAtString(name); }
function AtNode AiNodeLookUpByName(String name) { return AiNodeLookUpByNameAtString(name); }

function Boolean AiNodeDeclare(io AtNode node, String param, String declaration) { return AiNodeDeclareAtString(node, param, declaration); }
function AtUserParamEntry AiNodeLookUpUserParameter(AtNode node, String param) { return AiNodeLookUpUserParameterAtString(node, param); }

function AiNodeSetByte(io AtNode node, String param, UInt8 val)  { AiNodeSetByteAtString(node, param, val); }
function AiNodeSetInt(io AtNode node, String param, SInt32 val)  { AiNodeSetIntAtString(node, param, val); }
function AiNodeSetUInt(io AtNode node, String param, UInt32 val)  { AiNodeSetUIntAtString(node, param, val); }
function AiNodeSetBool(io AtNode node, String param, Boolean val)  { AiNodeSetBoolAtString(node, param, val); }
function AiNodeSetFlt(io AtNode node, String param, Float32 val)  { AiNodeSetFltAtString(node, param, val); }
function AiNodeSetPtr(io AtNode node, String param, io Data val)  { AiNodeSetPtrAtString(node, param, val); }
function AiNodeSetArray(io AtNode node, String param, io AtArray val)  { AiNodeSetArrayAtString(node, param, val); }
function AiNodeSetMatrix(io AtNode node, String param, Mat44 val)  { AiNodeSetMatrixAtString(node, param, val); }
function AiNodeSetStr(io AtNode node, String param, String str)  { AiNodeSetStrAtString(node, param, str); }
function AiNodeSetRGB(io AtNode node, String param, Float32 r, Float32 g, Float32 b)  { AiNodeSetRGBAtString(node, param, r, g, b); }
function AiNodeSetRGBA(io AtNode node, String param, Float32 r, Float32 g, Float32 b, Float32 a)  { AiNodeSetRGBAAtString(node, param, r, g, b, a); }
function AiNodeSetVec(io AtNode node, String param, Float32 x, Float32 y, Float32 z)  { AiNodeSetVecAtString(node, param, x, y, z); }
function AiNodeSetPnt(io AtNode node, String param, Float32 x, Float32 y, Float32 z)  { AiNodeSetPntAtString(node, param, x, y, z); }
function AiNodeSetPnt2(io AtNode node, String param, Float32 x, Float32 y)  { AiNodeSetPnt2AtString(node, param, x, y); }

function UInt8 AiNodeGetByte(AtNode node, String param) { return AiNodeGetByteAtString(node, param); }
function SInt32 AiNodeGetInt(AtNode node, String param) { return AiNodeGetIntAtString(node, param); }
function UInt32 AiNodeGetUInt(AtNode node, String param) { return AiNodeGetUIntAtString(node, param); }
function Boolean AiNodeGetBool(AtNode node, String param) { return AiNodeGetBoolAtString(node, param); }
function Float32 AiNodeGetFlt(AtNode node, String param) { return AiNodeGetFltAtString(node, param); }
function Color AiNodeGetRGB(AtNode node, String param) { return AiNodeGetRGBAtString(node, param); }
function Color AiNodeGetRGBA(AtNode node, String param) { return AiNodeGetRGBAAtString(node, param); }
function Vec3 AiNodeGetVec(AtNode node, String param) { return AiNodeGetVecAtString(node, param); }
function Vec3 AiNodeGetPnt(AtNode node, String param) { return AiNodeGetPntAtString(node, param); }
function Vec2 AiNodeGetPnt2(AtNode node, String param) { return AiNodeGetPnt2AtString(node, param); }
function Data AiNodeGetPtr(AtNode node, String param) { return AiNodeGetPtrAtString(node, param); }
function AtArray AiNodeGetArray(AtNode node, String param) { return AiNodeGetArrayAtString(node, param); }
function String AiNodeGetStr(AtNode node, String param) { return AiNodeGetStrAtString(node, param); }

function Boolean AiArraySetBool(io AtArray a, UInt32 i, Boolean val)   { return AiArraySetBoolFunc(a, i, val, 'F2AWrapper', 0); }
function Boolean AiArraySetByte(io AtArray a, UInt32 i, UInt8 val)     { return AiArraySetByteFunc(a, i, val, 'F2AWrapper', 0); }
function Boolean AiArraySetInt(io AtArray a, UInt32 i, SInt32 val)     { return AiArraySetIntFunc(a, i, val, 'F2AWrapper', 0); }
function Boolean AiArraySetUInt(io AtArray a, UInt32 i, UInt32 val)    { return AiArraySetUIntFunc(a, i, val, 'F2AWrapper', 0); }
function Boolean AiArraySetFlt(io AtArray a, UInt32 i, Float32 val)    { return AiArraySetFltFunc(a, i, val, 'F2AWrapper', 0); }
function Boolean AiArraySetRGB(io AtArray a, UInt32 i, Color val)        { return AiArraySetRGBFunc(a, i, val, 'F2AWrapper', 0); }
function Boolean AiArraySetRGBA(io AtArray a, UInt32 i, Color val)     { return AiArraySetRGBAFunc(a, i, val, 'F2AWrapper', 0); }
function Boolean AiArraySetPnt(io AtArray a, UInt32 i, Vec3 val)       { return AiArraySetPntFunc(a, i, val, 'F2AWrapper', 0); }
function Boolean AiArraySetPnt2(io AtArray a, UInt32 i, Vec2 val)      { return AiArraySetPnt2Func(a, i, val, 'F2AWrapper', 0); }
function Boolean AiArraySetVec(io AtArray a, UInt32 i, Vec3 val)       { return AiArraySetVecFunc(a, i, val, 'F2AWrapper', 0); }
function Boolean AiArraySetMtx(io AtArray a, UInt32 i, Mat44 val)      { return AiArraySetMtxFunc(a, i, val, 'F2AWrapper', 0); }
function Boolean AiArraySetStr(io AtArray a, UInt32 i, String val)     { return AiArraySetStrFunc(a, i, val, 'F2AWrapper', 0); }
function Boolean AiArraySetPtr(io AtArray a, UInt32 i, io Data val)       { return AiArraySetPtrFunc(a, i, val, 'F2AWrapper', 0); }
function Boolean AiArraySetArray(io AtArray a, UInt32 i, io AtArray val)  { return AiArraySetArrayFunc(a, i, val, 'F2AWrapper', 0); }

function Boolean AiArrayGetBoolFunc(AtArray a, UInt32 i)  { return AiArrayGetBoolFunc(a, i, 'F2AWrapper', 0); }
function UInt8 AiArrayGetByteFunc(AtArray a, UInt32 i)    { return AiArrayGetByteFunc(a, i, 'F2AWrapper', 0); }
function SInt32 AiArrayGetIntFunc(AtArray a, UInt32 i)    { return AiArrayGetIntFunc(a, i, 'F2AWrapper', 0); }
function UInt32 AiArrayGetUIntFunc(AtArray a, UInt32 i)   { return AiArrayGetUIntFunc(a, i, 'F2AWrapper', 0); }
function Float32 AiArrayGetFltFunc(AtArray a, UInt32 i)   { return AiArrayGetFltFunc(a, i, 'F2AWrapper', 0); }
function Color AiArrayGetRGBFunc(AtArray a, UInt32 i)    { return AiArrayGetRGBFunc(a, i, 'F2AWrapper', 0); }
function Color AiArrayGetRGBAFunc(AtArray a, UInt32 i) { return AiArrayGetRGBAFunc(a, i, 'F2AWrapper', 0); }
function Vec3 AiArrayGetPntFunc(AtArray a, UInt32 i)   { return AiArrayGetPntFunc(a, i, 'F2AWrapper', 0); }
function Vec2 AiArrayGetPnt2Func(AtArray a, UInt32 i)  { return AiArrayGetPnt2Func(a, i, 'F2AWrapper', 0); }
function Vec3 AiArrayGetVecFunc(AtArray a, UInt32 i)   { return AiArrayGetVecFunc(a, i, 'F2AWrapper', 0); }
function String AiArrayGetStrFunc(AtArray a, UInt32 i) { return AiArrayGetStrFunc(a, i, 'F2AWrapper', 0); }
function Data AiArrayGetPtrFunc(AtArray a, UInt32 i)   { return AiArrayGetPtrFunc(a, i, 'F2AWrapper', 0); }
function AtArray AiArrayGetArrayFunc(AtArray a, UInt32 i)   { return AiArrayGetArrayFunc(a, i, 'F2AWrapper', 0); }
function Mat44 AiArrayGetMtx(AtArray a, UInt32 i)           { return AiArrayGetMtxFunc(a, i); }
