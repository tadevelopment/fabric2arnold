require Fabric2ArnoldWrapper;

const UInt32 p_color = 0;
const UInt32 p_do_mod_color = 1;

object TestShader : a2fPluginBase, a2fPluginShader
{
};

function TestShader() {
  report("Constructed");
}
function ~TestShader() {
  report("Destructed");
}

function TestShader.parameters(io AtList list, io AtMetaDataStore metadata)
{
  // this classes parameter
  // NOTE - This class instance will _not_ be persisted, so don't
  // attempt to set data members here
  // NOTE - The parameters must be registered in order, 
  // otherwise they don't work or something.
  AiNodeParamRGB(list, p_color, "test_color", 1.0f, 0.0f, 0.0f);
  AiNodeParamBool(list, p_do_mod_color, "mod_color", false);
  report("Parameters");
}
function TestShader.initialize!(io AtNode node, io AtParamValue value)
{
  report("Initialize");
}
function TestShader.update(io AtNode node, io AtParamValue value)
{
  report("Update");
}
function TestShader.finish!(io AtNode node)
{
  report("Finish");
}
function TestShader.evaluate(io AtNode node, io AtShaderGlobals globals)
{
  Color color = AiShaderEvalParamFuncRGB(globals, node, p_color);
  if (AiShaderEvalParamFuncBool(globals, node, p_do_mod_color))
  {
    Float32 mod = globals.N.dot(globals.rd);
    if (mod < 0)
      color *= -mod;
    else
      color *= mod;
  }
  globals.out.setRGB(color); //Color(1.0f, 0.0, 0.0)); //color);    
}

/////////////////////////////////////////////////////////

operator entry() {
  UInt64 start = getCurrentTicks();
  AiBegin();

  ArnoldKLPluginIMgr mgr = AcquireArnoldKLPluginMgr();
  mgr.RegisterKLPlugin(TestShader, AI_NODE_SHADER, AI_TYPE_RGB, "TestShader", "<kl-plugins>");

  //////////////////////////////////////////////////////////
  // create a sphere1
  AtNode sphere1 = AiNode("sphere");
  AiNodeSetStr(sphere1, "name", "mysphere1");
  AiNodeSetFlt(sphere1, "radius", 5.0);
  AiNodeSetPnt(sphere1, "center", -5.0, 0, 0);
  // create a greenTestShader shader
  AtNode greenTestShader = AiNode("TestShader");
  AiNodeSetStr(greenTestShader, "name", "myshader1");
  AiNodeSetRGB(greenTestShader, "test_color", 0.0, 1.0, 0.0);
  // assign the sphere1's shader
  AiNodeSetPtr(sphere1, "shader", greenTestShader._handle);
  //////////////////////////////////////////////////////////

  AtNode sphere2 = AiNode("sphere");
  AiNodeSetStr(sphere2, "name", "mysphere2");
  AiNodeSetFlt(sphere2, "radius", 5.0);
  AiNodeSetPnt(sphere2, "center", 5.0, 0, 0);
  // create a blueTestShader shader
  AtNode blueTestShader = AiNode("TestShader");
  AiNodeSetStr(blueTestShader, "name", "myshader2");
  AiNodeSetRGB(blueTestShader, "test_color", 1.0, 0.0, 1.0);
  AiNodeSetBool(blueTestShader, "mod_color", true);
  // assign the sphere2's shader
  AiNodeSetPtr(sphere2, "shader", blueTestShader._handle);
  //////////////////////////////////////////////////////////

  // create a perspective camera
  AtNode camera = AiNode("persp_camera");
  AiNodeSetStr(camera, "name", "mycamera");
  AiNodeSetPnt(camera, "position", 0.0, 0.0, 20.0);

  // create a point light
  AtNode light = AiNode("point_light");
  AiNodeSetStr(light, "name", "mylight");
  AiNodeSetFlt(light, "exposure", 7.5);
  AiNodeSetPnt(light, "position", 0.0, 10.0, 10.0);

  // set render options
  AtNode options = AiUniverseGetOptions();
  AiNodeSetInt(options, "AA_samples", 1);
  AiNodeSetInt(options, "xres", 320);
  AiNodeSetInt(options, "yres", 240);
  AiNodeSetPtr(options, "camera", camera._handle);

  // create an output driver
  AtNode driver = AiNode("driver_jpeg");
  AiNodeSetStr(driver, "name", "mydriver");
  String filename = 'C:\\temp\\test10_a.jpg';
  AiNodeSetStr(driver, "filename", filename);

  // create a gaussian filter node
  AtNode gfilter = AiNode("gaussian_filter");
  AiNodeSetStr(gfilter, "name", "myfilter");

  // assign th driver and the filter to the outputs
  AtArray outputs_array = AiArrayAllocate(1, 1, AI_TYPE_STRING);
  AiArraySetStr(outputs_array, 0, "RGB RGB myfilter mydriver");
  AiNodeSetArray(options, "outputs", outputs_array);

  // render the scene
  Integer result = AiRender(AI_RENDER_MODE_CAMERA);
  if (result != AI_SUCCESS)
  {
    report("[FabricArnold::TestSuite] Error " + String(result));
  }

  // get scene bounds doesn't work unless the render is called
  Box3 bounds = AiUniverseGetSceneBounds();

  // remove the sphere1, create a box the size of the bounds
  AiNodeDestroy(sphere1);
  AtNode box = AiNode("box");
  AiNodeSetStr(box, "name", "mybox");
  AiNodeSetPtr(box, "shader", greenTestShader._handle);

  AiNodeSetPnt(box, "min", -3, -3, -3);
  AiNodeSetPnt(box, "max", 3, 3, 3);

  filename = 'C:\\temp\\test10_b.jpg';
  AiNodeSetStr(driver, "filename", filename);


  // render the box now
  result = AiRender(AI_RENDER_MODE_CAMERA);
  if (result != AI_SUCCESS)
  {
    report("[FabricArnold::TestSuite] Error " + String(result));
  }

  // Finally, render to an ASS file
  doArnoldRenderToASS("c:\\temp\\test10_a.ass");

  ReleaseArnoldKLPluginMgr();
  AiEnd();

  UInt64 end = getCurrentTicks();
  report("Elapsed time: " + getSecondsBetweenTicks(start, end) + " seconds");
}
