{
    "functionbodies": {
        "_fe_AiAOVIteratorDestroy": "  AiAOVIteratorDestroy(f2aIter);\n", 
        "_fe_AiAOVIteratorFinished": "  bool f2a_result = AiAOVIteratorFinished(f2aIter);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiAOVIteratorGetNext": "  const AtAOVEntry * f2a_result = AiAOVIteratorGetNext(f2aIter);\n  AtAOVEntry_to_KLAtAOVEntry(f2a_result, _result);", 
        "_fe_AiAOVSampleIteratorGetAOVBoolAtString": "  bool f2a_result = AiAOVSampleIteratorGetAOVBoolAtString(f2aIter, f2aName);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiAOVSampleIteratorGetAOVFltAtString": "  float f2a_result = AiAOVSampleIteratorGetAOVFltAtString(f2aIter, f2aName);\n  Fabric::EDK::KL::Float32 _result;\n  float_to_Float32(f2a_result, _result);\n", 
        "_fe_AiAOVSampleIteratorGetAOVIntAtString": "  int f2a_result = AiAOVSampleIteratorGetAOVIntAtString(f2aIter, f2aName);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiAOVSampleIteratorGetAOVPnt2AtString": "  AtPoint2 f2a_result = AiAOVSampleIteratorGetAOVPnt2AtString(f2aIter, f2aName);\n  AtPoint2_to_Vec2(f2a_result, _result);", 
        "_fe_AiAOVSampleIteratorGetAOVPntAtString": "  AtPoint f2a_result = AiAOVSampleIteratorGetAOVPntAtString(f2aIter, f2aName);\n  AtPoint_to_Vec3(f2a_result, _result);", 
        "_fe_AiAOVSampleIteratorGetAOVPtrAtString": "  const void * f2a_result = AiAOVSampleIteratorGetAOVPtrAtString(f2aIter, f2aName);\n  Fabric::EDK::KL::Data _result;\n  void_to_Data(f2a_result, _result);\n", 
        "_fe_AiAOVSampleIteratorGetAOVRGBAAtString": "  AtRGBA f2a_result = AiAOVSampleIteratorGetAOVRGBAAtString(f2aIter, f2aName);\n  CPAtRGBA_to_KLColor(f2a_result, _result);", 
        "_fe_AiAOVSampleIteratorGetAOVRGBAtString": "  AtRGB f2a_result = AiAOVSampleIteratorGetAOVRGBAtString(f2aIter, f2aName);\n  AtRGB_to_Color(f2a_result, _result);", 
        "_fe_AiAOVSampleIteratorGetAOVVecAtString": "  AtVector f2a_result = AiAOVSampleIteratorGetAOVVecAtString(f2aIter, f2aName);\n  AtPoint_to_Vec3(f2a_result, _result);", 
        "_fe_AiAOVSampleIteratorGetBool": "  bool f2a_result = AiAOVSampleIteratorGetBool(f2aIter);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiAOVSampleIteratorGetDepth": "  int f2a_result = AiAOVSampleIteratorGetDepth(f2aIter);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiAOVSampleIteratorGetFlt": "  float f2a_result = AiAOVSampleIteratorGetFlt(f2aIter);\n  Fabric::EDK::KL::Float32 _result;\n  float_to_Float32(f2a_result, _result);\n", 
        "_fe_AiAOVSampleIteratorGetInt": "  int f2a_result = AiAOVSampleIteratorGetInt(f2aIter);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiAOVSampleIteratorGetInvDensity": "  float f2a_result = AiAOVSampleIteratorGetInvDensity(f2aIter);\n  Fabric::EDK::KL::Float32 _result;\n  float_to_Float32(f2a_result, _result);\n", 
        "_fe_AiAOVSampleIteratorGetNext": "  bool f2a_result = AiAOVSampleIteratorGetNext(f2aIter);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiAOVSampleIteratorGetNextDepth": "  bool f2a_result = AiAOVSampleIteratorGetNextDepth(f2aIter);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiAOVSampleIteratorGetOffset": "  AtPoint2 f2a_result = AiAOVSampleIteratorGetOffset(f2aIter);\n  AtPoint2_to_Vec2(f2a_result, _result);", 
        "_fe_AiAOVSampleIteratorGetPnt": "  AtPoint f2a_result = AiAOVSampleIteratorGetPnt(f2aIter);\n  AtPoint_to_Vec3(f2a_result, _result);", 
        "_fe_AiAOVSampleIteratorGetPnt2": "  AtPoint2 f2a_result = AiAOVSampleIteratorGetPnt2(f2aIter);\n  AtPoint2_to_Vec2(f2a_result, _result);", 
        "_fe_AiAOVSampleIteratorGetPtr": "  const void * f2a_result = AiAOVSampleIteratorGetPtr(f2aIter);\n  Fabric::EDK::KL::Data _result;\n  void_to_Data(f2a_result, _result);\n", 
        "_fe_AiAOVSampleIteratorGetRGB": "  AtRGB f2a_result = AiAOVSampleIteratorGetRGB(f2aIter);\n  AtRGB_to_Color(f2a_result, _result);", 
        "_fe_AiAOVSampleIteratorGetRGBA": "  AtRGBA f2a_result = AiAOVSampleIteratorGetRGBA(f2aIter);\n  CPAtRGBA_to_KLColor(f2a_result, _result);", 
        "_fe_AiAOVSampleIteratorGetVec": "  AtVector f2a_result = AiAOVSampleIteratorGetVec(f2aIter);\n  AtPoint_to_Vec3(f2a_result, _result);", 
        "_fe_AiAOVSampleIteratorHasAOVValue": "  bool f2a_result = AiAOVSampleIteratorHasAOVValue(f2aIter, f2aName, f2aType);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiAOVSampleIteratorHasValue": "  bool f2a_result = AiAOVSampleIteratorHasValue(f2aIter);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiAOVSampleIteratorInitPixel": "  AiAOVSampleIteratorInitPixel(f2aIter, f2aX, f2aY);\n", 
        "_fe_AiAOVSampleIteratorReset": "  AiAOVSampleIteratorReset(f2aIter);\n", 
        "_fe_AiASSLoad": "  int f2a_result = AiASSLoad(f2aFilename, f2aMask/*=AI_NODE_ALL*/);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiASSWrite": "  int f2a_result = AiASSWrite(f2aFilename, f2aMask/*=AI_NODE_ALL*/, f2aOpen_procs/*=false*/, f2aBinary/*=true*/);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiArray": "  AtArray * f2a_result = AiArray(f2aNelements, f2aNkeys, f2aType);\n  AtArray_to_KLArray(f2a_result, _result);", 
        "_fe_AiArrayAllocate": "  AtArray * f2a_result = AiArrayAllocate(f2aNelements, f2aNkeys, f2aType);\n  AtArray_to_KLArray(f2a_result, _result);", 
        "_fe_AiArrayConvert": "  AtArray * f2a_result = AiArrayConvert(f2aNelements, f2aNkeys, f2aType, f2aData);\n  AtArray_to_KLArray(f2a_result, _result);", 
        "_fe_AiArrayCopy": "  AtArray * f2a_result = AiArrayCopy(f2aArray);\n  AtArray_to_KLArray(f2a_result, _result);", 
        "_fe_AiArrayDestroy": "  AiArrayDestroy(f2aArray);\n", 
        "_fe_AiArrayGetArrayFunc": "  AtArray * f2a_result = AiArrayGetArrayFunc(f2aA, f2aI, f2a_val, f2aLine);\n  AtArray_to_KLArray(f2a_result, _result);", 
        "_fe_AiArrayGetBoolFunc": "  bool f2a_result = AiArrayGetBoolFunc(f2aA, f2aI, f2a_val, f2aLine);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiArrayGetByteFunc": "  AtByte f2a_result = AiArrayGetByteFunc(f2aA, f2aI, f2a_val, f2aLine);\n  Fabric::EDK::KL::UInt8 _result;\n  AtByte_to_UInt8(f2a_result, _result);\n", 
        "_fe_AiArrayGetFltFunc": "  float f2a_result = AiArrayGetFltFunc(f2aA, f2aI, f2a_val, f2aLine);\n  Fabric::EDK::KL::Float32 _result;\n  float_to_Float32(f2a_result, _result);\n", 
        "_fe_AiArrayGetIntFunc": "  int f2a_result = AiArrayGetIntFunc(f2aA, f2aI, f2a_val, f2aLine);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiArrayGetPnt2Func": "  AtPoint2 f2a_result = AiArrayGetPnt2Func(f2aA, f2aI, f2a_val, f2aLine);\n  AtPoint2_to_Vec2(f2a_result, _result);", 
        "_fe_AiArrayGetPntFunc": "  AtPoint f2a_result = AiArrayGetPntFunc(f2aA, f2aI, f2a_val, f2aLine);\n  AtPoint_to_Vec3(f2a_result, _result);", 
        "_fe_AiArrayGetPtrFunc": "  void * f2a_result = AiArrayGetPtrFunc(f2aA, f2aI, f2a_val, f2aLine);\n  Fabric::EDK::KL::Data _result;\n  void_to_Data(f2a_result, _result);\n", 
        "_fe_AiArrayGetRGBAFunc": "  AtRGBA f2a_result = AiArrayGetRGBAFunc(f2aA, f2aI, f2a_val, f2aLine);\n  CPAtRGBA_to_KLColor(f2a_result, _result);", 
        "_fe_AiArrayGetRGBFunc": "  AtRGB f2a_result = AiArrayGetRGBFunc(f2aA, f2aI, f2a_val, f2aLine);\n  AtRGB_to_Color(f2a_result, _result);", 
        "_fe_AiArrayGetStrFunc": "  const char * f2a_result = AiArrayGetStrFunc(f2aA, f2aI, f2a_val, f2aLine);\n  char_to_String(f2a_result, _result);", 
        "_fe_AiArrayGetUIntFunc": "  AtUInt32 f2a_result = AiArrayGetUIntFunc(f2aA, f2aI, f2a_val, f2aLine);\n  Fabric::EDK::KL::UInt32 _result;\n  unsigned_int_to_UInt32(f2a_result, _result);\n", 
        "_fe_AiArrayGetVecFunc": "  AtVector f2a_result = AiArrayGetVecFunc(f2aA, f2aI, f2a_val, f2aLine);\n  AtPoint_to_Vec3(f2a_result, _result);", 
        "_fe_AiArrayInterpolateFlt": "  float f2a_result = AiArrayInterpolateFlt(f2aArray, f2aTime, f2aIdx);\n  Fabric::EDK::KL::Float32 _result;\n  float_to_Float32(f2a_result, _result);\n", 
        "_fe_AiArrayInterpolateMtx": "  AiArrayInterpolateMtx(f2aArray, f2aTime, f2aIdx, f2aResult);\n", 
        "_fe_AiArrayInterpolatePnt": "  AtPoint f2a_result = AiArrayInterpolatePnt(f2aArray, f2aTime, f2aIdx);\n  AtPoint_to_Vec3(f2a_result, _result);", 
        "_fe_AiArrayInterpolateRGB": "  AtColor f2a_result = AiArrayInterpolateRGB(f2aArray, f2aTime, f2aIdx);\n  CPAtColor_to_KLColor(f2a_result, _result);", 
        "_fe_AiArrayInterpolateRGBA": "  AtRGBA f2a_result = AiArrayInterpolateRGBA(f2aArray, f2aTime, f2aIdx);\n  CPAtRGBA_to_KLColor(f2a_result, _result);", 
        "_fe_AiArrayInterpolateVec": "  AtVector f2a_result = AiArrayInterpolateVec(f2aArray, f2aTime, f2aIdx);\n  AtPoint_to_Vec3(f2a_result, _result);", 
        "_fe_AiArrayModify": "  AtArray * f2a_result = AiArrayModify(f2aArray, f2aNelements, f2aNkeys, f2aType);\n  AtArray_to_KLArray(f2a_result, _result);", 
        "_fe_AiArraySetArrayFunc": "  bool f2a_result = AiArraySetArrayFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiArraySetBoolFunc": "  bool f2a_result = AiArraySetBoolFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiArraySetByteFunc": "  bool f2a_result = AiArraySetByteFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiArraySetFltFunc": "  bool f2a_result = AiArraySetFltFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiArraySetIntFunc": "  bool f2a_result = AiArraySetIntFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiArraySetKey": "  bool f2a_result = AiArraySetKey(f2aArray, f2aKey, f2aData);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiArraySetMtxFunc": "  bool f2a_result = AiArraySetMtxFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiArraySetPnt2Func": "  bool f2a_result = AiArraySetPnt2Func(f2aA, f2aI, f2aVal, f2a_val, f2aLine);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiArraySetPntFunc": "  bool f2a_result = AiArraySetPntFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiArraySetPtrFunc": "  bool f2a_result = AiArraySetPtrFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiArraySetRGBAFunc": "  bool f2a_result = AiArraySetRGBAFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiArraySetRGBFunc": "  bool f2a_result = AiArraySetRGBFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiArraySetStrFunc": "  bool f2a_result = AiArraySetStrFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiArraySetUIntFunc": "  bool f2a_result = AiArraySetUIntFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiArraySetVecFunc": "  bool f2a_result = AiArraySetVecFunc(f2aA, f2aI, f2aVal, f2a_val, f2aLine);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiBegin": "  AiBegin();\n", 
        "_fe_AiCameraDestroy": "  AiCameraDestroy(f2aNode);\n", 
        "_fe_AiCameraGetLocalData": "  void * f2a_result = AiCameraGetLocalData(f2aNode);\n  Fabric::EDK::KL::Data _result;\n  void_to_Data(f2a_result, _result);\n", 
        "_fe_AiCameraInitialize": "  AiCameraInitialize(f2aNode, f2aData);\n", 
        "_fe_AiCameraUpdate": "  AiCameraUpdate(f2aNode, f2aPlane_distance);\n", 
        "_fe_AiDriverDestroy": "  AiDriverDestroy(f2aNode);\n", 
        "_fe_AiDriverGetLocalData": "  void * f2a_result = AiDriverGetLocalData(f2aNode);\n  Fabric::EDK::KL::Data _result;\n  void_to_Data(f2a_result, _result);\n", 
        "_fe_AiDriverGetMatrices": "  AiDriverGetMatrices(f2aWorld_to_camera, f2aWorld_to_screen);\n", 
        "_fe_AiDriverInitialize": "  AiDriverInitialize(f2aNode, f2aSupports_multiple_outputs, f2aData);\n", 
        "_fe_AiEnd": "  AiEnd();\n", 
        "_fe_AiEnumGetString": "  const char * f2a_result = AiEnumGetString(f2aEnum_type, f2aIndex);\n  char_to_String(f2a_result, _result);", 
        "_fe_AiEnumGetValue": "  int f2a_result = AiEnumGetValue(f2aEnum_type, f2aString);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiFilterDestroy": "  AiFilterDestroy(f2aNode);\n", 
        "_fe_AiFilterGetLocalData": "  void * f2a_result = AiFilterGetLocalData(f2aNode);\n  Fabric::EDK::KL::Data _result;\n  void_to_Data(f2a_result, _result);\n", 
        "_fe_AiFilterUpdate": "  AiFilterUpdate(f2aNode, f2aWidth);\n", 
        "_fe_AiFindDriverType": "  const AtNodeEntry * f2a_result = AiFindDriverType(f2aExtension);\n  CPAtNodeEntry_to_KLAtNodeEntry(f2a_result, _result);", 
        "_fe_AiLicenseGetAttemptDelay": "  unsigned int f2a_result = AiLicenseGetAttemptDelay();\n  Fabric::EDK::KL::UInt32 _result;\n  unsigned_int_to_UInt32(f2a_result, _result);\n", 
        "_fe_AiLicenseGetAttempts": "  unsigned int f2a_result = AiLicenseGetAttempts();\n  Fabric::EDK::KL::UInt32 _result;\n  unsigned_int_to_UInt32(f2a_result, _result);\n", 
        "_fe_AiLicenseGetInfo": "  int f2a_result = AiLicenseGetInfo(f2aLicenses, f2aN);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiLicenseGetServer": "  bool f2a_result = AiLicenseGetServer(f2aHost, f2aPort);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiLicenseSetAttemptDelay": "  AiLicenseSetAttemptDelay(f2aMsecs);\n", 
        "_fe_AiLicenseSetAttempts": "  AiLicenseSetAttempts(f2aAttempts);\n", 
        "_fe_AiLicenseSetServer": "  bool f2a_result = AiLicenseSetServer(f2aHost, f2aPort);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiLoadPlugin": "  AiLoadPlugin(f2aPath);\n", 
        "_fe_AiLoadPlugins": "  AiLoadPlugins(f2aDirectory);\n", 
        "_fe_AiMakeRay": "  AiMakeRay(&f2aRay, f2aType, &f2aOrigin, &f2aDir, f2aMaxdist, f2aSg);\n", 
        "_fe_AiMetaDataGetBoolAtString": "  bool f2a_result = AiMetaDataGetBoolAtString(f2aEntry, f2aParam, f2aName, &f2aValue);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiMetaDataGetFltAtString": "  bool f2a_result = AiMetaDataGetFltAtString(f2aEntry, f2aParam, f2aName, &f2aValue);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiMetaDataGetIntAtString": "  bool f2a_result = AiMetaDataGetIntAtString(f2aEntry, f2aParam, f2aName, &f2aValue);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiMetaDataGetPnt2AtString": "  bool f2a_result = AiMetaDataGetPnt2AtString(f2aEntry, f2aParam, f2aName, &f2aValue);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiMetaDataGetPntAtString": "  bool f2a_result = AiMetaDataGetPntAtString(f2aEntry, f2aParam, f2aName, &f2aValue);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiMetaDataGetRGBAtString": "  bool f2a_result = AiMetaDataGetRGBAtString(f2aEntry, f2aParam, f2aName, &f2aValue);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiMetaDataGetStrAtString": "  bool f2a_result = AiMetaDataGetStrAtString(f2aEntry, f2aParam, f2aName, &f2aValue);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiMetaDataGetVecAtString": "  bool f2a_result = AiMetaDataGetVecAtString(f2aEntry, f2aParam, f2aName, &f2aValue);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiMetaDataIteratorDestroy": "  AiMetaDataIteratorDestroy(f2aIter);\n", 
        "_fe_AiMetaDataIteratorFinished": "  bool f2a_result = AiMetaDataIteratorFinished(f2aIter);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiMetaDataIteratorGetNext": "  const AtMetaDataEntry * f2a_result = AiMetaDataIteratorGetNext(f2aIter);\n  AtMetaDataEntry_to_KLAtMetaDataEntry(f2a_result, _result);", 
        "_fe_AiMetaDataLoadFile": "  bool f2a_result = AiMetaDataLoadFile(f2aFilename);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiMetaDataSetBool": "  AiMetaDataSetBool(f2aMds, f2aParam, f2aName, f2aValue);\n", 
        "_fe_AiMetaDataSetBoolAtString": "  AiMetaDataSetBoolAtString(f2aMds, f2aParam, f2aName, f2aValue);\n", 
        "_fe_AiMetaDataSetFlt": "  AiMetaDataSetFlt(f2aMds, f2aParam, f2aName, f2aValue);\n", 
        "_fe_AiMetaDataSetFltAtString": "  AiMetaDataSetFltAtString(f2aMds, f2aParam, f2aName, f2aValue);\n", 
        "_fe_AiMetaDataSetInt": "  AiMetaDataSetInt(f2aMds, f2aParam, f2aName, f2aValue);\n", 
        "_fe_AiMetaDataSetIntAtString": "  AiMetaDataSetIntAtString(f2aMds, f2aParam, f2aName, f2aValue);\n", 
        "_fe_AiMetaDataSetPnt": "  AiMetaDataSetPnt(f2aMds, f2aParam, f2aName, f2aValue);\n", 
        "_fe_AiMetaDataSetPnt2": "  AiMetaDataSetPnt2(f2aMds, f2aParam, f2aName, f2aValue);\n", 
        "_fe_AiMetaDataSetPnt2AtString": "  AiMetaDataSetPnt2AtString(f2aMds, f2aParam, f2aName, f2aValue);\n", 
        "_fe_AiMetaDataSetPntAtString": "  AiMetaDataSetPntAtString(f2aMds, f2aParam, f2aName, f2aValue);\n", 
        "_fe_AiMetaDataSetRGB": "  AiMetaDataSetRGB(f2aMds, f2aParam, f2aName, f2aValue);\n", 
        "_fe_AiMetaDataSetRGBAtString": "  AiMetaDataSetRGBAtString(f2aMds, f2aParam, f2aName, f2aValue);\n", 
        "_fe_AiMetaDataSetStr": "  AiMetaDataSetStr(f2aMds, f2aParam, f2aName, f2aValue);\n", 
        "_fe_AiMetaDataSetStrAtString": "  AiMetaDataSetStrAtString(f2aMds, f2aParam, f2aName, f2aValue);\n", 
        "_fe_AiMetaDataSetVec": "  AiMetaDataSetVec(f2aMds, f2aParam, f2aName, f2aValue);\n", 
        "_fe_AiMetaDataSetVecAtString": "  AiMetaDataSetVecAtString(f2aMds, f2aParam, f2aName, f2aValue);\n", 
        "_fe_AiMsgDebug": "  AiMsgDebug(f2aFormat);\n", 
        "_fe_AiMsgError": "  AiMsgError(f2aFormat);\n", 
        "_fe_AiMsgFatal": "  AiMsgFatal(f2aFormat);\n", 
        "_fe_AiMsgInfo": "  AiMsgInfo(f2aFormat);\n", 
        "_fe_AiMsgResetCallback": "  AiMsgResetCallback();\n", 
        "_fe_AiMsgSetConsoleFlags": "  AiMsgSetConsoleFlags(f2aFlags);\n", 
        "_fe_AiMsgSetLogFileFlags": "  AiMsgSetLogFileFlags(f2aFlags);\n", 
        "_fe_AiMsgSetLogFileName": "  AiMsgSetLogFileName(f2aFilename);\n", 
        "_fe_AiMsgSetMaxWarnings": "  AiMsgSetMaxWarnings(f2aMax_warnings);\n", 
        "_fe_AiMsgTab": "  AiMsgTab(f2aTabinc);\n", 
        "_fe_AiMsgUtilGetElapsedTime": "  AtUInt32 f2a_result = AiMsgUtilGetElapsedTime();\n  Fabric::EDK::KL::UInt32 _result;\n  unsigned_int_to_UInt32(f2a_result, _result);\n", 
        "_fe_AiMsgUtilGetUsedMemory": "  AtUInt64 f2a_result = AiMsgUtilGetUsedMemory();\n  Fabric::EDK::KL::UInt64 _result;\n  AtUInt64_to_UInt64(f2a_result, _result);\n", 
        "_fe_AiMsgWarning": "  AiMsgWarning(f2aFormat);\n", 
        "_fe_AiNodeAtString": "  AtNode * f2a_result = AiNodeAtString(f2aName);\n  CPAtNode_to_KLAtNode(f2a_result, _result);", 
        "_fe_AiNodeClone": "  AtNode * f2a_result = AiNodeClone(f2aNode);\n  CPAtNode_to_KLAtNode(f2a_result, _result);", 
        "_fe_AiNodeDeclareAtString": "  bool f2a_result = AiNodeDeclareAtString(f2aNode, f2aParam, f2aDeclaration);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiNodeDestroy": "  bool f2a_result = AiNodeDestroy(f2aNode);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiNodeEntryGetCount": "  int f2a_result = AiNodeEntryGetCount(f2aNentry);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiNodeEntryGetFilename": "  const char * f2a_result = AiNodeEntryGetFilename(f2aNentry);\n  char_to_String(f2a_result, _result);", 
        "_fe_AiNodeEntryGetMetaDataIterator": "  AtMetaDataIterator * f2a_result = AiNodeEntryGetMetaDataIterator(f2aNentry, f2aParam/*=NULL*/);\n  CPAtMetaDataIterator_to_KLAtMetaDataIterator(f2a_result, _result);", 
        "_fe_AiNodeEntryGetName": "  const char * f2a_result = AiNodeEntryGetName(f2aNentry);\n  char_to_String(f2a_result, _result);", 
        "_fe_AiNodeEntryGetNumParams": "  int f2a_result = AiNodeEntryGetNumParams(f2aNentry);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiNodeEntryGetOutputType": "  int f2a_result = AiNodeEntryGetOutputType(f2aNentry);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiNodeEntryGetParamIterator": "  AtParamIterator * f2a_result = AiNodeEntryGetParamIterator(f2aNentry);\n  CPAtParamIterator_to_KLAtParamIterator(f2a_result, _result);", 
        "_fe_AiNodeEntryGetParameter": "  const AtParamEntry * f2a_result = AiNodeEntryGetParameter(f2aNentry, f2aI);\n  CPAtParamEntry_to_KLAtParamEntry(f2a_result, _result);", 
        "_fe_AiNodeEntryGetType": "  int f2a_result = AiNodeEntryGetType(f2aNentry);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiNodeEntryGetTypeName": "  const char * f2a_result = AiNodeEntryGetTypeName(f2aNentry);\n  char_to_String(f2a_result, _result);", 
        "_fe_AiNodeEntryGetVersion": "  const char * f2a_result = AiNodeEntryGetVersion(f2aNentry);\n  char_to_String(f2a_result, _result);", 
        "_fe_AiNodeEntryInstall": "  AiNodeEntryInstall(f2aType, f2aOutput_type, f2aName, f2aFilename, f2aMethods, f2aVersion);\n", 
        "_fe_AiNodeEntryIteratorDestroy": "  AiNodeEntryIteratorDestroy(f2aIter);\n", 
        "_fe_AiNodeEntryIteratorFinished": "  bool f2a_result = AiNodeEntryIteratorFinished(f2aIter);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiNodeEntryIteratorGetNext": "  AtNodeEntry * f2a_result = AiNodeEntryIteratorGetNext(f2aIter);\n  CPAtNodeEntry_to_KLAtNodeEntry(f2a_result, _result);", 
        "_fe_AiNodeEntryLookUpAtString": "  const AtNodeEntry * f2a_result = AiNodeEntryLookUpAtString(f2aName);\n  CPAtNodeEntry_to_KLAtNodeEntry(f2a_result, _result);", 
        "_fe_AiNodeEntryLookUpParameterAtString": "  const AtParamEntry * f2a_result = AiNodeEntryLookUpParameterAtString(f2aNentry, f2aParam);\n  CPAtParamEntry_to_KLAtParamEntry(f2a_result, _result);", 
        "_fe_AiNodeEntryUninstall": "  AiNodeEntryUninstall(f2aName);\n", 
        "_fe_AiNodeGetArrayAtString": "  AtArray * f2a_result = AiNodeGetArrayAtString(f2aNode, f2aParam);\n  AtArray_to_KLArray(f2a_result, _result);", 
        "_fe_AiNodeGetBoolAtString": "  bool f2a_result = AiNodeGetBoolAtString(f2aNode, f2aParam);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiNodeGetByteAtString": "  AtByte f2a_result = AiNodeGetByteAtString(f2aNode, f2aParam);\n  Fabric::EDK::KL::UInt8 _result;\n  AtByte_to_UInt8(f2a_result, _result);\n", 
        "_fe_AiNodeGetFltAtString": "  float f2a_result = AiNodeGetFltAtString(f2aNode, f2aParam);\n  Fabric::EDK::KL::Float32 _result;\n  float_to_Float32(f2a_result, _result);\n", 
        "_fe_AiNodeGetIntAtString": "  int f2a_result = AiNodeGetIntAtString(f2aNode, f2aParam);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiNodeGetLink": "  AtNode * f2a_result = AiNodeGetLink(f2aNode, f2aInput, &f2aComp/*=NULL*/);\n  CPAtNode_to_KLAtNode(f2a_result, _result);", 
        "_fe_AiNodeGetLocalData": "  void * f2a_result = AiNodeGetLocalData(f2aNode);\n  Fabric::EDK::KL::Data _result;\n  void_to_Data(f2a_result, _result);\n", 
        "_fe_AiNodeGetName": "  const char * f2a_result = AiNodeGetName(f2aNode);\n  char_to_String(f2a_result, _result);", 
        "_fe_AiNodeGetNodeEntry": "  const AtNodeEntry * f2a_result = AiNodeGetNodeEntry(f2aNode);\n  CPAtNodeEntry_to_KLAtNodeEntry(f2a_result, _result);", 
        "_fe_AiNodeGetParams": "  AtParamValue * f2a_result = AiNodeGetParams(f2aNode);\n  AtParamValue_to_KLParamValue(f2a_result, _result);", 
        "_fe_AiNodeGetPnt2AtString": "  AtPoint2 f2a_result = AiNodeGetPnt2AtString(f2aNode, f2aParam);\n  AtPoint2_to_Vec2(f2a_result, _result);", 
        "_fe_AiNodeGetPntAtString": "  AtPoint f2a_result = AiNodeGetPntAtString(f2aNode, f2aParam);\n  AtPoint_to_Vec3(f2a_result, _result);", 
        "_fe_AiNodeGetPtrAtString": "  void * f2a_result = AiNodeGetPtrAtString(f2aNode, f2aParam);\n  Fabric::EDK::KL::Data _result;\n  void_to_Data(f2a_result, _result);\n", 
        "_fe_AiNodeGetRGBAAtString": "  AtRGBA f2a_result = AiNodeGetRGBAAtString(f2aNode, f2aParam);\n  CPAtRGBA_to_KLColor(f2a_result, _result);", 
        "_fe_AiNodeGetRGBAtString": "  AtRGB f2a_result = AiNodeGetRGBAtString(f2aNode, f2aParam);\n  AtRGB_to_Color(f2a_result, _result);", 
        "_fe_AiNodeGetStrAtString": "  AtString f2a_result = AiNodeGetStrAtString(f2aNode, f2aParam);\n  char_to_String(f2a_result, _result);", 
        "_fe_AiNodeGetUIntAtString": "  unsigned int f2a_result = AiNodeGetUIntAtString(f2aNode, f2aParam);\n  Fabric::EDK::KL::UInt32 _result;\n  unsigned_int_to_UInt32(f2a_result, _result);\n", 
        "_fe_AiNodeGetUserParamIterator": "  AtUserParamIterator * f2a_result = AiNodeGetUserParamIterator(f2aNode);\n  CPAtUserParamIterator_to_KLAtUserParamIterator(f2a_result, _result);", 
        "_fe_AiNodeGetVecAtString": "  AtVector f2a_result = AiNodeGetVecAtString(f2aNode, f2aParam);\n  AtPoint_to_Vec3(f2a_result, _result);", 
        "_fe_AiNodeIs": "  bool f2a_result = AiNodeIs(f2aNode, f2aStr);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiNodeIsDisabled": "  bool f2a_result = AiNodeIsDisabled(f2aNode);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiNodeIsLinked": "  bool f2a_result = AiNodeIsLinked(f2aNode, f2aInput);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiNodeIteratorDestroy": "  AiNodeIteratorDestroy(f2aIter);\n", 
        "_fe_AiNodeIteratorFinished": "  bool f2a_result = AiNodeIteratorFinished(f2aIter);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiNodeIteratorGetNext": "  AtNode * f2a_result = AiNodeIteratorGetNext(f2aIter);\n  CPAtNode_to_KLAtNode(f2a_result, _result);", 
        "_fe_AiNodeLink": "  bool f2a_result = AiNodeLink(f2aSrc, f2aInput, f2aTarget);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiNodeLinkOutput": "  bool f2a_result = AiNodeLinkOutput(f2aSrc, f2aOutput, f2aTarget, f2aInput);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiNodeLookUpByNameAtString": "  AtNode * f2a_result = AiNodeLookUpByNameAtString(f2aName);\n  CPAtNode_to_KLAtNode(f2a_result, _result);", 
        "_fe_AiNodeLookUpUserParameterAtString": "  const AtUserParamEntry * f2a_result = AiNodeLookUpUserParameterAtString(f2aNode, f2aParam);\n  CPAtUserParamEntry_to_KLAtUserParamEntry(f2a_result, _result);", 
        "_fe_AiNodeParamArray": "  AiNodeParamArray(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);\n", 
        "_fe_AiNodeParamBool": "  AiNodeParamBool(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);\n", 
        "_fe_AiNodeParamByte": "  AiNodeParamByte(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);\n", 
        "_fe_AiNodeParamEnum": "  AiNodeParamEnum(f2aParams, f2aVaroffset, f2aPname, f2aPdefault, f2aEnum_type);\n", 
        "_fe_AiNodeParamFlt": "  AiNodeParamFlt(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);\n", 
        "_fe_AiNodeParamInt": "  AiNodeParamInt(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);\n", 
        "_fe_AiNodeParamMtx": "  AiNodeParamMtx(f2aParams, f2aVaroffset, f2aPname, f2aMatrix);\n", 
        "_fe_AiNodeParamNode": "  AiNodeParamNode(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);\n", 
        "_fe_AiNodeParamPnt": "  AiNodeParamPnt(f2aParams, f2aVaroffset, f2aPname, f2aX, f2aY, f2aZ);\n", 
        "_fe_AiNodeParamPnt2": "  AiNodeParamPnt2(f2aParams, f2aVaroffset, f2aPname, f2aX, f2aY);\n", 
        "_fe_AiNodeParamPtr": "  AiNodeParamPtr(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);\n", 
        "_fe_AiNodeParamRGB": "  AiNodeParamRGB(f2aParams, f2aVaroffset, f2aPname, f2aR, f2aG, f2aB);\n", 
        "_fe_AiNodeParamRGBA": "  AiNodeParamRGBA(f2aParams, f2aVaroffset, f2aPname, f2aR, f2aG, f2aB, f2aA);\n", 
        "_fe_AiNodeParamStr": "  AiNodeParamStr(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);\n", 
        "_fe_AiNodeParamUInt": "  AiNodeParamUInt(f2aParams, f2aVaroffset, f2aPname, f2aPdefault);\n", 
        "_fe_AiNodeParamVec": "  AiNodeParamVec(f2aParams, f2aVaroffset, f2aPname, f2aX, f2aY, f2aZ);\n", 
        "_fe_AiNodeReset": "  AiNodeReset(f2aNode);\n", 
        "_fe_AiNodeResetParameter": "  AiNodeResetParameter(f2aNode, f2aParam);\n", 
        "_fe_AiNodeSetArrayAtString": "  AiNodeSetArrayAtString(f2aNode, f2aParam, f2aVal);\n", 
        "_fe_AiNodeSetAttributes": "  AiNodeSetAttributes(f2aNode, f2aAttributes);\n", 
        "_fe_AiNodeSetBoolAtString": "  AiNodeSetBoolAtString(f2aNode, f2aParam, f2aVal);\n", 
        "_fe_AiNodeSetByteAtString": "  AiNodeSetByteAtString(f2aNode, f2aParam, f2aVal);\n", 
        "_fe_AiNodeSetDisabled": "  AiNodeSetDisabled(f2aNode, f2aDisabled);\n", 
        "_fe_AiNodeSetFltAtString": "  AiNodeSetFltAtString(f2aNode, f2aParam, f2aVal);\n", 
        "_fe_AiNodeSetIntAtString": "  AiNodeSetIntAtString(f2aNode, f2aParam, f2aVal);\n", 
        "_fe_AiNodeSetLocalData": "  AiNodeSetLocalData(f2aNode, f2aData);\n", 
        "_fe_AiNodeSetMatrixAtString": "  AiNodeSetMatrixAtString(f2aNode, f2aParam, f2aVal);\n", 
        "_fe_AiNodeSetPnt2AtString": "  AiNodeSetPnt2AtString(f2aNode, f2aParam, f2aX, f2aY);\n", 
        "_fe_AiNodeSetPntAtString": "  AiNodeSetPntAtString(f2aNode, f2aParam, f2aX, f2aY, f2aZ);\n", 
        "_fe_AiNodeSetPtrAtString": "  AiNodeSetPtrAtString(f2aNode, f2aParam, f2aVal);\n", 
        "_fe_AiNodeSetRGBAAtString": "  AiNodeSetRGBAAtString(f2aNode, f2aParam, f2aR, f2aG, f2aB, f2aA);\n", 
        "_fe_AiNodeSetRGBAtString": "  AiNodeSetRGBAtString(f2aNode, f2aParam, f2aR, f2aG, f2aB);\n", 
        "_fe_AiNodeSetStrAtString": "  AiNodeSetStrAtString(f2aNode, f2aParam, f2aStr);\n", 
        "_fe_AiNodeSetUIntAtString": "  AiNodeSetUIntAtString(f2aNode, f2aParam, f2aVal);\n", 
        "_fe_AiNodeSetVecAtString": "  AiNodeSetVecAtString(f2aNode, f2aParam, f2aX, f2aY, f2aZ);\n", 
        "_fe_AiNodeUnlink": "  bool f2a_result = AiNodeUnlink(f2aNode, f2aInput);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiOutputIteratorReset": "  AiOutputIteratorReset(f2aIter);\n", 
        "_fe_AiParamGetDefault": "  const AtParamValue * f2a_result = AiParamGetDefault(f2aPentry);\n  AtParamValue_to_KLParamValue(f2a_result, _result);", 
        "_fe_AiParamGetEnum": "  AtEnum f2a_result = AiParamGetEnum(f2aPentry);\n  AtEnum_to_StringArr(f2a_result, _result);", 
        "_fe_AiParamGetName": "  const char * f2a_result = AiParamGetName(f2aPentry);\n  char_to_String(f2a_result, _result);", 
        "_fe_AiParamGetType": "  int f2a_result = AiParamGetType(f2aPentry);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiParamGetTypeName": "  const char * f2a_result = AiParamGetTypeName(f2aType);\n  char_to_String(f2a_result, _result);", 
        "_fe_AiParamGetTypeSize": "  AI_CONST int f2a_result = AiParamGetTypeSize(f2aType);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiParamIteratorDestroy": "  AiParamIteratorDestroy(f2aIter);\n", 
        "_fe_AiParamIteratorFinished": "  bool f2a_result = AiParamIteratorFinished(f2aIter);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiParamIteratorGetNext": "  const AtParamEntry * f2a_result = AiParamIteratorGetNext(f2aIter);\n  CPAtParamEntry_to_KLAtParamEntry(f2a_result, _result);", 
        "_fe_AiReflectRay": "  AiReflectRay(&f2aRay, &f2aNormal, f2aSg);\n", 
        "_fe_AiRefractRay": "  bool f2a_result = AiRefractRay(&f2aRay, &f2aNormal, f2aN1, f2aN2, f2aSg);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiRender": "  int f2a_result = AiRender(f2aMode/*=AI_RENDER_MODE_CAMERA*/);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiRenderAbort": "  AiRenderAbort();\n", 
        "_fe_AiRenderInterrupt": "  AiRenderInterrupt();\n", 
        "_fe_AiRendering": "  bool f2a_result = AiRendering();\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiShaderEvalParamFuncArray": "  AtArray * f2a_result = AiShaderEvalParamFuncArray(f2aSg, f2aNode, f2aPid);\n  AtArray_to_KLArray(f2a_result, _result);", 
        "_fe_AiShaderEvalParamFuncBool": "  bool f2a_result = AiShaderEvalParamFuncBool(f2aSg, f2aNode, f2aPid);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiShaderEvalParamFuncByte": "  AtByte f2a_result = AiShaderEvalParamFuncByte(f2aSg, f2aNode, f2aPid);\n  Fabric::EDK::KL::UInt8 _result;\n  AtByte_to_UInt8(f2a_result, _result);\n", 
        "_fe_AiShaderEvalParamFuncEnum": "  int f2a_result = AiShaderEvalParamFuncEnum(f2aSg, f2aNode, f2aPid);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiShaderEvalParamFuncFlt": "  float f2a_result = AiShaderEvalParamFuncFlt(f2aSg, f2aNode, f2aPid);\n  Fabric::EDK::KL::Float32 _result;\n  float_to_Float32(f2a_result, _result);\n", 
        "_fe_AiShaderEvalParamFuncInt": "  int f2a_result = AiShaderEvalParamFuncInt(f2aSg, f2aNode, f2aPid);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiShaderEvalParamFuncMtx": "  AtMatrix * f2a_result = AiShaderEvalParamFuncMtx(f2aSg, f2aNode, f2aPid);\n  AtMatrix_to_Mat44(f2a_result, _result);", 
        "_fe_AiShaderEvalParamFuncPnt": "  AtPoint f2a_result = AiShaderEvalParamFuncPnt(f2aSg, f2aNode, f2aPid);\n  AtPoint_to_Vec3(f2a_result, _result);", 
        "_fe_AiShaderEvalParamFuncPnt2": "  AtPoint2 f2a_result = AiShaderEvalParamFuncPnt2(f2aSg, f2aNode, f2aPid);\n  AtPoint2_to_Vec2(f2a_result, _result);", 
        "_fe_AiShaderEvalParamFuncPtr": "  void * f2a_result = AiShaderEvalParamFuncPtr(f2aSg, f2aNode, f2aPid);\n  Fabric::EDK::KL::Data _result;\n  void_to_Data(f2a_result, _result);\n", 
        "_fe_AiShaderEvalParamFuncRGB": "  AtColor f2a_result = AiShaderEvalParamFuncRGB(f2aSg, f2aNode, f2aPid);\n  CPAtColor_to_KLColor(f2a_result, _result);", 
        "_fe_AiShaderEvalParamFuncRGBA": "  AtRGBA f2a_result = AiShaderEvalParamFuncRGBA(f2aSg, f2aNode, f2aPid);\n  CPAtRGBA_to_KLColor(f2a_result, _result);", 
        "_fe_AiShaderEvalParamFuncStr": "  const char * f2a_result = AiShaderEvalParamFuncStr(f2aSg, f2aNode, f2aPid);\n  char_to_String(f2a_result, _result);", 
        "_fe_AiShaderEvalParamFuncUInt": "  unsigned int f2a_result = AiShaderEvalParamFuncUInt(f2aSg, f2aNode, f2aPid);\n  Fabric::EDK::KL::UInt32 _result;\n  unsigned_int_to_UInt32(f2a_result, _result);\n", 
        "_fe_AiShaderEvalParamFuncVec": "  AtVector f2a_result = AiShaderEvalParamFuncVec(f2aSg, f2aNode, f2aPid);\n  AtPoint_to_Vec3(f2a_result, _result);", 
        "_fe_AiTextureAccess": "  AtRGBA f2a_result = AiTextureAccess(f2aSg, f2aFilename, &f2aParams, &f2aSuccess/*=NULL*/);\n  CPAtRGBA_to_KLColor(f2a_result, _result);", 
        "_fe_AiTextureGetBitDepth": "  bool f2a_result = AiTextureGetBitDepth(f2aFilename, &f2aBit_depth);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiTextureGetChannelName": "  const char * f2a_result = AiTextureGetChannelName(f2aFilename, f2aChannel_index);\n  char_to_String(f2a_result, _result);", 
        "_fe_AiTextureGetFormat": "  bool f2a_result = AiTextureGetFormat(f2aFilename, &f2aFormat);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiTextureGetMatrices": "  bool f2a_result = AiTextureGetMatrices(f2aFilename, f2aWorld_to_screen, f2aWorld_to_camera);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiTextureGetNumChannels": "  bool f2a_result = AiTextureGetNumChannels(f2aFilename, &f2aNum_channels);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiTextureGetResolution": "  bool f2a_result = AiTextureGetResolution(f2aFilename, &f2aWidth, &f2aHeight);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiTextureHandleAccess": "  AtRGBA f2a_result = AiTextureHandleAccess(f2aSg, f2aHandle, &f2aParams, &f2aSuccess/*=NULL*/);\n  CPAtRGBA_to_KLColor(f2a_result, _result);", 
        "_fe_AiTextureHandleCreate": "  AtTextureHandle * f2a_result = AiTextureHandleCreate(f2aFilename);\n  CPAtTextureHandle_to_KLAtTextureHandle(f2a_result, _result);", 
        "_fe_AiTextureHandleDestroy": "  AiTextureHandleDestroy(f2aHandle);\n", 
        "_fe_AiTextureInvalidate": "  AiTextureInvalidate(f2aFilename);\n", 
        "_fe_AiTextureParamsSetDefaults": "  AiTextureParamsSetDefaults(&f2aParams);\n", 
        "_fe_AiTrace": "  bool f2a_result = AiTrace(&f2aRay, f2aSample);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiTraceBackground": "  AiTraceBackground(&f2aRay, f2aSample);\n", 
        "_fe_AiTraceProbe": "  bool f2a_result = AiTraceProbe(&f2aRay, f2aSgout);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiUniverseCacheFlush": "  bool f2a_result = AiUniverseCacheFlush(f2aCache_flags);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiUniverseGetAOVIterator": "  AtAOVIterator * f2a_result = AiUniverseGetAOVIterator();\n  CPAtAOVIterator_to_KLAtAOVIterator(f2a_result, _result);", 
        "_fe_AiUniverseGetCamera": "  AtNode * f2a_result = AiUniverseGetCamera();\n  CPAtNode_to_KLAtNode(f2a_result, _result);", 
        "_fe_AiUniverseGetNodeEntryIterator": "  AtNodeEntryIterator * f2a_result = AiUniverseGetNodeEntryIterator(f2aNode_mask);\n  CPAtNodeEntryIterator_to_KLAtNodeEntryIterator(f2a_result, _result);", 
        "_fe_AiUniverseGetNodeIterator": "  AtNodeIterator * f2a_result = AiUniverseGetNodeIterator(f2aNode_mask);\n  CPAtNodeIterator_to_KLAtNodeIterator(f2a_result, _result);", 
        "_fe_AiUniverseGetOptions": "  AtNode * f2a_result = AiUniverseGetOptions();\n  CPAtNode_to_KLAtNode(f2a_result, _result);", 
        "_fe_AiUniverseGetSceneBounds": "  AtBBox f2a_result = AiUniverseGetSceneBounds();\n  AtBBox_to_Box3(f2a_result, _result);", 
        "_fe_AiUniverseIsActive": "  bool f2a_result = AiUniverseIsActive();\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiUserParamGetArrayType": "  int f2a_result = AiUserParamGetArrayType(f2aUpentry);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiUserParamGetCategory": "  int f2a_result = AiUserParamGetCategory(f2aUpentry);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiUserParamGetIndex": "  AI_CONST int f2a_result = AiUserParamGetIndex(f2aUpentry);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiUserParamGetName": "  const char * f2a_result = AiUserParamGetName(f2aUpentry);\n  char_to_String(f2a_result, _result);", 
        "_fe_AiUserParamGetType": "  int f2a_result = AiUserParamGetType(f2aUpentry);\n  Fabric::EDK::KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n", 
        "_fe_AiUserParamIteratorDestroy": "  AiUserParamIteratorDestroy(f2aIter);\n", 
        "_fe_AiUserParamIteratorFinished": "  bool f2a_result = AiUserParamIteratorFinished(f2aIter);\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n", 
        "_fe_AiUserParamIteratorGetNext": "  const AtUserParamEntry * f2a_result = AiUserParamIteratorGetNext(f2aIter);\n  CPAtUserParamEntry_to_KLAtUserParamEntry(f2a_result, _result);"
    }, 
    "functionentry": "f2aTRY_STATEMENT", 
    "functionexit": "f2aCATCH_STATEMENT", 
    "functionexitreturn": "f2aCATCH_STATEMENT_RETURN", 
    "parameterprefix": "f2a", 
    "typemapping": {
        "AtAOVEntry": {
            "ctype": "AtAOVEntry*", 
            "from": "KlAtAOVEntry_to_AtAOVEntry", 
            "methodop": "->", 
            "to": "AtAOVEntry_to_KLAtAOVEntry"
        }, 
        "AtAOVIterator": {
            "ctype": "AtAOVIterator*", 
            "from": "KLAtAOVIterator_to_CPAtAOVIterator", 
            "methodop": "->", 
            "to": "CPAtAOVIterator_to_KLAtAOVIterator"
        }, 
        "AtAOVSampleIterator": {
            "ctype": "AtAOVSampleIterator*", 
            "from": "KLAtAOVSampleIterator_to_CPAtAOVSampleIterator", 
            "methodop": "->", 
            "to": "CPAtAOVSampleIterator_to_KLAtAOVSampleIterator"
        }, 
        "AtArray": {
            "ctype": "AtArray*", 
            "from": "KlArray_to_AtArray", 
            "methodop": "->", 
            "to": "AtArray_to_KLArray"
        }, 
        "AtBucket": {
            "ctype": "AtBucket*", 
            "from": "KLAtBucket_to_CPAtBucket", 
            "methodop": "->", 
            "to": "CPAtBucket_to_KLAtBucket"
        }, 
        "AtCameraInput": {
            "ctype": "AtCameraInput", 
            "from": "KLAtCameraInput_to_CPAtCameraInput", 
            "methodop": ".", 
            "to": "CPAtCameraInput_to_KLAtCameraInput"
        }, 
        "AtCameraOutput": {
            "ctype": "AtCameraOutput", 
            "from": "KLAtCameraOutput_to_CPAtCameraOutput", 
            "methodop": ".", 
            "to": "CPAtCameraOutput_to_KLAtCameraOutput"
        }, 
        "AtColor": {
            "ctype": "AtColor", 
            "from": "KLColor_to_CPAtColor", 
            "methodop": ".", 
            "to": "CPAtColor_to_KLColor"
        }, 
        "AtDisplayCallback": {
            "ctype": "AtDisplayCallback", 
            "from": "KlAtDisplayCallback_to_AtDisplayCallback", 
            "methodop": ".", 
            "to": "AtDisplayCallback_to_KLAtDisplayCallback"
        }, 
        "AtLicenseInfo": {
            "ctype": "AtLicenseInfo*", 
            "from": "KlAtLicenseInfo_to_AtLicenseInfo", 
            "methodop": "->", 
            "to": "AtLicenseInfo_to_KLAtLicenseInfo"
        }, 
        "AtList": {
            "ctype": "AtList*", 
            "from": "KLAtList_to_CPAtList", 
            "methodop": "->", 
            "to": "CPAtList_to_KLAtList"
        }, 
        "AtMetaDataEntry": {
            "ctype": "AtMetaDataEntry*", 
            "from": "KlAtMetaDataEntry_to_AtMetaDataEntry", 
            "methodop": "->", 
            "to": "AtMetaDataEntry_to_KLAtMetaDataEntry"
        }, 
        "AtMetaDataIterator": {
            "ctype": "AtMetaDataIterator*", 
            "from": "KLAtMetaDataIterator_to_CPAtMetaDataIterator", 
            "methodop": "->", 
            "to": "CPAtMetaDataIterator_to_KLAtMetaDataIterator"
        }, 
        "AtMetaDataStore": {
            "ctype": "AtMetaDataStore*", 
            "from": "KLAtMetaDataStore_to_CPAtMetaDataStore", 
            "methodop": "->", 
            "to": "CPAtMetaDataStore_to_KLAtMetaDataStore"
        }, 
        "AtNode": {
            "ctype": "AtNode*", 
            "from": "KLAtNode_to_CPAtNode", 
            "methodop": "->", 
            "to": "CPAtNode_to_KLAtNode"
        }, 
        "AtNodeEntry": {
            "ctype": "AtNodeEntry*", 
            "from": "KLAtNodeEntry_to_CPAtNodeEntry", 
            "methodop": "->", 
            "to": "CPAtNodeEntry_to_KLAtNodeEntry"
        }, 
        "AtNodeEntryIterator": {
            "ctype": "AtNodeEntryIterator*", 
            "from": "KLAtNodeEntryIterator_to_CPAtNodeEntryIterator", 
            "methodop": "->", 
            "to": "CPAtNodeEntryIterator_to_KLAtNodeEntryIterator"
        }, 
        "AtNodeIterator": {
            "ctype": "AtNodeIterator*", 
            "from": "KLAtNodeIterator_to_CPAtNodeIterator", 
            "methodop": "->", 
            "to": "CPAtNodeIterator_to_KLAtNodeIterator"
        }, 
        "AtNodeLib": {
            "ctype": "AtNodeLib", 
            "from": "KLAtNodeLib_to_CPAtNodeLib", 
            "methodop": ".", 
            "to": "CPAtNodeLib_to_KLAtNodeLib"
        }, 
        "AtNodeMethods": {
            "ctype": "AtNodeMethods*", 
            "from": "KLAtNodeMethods_to_CPAtNodeMethods", 
            "methodop": "->", 
            "to": "CPAtNodeMethods_to_KLAtNodeMethods"
        }, 
        "AtOutputIterator": {
            "ctype": "AtOutputIterator*", 
            "from": "KLAtOutputIterator_to_CPAtOutputIterator", 
            "methodop": "->", 
            "to": "CPAtOutputIterator_to_KLAtOutputIterator"
        }, 
        "AtParamEntry": {
            "ctype": "AtParamEntry*", 
            "from": "KLAtParamEntry_to_CPAtParamEntry", 
            "methodop": "->", 
            "to": "CPAtParamEntry_to_KLAtParamEntry"
        }, 
        "AtParamIterator": {
            "ctype": "AtParamIterator*", 
            "from": "KLAtParamIterator_to_CPAtParamIterator", 
            "methodop": "->", 
            "to": "CPAtParamIterator_to_KLAtParamIterator"
        }, 
        "AtParamValue": {
            "ctype": "AtParamValue*", 
            "from": "KlParamValue_to_AtParamValue", 
            "methodop": ".", 
            "to": "AtParamValue_to_KLParamValue"
        }, 
        "AtRGBA": {
            "ctype": "AtRGBA", 
            "from": "KLColor_to_CPAtRGBA", 
            "methodop": ".", 
            "to": "CPAtRGBA_to_KLColor"
        }, 
        "AtRay": {
            "ctype": "AtRay", 
            "from": "KlAtRay_to_AtRay", 
            "methodop": ".", 
            "to": "AtRay_to_KLAtRay"
        }, 
        "AtScrSample": {
            "ctype": "AtScrSample*", 
            "from": "KLAtScrSample_to_CPAtScrSample", 
            "methodop": "->", 
            "to": "CPAtScrSample_to_KLAtScrSample"
        }, 
        "AtShaderGlobals": {
            "ctype": "AtShaderGlobals*", 
            "from": "KlAtShaderGlobals_to_AtShaderGlobals", 
            "methodop": ".", 
            "to": "AtShaderGlobals_to_KLAtShaderGlobals"
        }, 
        "AtString": {
            "ctype": "AtString", 
            "from": "KLString_to_CPAtString", 
            "methodop": ".", 
            "to": "CPAtString_to_KLString"
        }, 
        "AtTextureHandle": {
            "ctype": "AtTextureHandle*", 
            "from": "KLAtTextureHandle_to_CPAtTextureHandle", 
            "methodop": "->", 
            "to": "CPAtTextureHandle_to_KLAtTextureHandle"
        }, 
        "AtTextureParams": {
            "ctype": "AtTextureParams", 
            "from": "KlAtTextureParams_to_AtTextureParams", 
            "methodop": ".", 
            "to": "AtTextureParams_to_KLAtTextureParams"
        }, 
        "AtUserParamEntry": {
            "ctype": "AtUserParamEntry*", 
            "from": "KLAtUserParamEntry_to_CPAtUserParamEntry", 
            "methodop": "->", 
            "to": "CPAtUserParamEntry_to_KLAtUserParamEntry"
        }, 
        "AtUserParamIterator": {
            "ctype": "AtUserParamIterator*", 
            "from": "KLAtUserParamIterator_to_CPAtUserParamIterator", 
            "methodop": "->", 
            "to": "CPAtUserParamIterator_to_KLAtUserParamIterator"
        }, 
        "Boolean": {
            "ctype": "bool", 
            "from": "Boolean_to_bool", 
            "methodop": ".", 
            "to": "bool_to_Boolean"
        }, 
        "Box3": {
            "ctype": "AtBBox", 
            "from": "Box3_to_AtBBox", 
            "methodop": ".", 
            "to": "AtBBox_to_Box3"
        }, 
        "Color": {
            "ctype": "AtRGB", 
            "from": "Color_to_AtRGB", 
            "methodop": ".", 
            "to": "AtRGB_to_Color"
        }, 
        "Data": {
            "ctype": "void*", 
            "from": "Data_to_void", 
            "methodop": "->", 
            "to": "void_to_Data"
        }, 
        "Float32": {
            "ctype": "float", 
            "from": "Float32_to_float", 
            "methodop": ".", 
            "to": "float_to_Float32"
        }, 
        "Float64": {
            "ctype": "double", 
            "from": "Float64_to_double", 
            "methodop": ".", 
            "to": "double_to_Float64"
        }, 
        "Mat44": {
            "ctype": "AtMatrix", 
            "from": "Mat44_to_AtMatrix", 
            "methodop": ".", 
            "to": "AtMatrix_to_Mat44"
        }, 
        "SInt32": {
            "ctype": "int", 
            "from": "SInt32_to_int", 
            "methodop": ".", 
            "to": "int_to_SInt32"
        }, 
        "SInt64": {
            "ctype": "long long", 
            "from": "SInt64_to_long_long", 
            "methodop": ".", 
            "to": "long_long_to_SInt64"
        }, 
        "String": {
            "ctype": "char*", 
            "from": "String_to_char", 
            "methodop": "->", 
            "to": "char_to_String"
        }, 
        "String[]": {
            "ctype": "AtEnum", 
            "from": "StringArr_to_AtEnum", 
            "methodop": ".", 
            "to": "AtEnum_to_StringArr"
        }, 
        "UInt16": {
            "ctype": "AtUInt16", 
            "from": "UInt16_to_AtUInt16", 
            "methodop": ".", 
            "to": "AtUInt16_to_UInt16"
        }, 
        "UInt32": {
            "ctype": "unsigned int", 
            "from": "UInt32_to_unsigned_int", 
            "methodop": ".", 
            "to": "unsigned_int_to_UInt32"
        }, 
        "UInt64": {
            "ctype": "AtUInt64", 
            "from": "UInt64_to_AtUInt64", 
            "methodop": ".", 
            "to": "AtUInt64_to_UInt64"
        }, 
        "UInt8": {
            "ctype": "AtByte", 
            "from": "UInt8_to_AtByte", 
            "methodop": ".", 
            "to": "AtByte_to_UInt8"
        }, 
        "Vec2": {
            "ctype": "AtPoint2", 
            "from": "Vec2_to_AtPoint2", 
            "methodop": ".", 
            "to": "AtPoint2_to_Vec2"
        }, 
        "Vec3": {
            "ctype": "AtPoint", 
            "from": "Vec3_to_AtPoint", 
            "methodop": ".", 
            "to": "AtPoint_to_Vec3"
        }
    }
}