/**
    API for writing and reading node metadata 
  
*/

require Math;

//////////////////////////////////////////////////
//  enumerated values
//////////////////////////////////////////////////
//  overrides 
//////////////////////////////////////////////////
//  classes 
//////////////////////////////////////////////////
//  global-scope functions 
/**
Metadata Writing
These functions let the author of a node attach auxiliary information about parameters or the node to the node itself. These methods may only be called inside of the node_parameters method where the parameters are declared. This function receives an opaque pointer to a AtMetaDataStore structure which will hold the results until AiEnd() is called.
Note that Arnold currently supports one special case for metadata. If you attach a string named "synonym" to a parameter or to a node (by passing NULL for param), Arnold will accept the alternative name when creating nodes or setting parameters. This can be helpful for backwards compatibility.
Here is an example: node_parameters { AiParameterFlt("Kd",0.7f);  //createalower-casesynonymforparameterKd AiMetaDataSetStr(mds,"Kd","synonym","kd");  //describetheparameter AiMetaDataSetStr(mds,"Kd","description", "Diffusecoefficient"); //describethenodeitself AiMetaDataSetStr(mds,NULL,"description", "Thisisasimplelambertshaderforillustrationpurposes"); } 
Note that you should never pass allocated strings, as they will not be freed.
  mds   this is the AtMetaDataStore that is located inside the node's AtNodeEntry (note that mds is an argument to node_parameters) 
    param   the name of the node parameter to which the metadata will be attached (or NULL if you want to attach to the node itself) 
    name   the name of the metadata you want to attach 
    value   the value of the metadata 
   

*/


function AiMetaDataSetBool(io AtMetaDataStore mds, String param, String name, Boolean value) = '_fe_AiMetaDataSetBool';
function AiMetaDataSetBoolAtString(io AtMetaDataStore mds, String param, String name, Boolean value) = '_fe_AiMetaDataSetBoolAtString';
function AiMetaDataSetInt(io AtMetaDataStore mds, String param, String name, SInt32 value) = '_fe_AiMetaDataSetInt';
function AiMetaDataSetIntAtString(io AtMetaDataStore mds, String param, String name, SInt32 value) = '_fe_AiMetaDataSetIntAtString';
function AiMetaDataSetFlt(io AtMetaDataStore mds, String param, String name, Float32 value) = '_fe_AiMetaDataSetFlt';
function AiMetaDataSetFltAtString(io AtMetaDataStore mds, String param, String name, Float32 value) = '_fe_AiMetaDataSetFltAtString';
function AiMetaDataSetRGB(io AtMetaDataStore mds, String param, String name, AtColor value) = '_fe_AiMetaDataSetRGB';
function AiMetaDataSetRGBAtString(io AtMetaDataStore mds, String param, String name, AtColor value) = '_fe_AiMetaDataSetRGBAtString';
function AiMetaDataSetVec(io AtMetaDataStore mds, String param, String name, Vec3 value) = '_fe_AiMetaDataSetVec';
function AiMetaDataSetVecAtString(io AtMetaDataStore mds, String param, String name, Vec3 value) = '_fe_AiMetaDataSetVecAtString';
function AiMetaDataSetPnt(io AtMetaDataStore mds, String param, String name, Vec3 value) = '_fe_AiMetaDataSetPnt';
function AiMetaDataSetPntAtString(io AtMetaDataStore mds, String param, String name, Vec3 value) = '_fe_AiMetaDataSetPntAtString';
function AiMetaDataSetPnt2(io AtMetaDataStore mds, String param, String name, Vec2 value) = '_fe_AiMetaDataSetPnt2';
function AiMetaDataSetPnt2AtString(io AtMetaDataStore mds, String param, String name, Vec2 value) = '_fe_AiMetaDataSetPnt2AtString';
function AiMetaDataSetStr(io AtMetaDataStore mds, String param, String name, String value) = '_fe_AiMetaDataSetStr';
function AiMetaDataSetStrAtString(io AtMetaDataStore mds, String param, String name, String value) = '_fe_AiMetaDataSetStrAtString';
/**
Metadata Retrieval
These functions allow client code to examine metadata attached to specific parameters or to a node.
Following on the example above: constAtNodeEntry*entry=AiNodeEntryLookUp("my_simple_lambert"); char*desc; boolsuccess=AiMetaDataGetStr(entry,"Kd","description",&desc) if(success) printf("\nDescriptionforparameterKd:%s",desc); 
  entry   the AtNodeEntry of the node you want to get metadata from 
    param   the name of the node parameter you want to get metadata from (or NULL if you are looking for metadata on the node itself) 
    name   the name of the metadata you want to get 
    value   if the read succeeds, the variable pointed to by value will be overwritten with the metadata 
   true when the lookup is succesful 
 

*/


function Boolean AiMetaDataGetBoolAtString(AtNodeEntry entry, String param, String name, io Boolean value) = '_fe_AiMetaDataGetBoolAtString';
function Boolean AiMetaDataGetIntAtString(AtNodeEntry entry, String param, String name, io SInt32 value) = '_fe_AiMetaDataGetIntAtString';
function Boolean AiMetaDataGetFltAtString(AtNodeEntry entry, String param, String name, io Float32 value) = '_fe_AiMetaDataGetFltAtString';
function Boolean AiMetaDataGetRGBAtString(AtNodeEntry entry, String param, String name, io AtColor value) = '_fe_AiMetaDataGetRGBAtString';
function Boolean AiMetaDataGetVecAtString(AtNodeEntry entry, String param, String name, io Vec3 value) = '_fe_AiMetaDataGetVecAtString';
function Boolean AiMetaDataGetPntAtString(AtNodeEntry entry, String param, String name, io Vec3 value) = '_fe_AiMetaDataGetPntAtString';
function Boolean AiMetaDataGetPnt2AtString(AtNodeEntry entry, String param, String name, io Vec2 value) = '_fe_AiMetaDataGetPnt2AtString';
function Boolean AiMetaDataGetStrAtString(AtNodeEntry entry, String param, String name, String value) = '_fe_AiMetaDataGetStrAtString';
/**
Metadata Files
This function allows client code to manually load and apply a metadata file.
Usage: constchar*metadata_file="metadata_file.mtd"; boolsuccess=AiMetaDataLoadFile(metadata_file) if(!success) printf("\nErrorloadingmetadatafile%s",metadata_file); 
  filename   the name of the metadata file to load 
   true when the file could be read succesfully 
 

*/


function Boolean AiMetaDataLoadFile(String filename) = '_fe_AiMetaDataLoadFile';
