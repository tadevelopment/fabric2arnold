{
  "header": "#include \"_IncludeAll.h\"",
  "parameterprefix": "f2a",
  "functionentry": "F2A_TRY_STATEMENT", 
  "functionexit": "F2A_CATCH_STATEMENT", 
  "functionexitreturn": "F2A_CATCH_STATEMENT_RETURN",
  "typemapping": {
    "AtParamValue": {
        "ctype": "AtParamValue*",
        "from": "KlParamValue_to_AtParamValue", 
        "methodop": ".",
        "to": "AtParamValue_to_KLParamValue"
    },
    "AtArray": {
        "ctype": "AtArray*",
        "from": "KlArray_to_AtArray",
        "methodop": "->",
        "to": "AtArray_to_KLArray"
    },
    "AtLicenseInfo": {
        "ctype": "AtLicenseInfo*",
        "from": "KlAtLicenseInfo_to_AtLicenseInfo",
        "methodop": "->",
        "to": "AtLicenseInfo_to_KLAtLicenseInfo"
    },
    "AtRay": {
        "ctype": "AtRay",
        "from": "KlAtRay_to_AtRay",
        "methodop": ".",
        "to": "AtRay_to_KLAtRay"
    },
    "AtTextureParams": {
        "ctype": "AtTextureParams",
        "from": "KlAtTextureParams_to_AtTextureParams",
        "methodop": ".",
        "to": "AtTextureParams_to_KLAtTextureParams"
    },
    "AtMetaDataEntry": {
        "ctype": "AtMetaDataEntry*",
        "from": "KlAtMetaDataEntry_to_AtMetaDataEntry",
        "methodop": "->",
        "to": "AtMetaDataEntry_to_KLAtMetaDataEntry"
    },
    "AtAOVEntry": {
        "ctype": "AtAOVEntry*",
        "from": "KlAtAOVEntry_to_AtAOVEntry",
        "methodop": "->",
        "to": "AtAOVEntry_to_KLAtAOVEntry"
    },
    "AtDisplayCallback": {
        "ctype": "AtDisplayCallback",
        "from": "KlAtDisplayCallback_to_AtDisplayCallback",
        "methodop": ".",
        "to": "AtDisplayCallback_to_KLAtDisplayCallback"
    },
    "AtShaderGlobals": {
        "ctype": "AtShaderGlobals*",
        "from": "KlAtShaderGlobals_to_AtShaderGlobals",
        "methodop": ".",
        "to": "AtShaderGlobals_to_KLAtShaderGlobals"
    }
  },

  "functionbodies": {
    "_fe_AtParamValueAsUInt8"   : "  AtByte f2a_result = f2aThis_->BYTE;\n  KL::UInt8 _result;\n  AtByte_to_UInt8(f2a_result, _result);\n  return _result;\n",
    "_fe_AtParamValueAsSInt32"  : "  int f2a_result = f2aThis_->INT;\n  KL::SInt32 _result;\n  int_to_SInt32(f2a_result, _result);\n  return _result;\n",
    "_fe_AtParamValueAsUInt32"  : "  AtUInt32 f2a_result = f2aThis_->UINT;\n  KL::UInt32 _result;\n  unsigned_int_to_UInt32(f2a_result, _result);\n  return _result;\n",
    "_fe_AtParamValueAsBoolean" : "  bool f2a_result = f2aThis_->BOOL;\n  KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n  return _result;\n",
    "_fe_AtParamValueAsFloat32" : "  float f2a_result = f2aThis_->FLT;\n  KL::Float32 _result;\n  float_to_Float32(f2a_result, _result);\n  return _result;\n",
    "_fe_AtParamValueAsRGB"     : "  CPAtColor_to_KLColor(f2aThis_->RGB, _result);\n",
    "_fe_AtParamValueAsRGBA"    : "  CPAtRGBA_to_KLColor(f2aThis_->RGBA, _result);\n",
    "_fe_AtParamValueAsVec3"    : "  AtPoint_to_Vec3(f2aThis_->VEC, _result);\n",
    "_fe_AtParamValueAsVec2"    : "  AtPoint2_to_Vec2(f2aThis_->PNT2, _result);\n",
    "_fe_AtParamValueAsData"    : "  void* _result = f2aThis_->PTR;\n",
    "_fe_AtParamValueAsMat44"   : "  AtMatrix_to_Mat44(*f2aThis_->pMTX, _result);\n",
    "_fe_AtParamValueAsString"  : "  const char* f2a_result = f2aThis_->STR;\n  char_to_String(f2a_result, _result);\n",
    "_fe_AtParamValueAsAtArray" : "  const AtArray* parr = f2aThis_->ARRAY;\n AtArray_to_KLArray(parr, _result);\n",
    
    "_fe_AtParamValueSetUInt8"   : "  f2aThis_->BYTE = f2aVal;\n",
    "_fe_AtParamValueSetSInt32"  : "  f2aThis_->INT = f2aVal;\n",
    "_fe_AtParamValueSetUInt32"  : "  f2aThis_->UINT = f2aVal;\n",
    "_fe_AtParamValueSetBoolean" : "  f2aThis_->BOOL = f2aVal;\n",
    "_fe_AtParamValueSetFloat32" : "  f2aThis_->FLT = f2aVal;\n",
    "_fe_AtParamValueSetRGB"     : "  f2aThis_->RGB = f2aVal;\n",
    "_fe_AtParamValueSetRGBA"    : "  KLColor_to_CPAtRGBA(val, f2aThis_->RGBA);\n",
    "_fe_AtParamValueSetVec3"    : "  f2aThis_->PNT = f2aVal;\n",
    "_fe_AtParamValueSetVec2"    : "  f2aThis_->PNT2 = f2aVal;\n",
    "_fe_AtParamValueSetData"    : "  f2aThis_->PTR = f2aVal;\n",
    "_fe_AtParamValueSetMat44"   : "  Mat44_to_AtMatrix(val, *f2aThis_->pMTX);\n",
    "_fe_AtParamValueSetString"  : "  f2aThis_->STR = f2aVal;\n",
    "_fe_AtParamValueSetAtArray" : "  KlArray_to_AtArray(val, f2aThis_->ARRAY);\n",

    "_fe_AiArrayGetMtxFunc"     : "  AtMatrix mtx;\n  AiArrayGetMtx(f2aA, f2aI, mtx);\n  AtMatrix_to_Mat44(mtx, _result);\n",

    "_fe_AiArraySetBoolArr"     : "  uint32_t size = val.size();\n  if(size == 0) return true;\n  if (size < f2aA->nelements) return false;\n  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));\n  bool _result = true;\n",
    "_fe_AiArraySetByteArr"     : "  uint32_t size = val.size();\n  if(size == 0) return true;\n  if (size < f2aA->nelements) return false;\n  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));\n  bool _result = true;\n",
    "_fe_AiArraySetIntArr"      : "  uint32_t size = val.size();\n  if(size == 0) return true;\n  if (size < f2aA->nelements) return false;\n  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));\n  bool _result = true;\n",
    "_fe_AiArraySetUIntArr"     : "  uint32_t size = val.size();\n  if(size == 0) return true;\n  if (size < f2aA->nelements) return false;\n  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));\n  bool _result = true;\n",
    "_fe_AiArraySetFltArr"      : "  uint32_t size = val.size();\n  if(size == 0) return true;\n  if (size < f2aA->nelements) return false;\n  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));\n  bool _result = true;\n",
    "_fe_AiArraySetRGBArr"      : "  uint32_t size = val.size();\n  if(size == 0) return true;\n  if (size < f2aA->nelements) return false;\n  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));\n  bool _result = true;\n",
    "_fe_AiArraySetRGBAArr"     : "  uint32_t size = val.size();\n  if(size == 0) return true;\n  if (size < f2aA->nelements) return false;\n  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));\n  bool _result = true;\n",
    "_fe_AiArraySetPntArr"      : "  uint32_t size = val.size();\n  if(size == 0) return true;\n  if (size < f2aA->nelements) return false;\n  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));\n  bool _result = true;\n",
    "_fe_AiArraySetPnt2Arr"     : "  uint32_t size = val.size();\n  if(size == 0) return true;\n  if (size < f2aA->nelements) return false;\n  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));\n  bool _result = true;\n",
    "_fe_AiArraySetVecArr"      : "  uint32_t size = val.size();\n  if(size == 0) return true;\n  if (size < f2aA->nelements) return false;\n  memcpy(f2aA->data, &val[0], size * sizeof(val[0]));\n  bool _result = true;\n",
    "_fe_AiArrayGetBoolArr"     : "  static_assert(sizeof(Fabric::EDK::KL::Boolean) == sizeof(bool), \"Mismatched Size\");\n  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Boolean > arr(reinterpret_cast<Fabric::EDK::KL::Boolean*>(f2aA->data), f2aA->nelements);\n  val = arr;\n  bool _result = true;",
    "_fe_AiArrayGetByteArr"     : "  static_assert(sizeof(Fabric::EDK::KL::UInt8) == sizeof(AtByte), \"Mismatched Size\");\n  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::UInt8 > arr(reinterpret_cast<Fabric::EDK::KL::UInt8*>(f2aA->data), f2aA->nelements);\n  val = arr;\n  bool _result = true;",
    "_fe_AiArrayGetIntArr"      : "  static_assert(sizeof(Fabric::EDK::KL::SInt32) == sizeof(int), \"Mismatched Size\");\n  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > arr(reinterpret_cast<Fabric::EDK::KL::SInt32*>(f2aA->data), f2aA->nelements);\n  val = arr;\n  bool _result = true;",
    "_fe_AiArrayGetUIntArr"     : "  static_assert(sizeof(Fabric::EDK::KL::UInt32) == sizeof(unsigned int), \"Mismatched Size\");\n  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::UInt32 > arr(reinterpret_cast<Fabric::EDK::KL::UInt32*>(f2aA->data), f2aA->nelements);\n  val = arr;\n  bool _result = true;",
    "_fe_AiArrayGetFltArr"      : "  static_assert(sizeof(Fabric::EDK::KL::Float32) == sizeof(float), \"Mismatched Size\");\n  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > arr(reinterpret_cast<Fabric::EDK::KL::Float32*>(f2aA->data), f2aA->nelements);\n  val = arr;\n  bool _result = true;",
    "_fe_AiArrayGetRGBArr"      : "  static_assert(sizeof(Fabric::EDK::KL::RGB) == sizeof(AtRGB), \"Mismatched Size\");\n  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::RGB > arr(reinterpret_cast<Fabric::EDK::KL::RGB*>(f2aA->data), f2aA->nelements);\n  val = arr;\n  bool _result = true;",
    "_fe_AiArrayGetRGBAArr"     : "  static_assert(sizeof(Fabric::EDK::KL::Color) == sizeof(AtRGBA), \"Mismatched Size\");\n  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Color > arr(reinterpret_cast<Fabric::EDK::KL::Color*>(f2aA->data), f2aA->nelements);\n  val = arr;\n  bool _result = true;",
    "_fe_AiArrayGetPntArr"      : "  static_assert(sizeof(Fabric::EDK::KL::Vec3) == sizeof(AtPoint), \"Mismatched Size\");\n  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > arr(reinterpret_cast<Fabric::EDK::KL::Vec3*>(f2aA->data), f2aA->nelements);\n  val = arr;\n  bool _result = true;",
    "_fe_AiArrayGetPnt2Arr"     : "  static_assert(sizeof(Fabric::EDK::KL::Vec2) == sizeof(AtPoint2), \"Mismatched Size\");\n  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec2 > arr(reinterpret_cast<Fabric::EDK::KL::Vec2*>(f2aA->data), f2aA->nelements);\n  val = arr;\n  bool _result = true;",
    "_fe_AiArrayGetVecArr"      : "  static_assert(sizeof(Fabric::EDK::KL::Vec3) == sizeof(AtVector), \"Mismatched Size\");\n  Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > arr(reinterpret_cast<Fabric::EDK::KL::Vec3*>(f2aA->data), f2aA->nelements);\n  val = arr;\n  bool _result = true;",
    "_fe_AiMetaDataGetStrAtString": "  bool f2a_result = AiMetaDataGetStrAtString(f2aEntry, f2aParam, f2aName, const_cast<const char**>(&f2aValue));\n  Fabric::EDK::KL::Boolean _result;\n  bool_to_Boolean(f2a_result, _result);\n",
    "_fe_SetAtDisplayCallback"  : "  SetDisplayDriverNode(f2aDisplayDriver);\n  AiNodeSetPtr(f2aDisplayDriver, \"callback\", (void*)f2aCallback);\n",
    "_fe_AiNodeGetMatrix"       : "  AtMatrix f2a_result;\n  AiNodeGetMatrix(f2aNode, f2aParam, f2a_result);\n  AtMatrix_to_Mat44(f2a_result, _result);",
    "_fe_a2fRegisterPlugin"     : "  RegisterPlugin(f2aType, f2aOutput_type, f2aName, f2aFilename);",
    "_fe_a2fRegisterManager"    : "  RegisterKLMgr(mgr);\n",
    "_fe_a2fReleaseManager"     : "  ReleaseKLMgr();\n",
    "_fe_AiShaderGlobals"       : "  AtShaderGlobals* f2a_result = AiShaderGlobals();",
    "_fe_AiShaderGlobalsDestroy" : "  AiShaderGlobalsDestroy(f2aSg);",
    "_fe_GetParentAtShaderGlobals" : "  const AtShaderGlobals* f2a_result = f2aGlobals->psg;",

    "_fe_AiShaderEvalParamFuncMtx": "  AtMatrix * f2a_result = AiShaderEvalParamFuncMtx(f2aSg, f2aNode, f2aPid);\n  AtMatrix_to_Mat44(*f2a_result, _result);",

    "_fe_AiRawDriverInitialize" : "  const char** req_aovs;\n  int nreq = required_aovs.size();\n  req_aovs = reinterpret_cast<const char**>(alloca( nreq + 1 ));\n  for (int i = 0; i < nreq; i++) { req_aovs[i] = required_aovs[i].c_str(); }\n  req_aovs[nreq] = NULL;\n  AiRawDriverInitialize( f2aNode, req_aovs, f2aRequires_depth, f2aData );",
    "_fe_AiFilterInitialize"    : "  const char** req_aovs;\n  int nreq = required_aovs.size();\n  req_aovs = reinterpret_cast<const char**>(alloca( nreq + 1 ));\n  for (int i = 0; i < nreq; i++) { req_aovs[i] = required_aovs[i].c_str(); }\n  req_aovs[nreq] = NULL;\n  AiFilterInitialize(f2aNode, f2aRequires_depth, req_aovs, f2aData);\n",
    "_fe_AiDriverExtension"     : "  const char ** f2a_result = AiDriverExtension(f2aNode_entry);\n  while (*f2a_result) {\n    Fabric::EDK::KL::String s;\n    char_to_String( *f2a_result, s );\n    _result.push_back( s );\n  }",
    "_fe_AiOutputIteratorGetNext" : "  bool f2a_result = AiOutputIteratorGetNext(f2aIter, (const char**)&f2aOutput_name, &f2aPixel_type, (const void**)&f2aBucket_data );\n  Fabric::EDK::KL::Boolean _result = f2a_result;\n"
  },
  "parameterconversionstoskip": [
    "_fe_AiRawDriverInitialize.required_aovs",
    "_fe_AiFilterInitialize.required_aovs"
  ]
}

